import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { PassThrough } from "node:stream";
import { createReadableStreamFromReadable } from "@react-router/node";
import { ServerRouter, useParams, useLoaderData, useActionData, useMatches, useRouteError, useNavigate, Meta, Links, ScrollRestoration, Scripts, Outlet, isRouteErrorResponse, useLocation, Link } from "react-router";
import { isbot } from "isbot";
import { renderToPipeableStream } from "react-dom/server";
import * as React from "react";
import { createElement, createContext, useState, useEffect, useContext, Suspense } from "react";
import Web3 from "web3";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva } from "class-variance-authority";
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";
import { LightBulbIcon } from "@heroicons/react/24/outline";
import { Eye, EyeOff, X, Loader2, ChevronLeft, ChevronRight, Check, ChevronsUpDown, Trash, FileText, File, Image, Settings, CreditCard, MoreVertical, Plus, AlertTriangle, User, ArrowRight, HelpCircle, Pizza, SunMedium, Moon, Laptop, Car, Tag, Bolt, Wrench, CircleSlash, Calendar, Cross, Scroll, LogOut, Search, Circle, GripVertical, ChevronUp, ChevronDown, Lock, UserPen, CookieIcon, CalendarCheck2, UsersRound, Menu, CircleCheck, PanelsTopLeft, RocketIcon, TriangleAlert, Receipt, CircleGauge, Notebook, Printer } from "lucide-react";
import { Slot } from "@radix-ui/react-slot";
import * as z from "zod";
import { useFormContext, FormProvider, Controller, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Label as Label$2 } from "@radix-ui/react-label";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import * as RechartsPrimitive from "recharts";
import { RadialBarChart, PolarRadiusAxis, Label as Label$1, RadialBar, BarChart, YAxis, XAxis, Bar } from "recharts";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { Command as Command$1 } from "cmdk";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import Papa from "papaparse";
const ABORT_DELAY = 5e3;
function handleRequest(request, responseStatusCode, responseHeaders, routerContext, loadContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    let userAgent = request.headers.get("user-agent");
    let readyOption = userAgent && isbot(userAgent) || routerContext.isSpaMode ? "onAllReady" : "onShellReady";
    const { pipe, abort } = renderToPipeableStream(
      /* @__PURE__ */ jsx(
        ServerRouter,
        {
          context: routerContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        }
      ),
      {
        [readyOption]() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);
          responseHeaders.set("Content-Type", "text/html");
          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          );
          pipe(body);
        },
        onShellError(error) {
          reject(error);
        },
        onError(error) {
          responseStatusCode = 500;
          if (shellRendered) {
            console.error(error);
          }
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
const entryServer = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: handleRequest
}, Symbol.toStringTag, { value: "Module" }));
function withComponentProps(Component) {
  return function Wrapped() {
    const props = {
      params: useParams(),
      loaderData: useLoaderData(),
      actionData: useActionData(),
      matches: useMatches()
    };
    return createElement(Component, props);
  };
}
function withErrorBoundaryProps(ErrorBoundary3) {
  return function Wrapped() {
    const props = {
      params: useParams(),
      loaderData: useLoaderData(),
      actionData: useActionData(),
      error: useRouteError()
    };
    return createElement(ErrorBoundary3, props);
  };
}
const stylesheet = "/assets/app-G5XS6ygT.css";
const contractName = "Voting";
const abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "candidates",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "string",
        name: "party",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [],
    name: "candidatesCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [],
    name: "maxVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "voterAddresses",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "voters",
    outputs: [
      {
        internalType: "string",
        name: "fullName",
        type: "string"
      },
      {
        internalType: "bool",
        name: "isRegistered",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "hasVoted",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "string",
        name: "_party",
        type: "string"
      }
    ],
    name: "addCandidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voterAddress",
        type: "address"
      },
      {
        internalType: "string",
        name: "_fullname",
        type: "string"
      }
    ],
    name: "registerVoter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "authenticateVoter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_candidateIds",
        type: "uint256[]"
      }
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_candidateId",
        type: "uint256"
      }
    ],
    name: "getCandidate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [],
    name: "getAllCandidates",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256"
          },
          {
            internalType: "string",
            name: "name",
            type: "string"
          },
          {
            internalType: "string",
            name: "party",
            type: "string"
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256"
          }
        ],
        internalType: "struct Voting.Candidate[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voterAddress",
        type: "address"
      }
    ],
    name: "getVoter",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      },
      {
        internalType: "bool",
        name: "",
        type: "bool"
      },
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  },
  {
    inputs: [],
    name: "getAllVoters",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "fullName",
            type: "string"
          },
          {
            internalType: "bool",
            name: "isRegistered",
            type: "bool"
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool"
          }
        ],
        internalType: "struct Voting.Voter[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function",
    constant: true
  }
];
const metadata = '{"compiler":{"version":"0.8.0+commit.c7dfd78e"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_party","type":"string"}],"name":"addCandidate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"authenticateVoter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"candidates","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"party","type":"string"},{"internalType":"uint256","name":"voteCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"candidatesCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllCandidates","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"party","type":"string"},{"internalType":"uint256","name":"voteCount","type":"uint256"}],"internalType":"struct Voting.Candidate[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllVoters","outputs":[{"components":[{"internalType":"string","name":"fullName","type":"string"},{"internalType":"bool","name":"isRegistered","type":"bool"},{"internalType":"bool","name":"hasVoted","type":"bool"}],"internalType":"struct Voting.Voter[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_candidateId","type":"uint256"}],"name":"getCandidate","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_voterAddress","type":"address"}],"name":"getVoter","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"bool","name":"","type":"bool"},{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxVotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_voterAddress","type":"address"},{"internalType":"string","name":"_fullname","type":"string"}],"name":"registerVoter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_candidateIds","type":"uint256[]"}],"name":"vote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"voterAddresses","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"voters","outputs":[{"internalType":"string","name":"fullName","type":"string"},{"internalType":"bool","name":"isRegistered","type":"bool"},{"internalType":"bool","name":"hasVoted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"project:/contracts/Voting.sol":"Voting"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"project:/contracts/Voting.sol":{"keccak256":"0x1bee4760130d1e99798dc15521b0f80d27d2950906fe1cd2c2304da7e41ceb16","license":"MIT","urls":["bzz-raw://33d4182809b48b2b3ffdf4175699c751553f6b4ff486f4160590e419869e007d","dweb:/ipfs/QmZq9m66d3MsjF3hQnu7zE8uxgjbdAqZ9tjdx3muMJRy8k"]}},"version":1}';
const bytecode = "";
const deployedBytecode = "";
const immutableReferences = {};
const generatedSources = [];
const deployedGeneratedSources = [
  {
    ast: {
      nodeType: "YulBlock",
      src: "0:23902:2",
      statements: [
        {
          body: {
            nodeType: "YulBlock",
            src: "126:520:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "136:89:2",
                value: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "217:6:2"
                        }
                      ],
                      functionName: {
                        name: "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "160:56:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "160:64:2"
                    }
                  ],
                  functionName: {
                    name: "allocateMemory",
                    nodeType: "YulIdentifier",
                    src: "145:14:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "145:80:2"
                },
                variableNames: [
                  {
                    name: "array",
                    nodeType: "YulIdentifier",
                    src: "136:5:2"
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "234:16:2",
                value: {
                  name: "array",
                  nodeType: "YulIdentifier",
                  src: "245:5:2"
                },
                variables: [
                  {
                    name: "dst",
                    nodeType: "YulTypedName",
                    src: "238:3:2",
                    type: ""
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "array",
                      nodeType: "YulIdentifier",
                      src: "266:5:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "273:6:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "259:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "259:21:2"
                },
                nodeType: "YulExpressionStatement",
                src: "259:21:2"
              },
              {
                nodeType: "YulAssignment",
                src: "281:23:2",
                value: {
                  "arguments": [
                    {
                      name: "array",
                      nodeType: "YulIdentifier",
                      src: "292:5:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "299:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "288:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "288:16:2"
                },
                variableNames: [
                  {
                    name: "dst",
                    nodeType: "YulIdentifier",
                    src: "281:3:2"
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "313:17:2",
                value: {
                  name: "offset",
                  nodeType: "YulIdentifier",
                  src: "324:6:2"
                },
                variables: [
                  {
                    name: "src",
                    nodeType: "YulTypedName",
                    src: "317:3:2",
                    type: ""
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "379:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "388:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "391:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "381:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "381:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "381:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "src",
                          nodeType: "YulIdentifier",
                          src: "349:3:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "length",
                              nodeType: "YulIdentifier",
                              src: "358:6:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "366:4:2",
                              type: "",
                              value: "0x20"
                            }
                          ],
                          functionName: {
                            name: "mul",
                            nodeType: "YulIdentifier",
                            src: "354:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "354:17:2"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "345:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "345:27:2"
                    },
                    {
                      name: "end",
                      nodeType: "YulIdentifier",
                      src: "374:3:2"
                    }
                  ],
                  functionName: {
                    name: "gt",
                    nodeType: "YulIdentifier",
                    src: "342:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "342:36:2"
                },
                nodeType: "YulIf",
                src: "339:2:2"
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "464:176:2",
                  statements: [
                    {
                      nodeType: "YulVariableDeclaration",
                      src: "478:21:2",
                      value: {
                        name: "src",
                        nodeType: "YulIdentifier",
                        src: "496:3:2"
                      },
                      variables: [
                        {
                          name: "elementPos",
                          nodeType: "YulTypedName",
                          src: "482:10:2",
                          type: ""
                        }
                      ]
                    },
                    {
                      expression: {
                        "arguments": [
                          {
                            name: "dst",
                            nodeType: "YulIdentifier",
                            src: "519:3:2"
                          },
                          {
                            "arguments": [
                              {
                                name: "elementPos",
                                nodeType: "YulIdentifier",
                                src: "545:10:2"
                              },
                              {
                                name: "end",
                                nodeType: "YulIdentifier",
                                src: "557:3:2"
                              }
                            ],
                            functionName: {
                              name: "abi_decode_t_uint256",
                              nodeType: "YulIdentifier",
                              src: "524:20:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "524:37:2"
                          }
                        ],
                        functionName: {
                          name: "mstore",
                          nodeType: "YulIdentifier",
                          src: "512:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "512:50:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "512:50:2"
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "575:21:2",
                      value: {
                        "arguments": [
                          {
                            name: "dst",
                            nodeType: "YulIdentifier",
                            src: "586:3:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "591:4:2",
                            type: "",
                            value: "0x20"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "582:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "582:14:2"
                      },
                      variableNames: [
                        {
                          name: "dst",
                          nodeType: "YulIdentifier",
                          src: "575:3:2"
                        }
                      ]
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "609:21:2",
                      value: {
                        "arguments": [
                          {
                            name: "src",
                            nodeType: "YulIdentifier",
                            src: "620:3:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "625:4:2",
                            type: "",
                            value: "0x20"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "616:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "616:14:2"
                      },
                      variableNames: [
                        {
                          name: "src",
                          nodeType: "YulIdentifier",
                          src: "609:3:2"
                        }
                      ]
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "i",
                      nodeType: "YulIdentifier",
                      src: "426:1:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "429:6:2"
                    }
                  ],
                  functionName: {
                    name: "lt",
                    nodeType: "YulIdentifier",
                    src: "423:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "423:13:2"
                },
                nodeType: "YulForLoop",
                post: {
                  nodeType: "YulBlock",
                  src: "437:18:2",
                  statements: [
                    {
                      nodeType: "YulAssignment",
                      src: "439:14:2",
                      value: {
                        "arguments": [
                          {
                            name: "i",
                            nodeType: "YulIdentifier",
                            src: "448:1:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "451:1:2",
                            type: "",
                            value: "1"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "444:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "444:9:2"
                      },
                      variableNames: [
                        {
                          name: "i",
                          nodeType: "YulIdentifier",
                          src: "439:1:2"
                        }
                      ]
                    }
                  ]
                },
                pre: {
                  nodeType: "YulBlock",
                  src: "408:14:2",
                  statements: [
                    {
                      nodeType: "YulVariableDeclaration",
                      src: "410:10:2",
                      value: {
                        kind: "number",
                        nodeType: "YulLiteral",
                        src: "419:1:2",
                        type: "",
                        value: "0"
                      },
                      variables: [
                        {
                          name: "i",
                          nodeType: "YulTypedName",
                          src: "414:1:2",
                          type: ""
                        }
                      ]
                    }
                  ]
                },
                src: "404:236:2"
              }
            ]
          },
          name: "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "offset",
              nodeType: "YulTypedName",
              src: "96:6:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "104:6:2",
              type: ""
            },
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "112:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "array",
              nodeType: "YulTypedName",
              src: "120:5:2",
              type: ""
            }
          ],
          src: "24:622:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "736:260:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "746:74:2",
                value: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "812:6:2"
                        }
                      ],
                      functionName: {
                        name: "array_allocation_size_t_string_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "770:41:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "770:49:2"
                    }
                  ],
                  functionName: {
                    name: "allocateMemory",
                    nodeType: "YulIdentifier",
                    src: "755:14:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "755:65:2"
                },
                variableNames: [
                  {
                    name: "array",
                    nodeType: "YulIdentifier",
                    src: "746:5:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "array",
                      nodeType: "YulIdentifier",
                      src: "836:5:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "843:6:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "829:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "829:21:2"
                },
                nodeType: "YulExpressionStatement",
                src: "829:21:2"
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "859:27:2",
                value: {
                  "arguments": [
                    {
                      name: "array",
                      nodeType: "YulIdentifier",
                      src: "874:5:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "881:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "870:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "870:16:2"
                },
                variables: [
                  {
                    name: "dst",
                    nodeType: "YulTypedName",
                    src: "863:3:2",
                    type: ""
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "924:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "933:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "936:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "926:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "926:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "926:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "src",
                          nodeType: "YulIdentifier",
                          src: "905:3:2"
                        },
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "910:6:2"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "901:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "901:16:2"
                    },
                    {
                      name: "end",
                      nodeType: "YulIdentifier",
                      src: "919:3:2"
                    }
                  ],
                  functionName: {
                    name: "gt",
                    nodeType: "YulIdentifier",
                    src: "898:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "898:25:2"
                },
                nodeType: "YulIf",
                src: "895:2:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "src",
                      nodeType: "YulIdentifier",
                      src: "973:3:2"
                    },
                    {
                      name: "dst",
                      nodeType: "YulIdentifier",
                      src: "978:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "983:6:2"
                    }
                  ],
                  functionName: {
                    name: "copy_calldata_to_memory",
                    nodeType: "YulIdentifier",
                    src: "949:23:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "949:41:2"
                },
                nodeType: "YulExpressionStatement",
                src: "949:41:2"
              }
            ]
          },
          name: "abi_decode_available_length_t_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "src",
              nodeType: "YulTypedName",
              src: "709:3:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "714:6:2",
              type: ""
            },
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "722:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "array",
              nodeType: "YulTypedName",
              src: "730:5:2",
              type: ""
            }
          ],
          src: "652:344:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "1054:87:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "1064:29:2",
                value: {
                  "arguments": [
                    {
                      name: "offset",
                      nodeType: "YulIdentifier",
                      src: "1086:6:2"
                    }
                  ],
                  functionName: {
                    name: "calldataload",
                    nodeType: "YulIdentifier",
                    src: "1073:12:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1073:20:2"
                },
                variableNames: [
                  {
                    name: "value",
                    nodeType: "YulIdentifier",
                    src: "1064:5:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "1129:5:2"
                    }
                  ],
                  functionName: {
                    name: "validator_revert_t_address",
                    nodeType: "YulIdentifier",
                    src: "1102:26:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1102:33:2"
                },
                nodeType: "YulExpressionStatement",
                src: "1102:33:2"
              }
            ]
          },
          name: "abi_decode_t_address",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "offset",
              nodeType: "YulTypedName",
              src: "1032:6:2",
              type: ""
            },
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "1040:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "1048:5:2",
              type: ""
            }
          ],
          src: "1002:139:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "1241:226:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "1290:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "1299:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "1302:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "1292:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "1292:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "1292:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "1269:6:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "1277:4:2",
                              type: "",
                              value: "0x1f"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "1265:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "1265:17:2"
                        },
                        {
                          name: "end",
                          nodeType: "YulIdentifier",
                          src: "1284:3:2"
                        }
                      ],
                      functionName: {
                        name: "slt",
                        nodeType: "YulIdentifier",
                        src: "1261:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "1261:27:2"
                    }
                  ],
                  functionName: {
                    name: "iszero",
                    nodeType: "YulIdentifier",
                    src: "1254:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1254:35:2"
                },
                nodeType: "YulIf",
                src: "1251:2:2"
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "1315:34:2",
                value: {
                  "arguments": [
                    {
                      name: "offset",
                      nodeType: "YulIdentifier",
                      src: "1342:6:2"
                    }
                  ],
                  functionName: {
                    name: "calldataload",
                    nodeType: "YulIdentifier",
                    src: "1329:12:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1329:20:2"
                },
                variables: [
                  {
                    name: "length",
                    nodeType: "YulTypedName",
                    src: "1319:6:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "1358:103:2",
                value: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "offset",
                          nodeType: "YulIdentifier",
                          src: "1434:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "1442:4:2",
                          type: "",
                          value: "0x20"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "1430:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "1430:17:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "1449:6:2"
                    },
                    {
                      name: "end",
                      nodeType: "YulIdentifier",
                      src: "1457:3:2"
                    }
                  ],
                  functionName: {
                    name: "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "1367:62:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1367:94:2"
                },
                variableNames: [
                  {
                    name: "array",
                    nodeType: "YulIdentifier",
                    src: "1358:5:2"
                  }
                ]
              }
            ]
          },
          name: "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "offset",
              nodeType: "YulTypedName",
              src: "1219:6:2",
              type: ""
            },
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "1227:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "array",
              nodeType: "YulTypedName",
              src: "1235:5:2",
              type: ""
            }
          ],
          src: "1164:303:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "1549:211:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "1598:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "1607:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "1610:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "1600:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "1600:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "1600:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "1577:6:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "1585:4:2",
                              type: "",
                              value: "0x1f"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "1573:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "1573:17:2"
                        },
                        {
                          name: "end",
                          nodeType: "YulIdentifier",
                          src: "1592:3:2"
                        }
                      ],
                      functionName: {
                        name: "slt",
                        nodeType: "YulIdentifier",
                        src: "1569:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "1569:27:2"
                    }
                  ],
                  functionName: {
                    name: "iszero",
                    nodeType: "YulIdentifier",
                    src: "1562:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1562:35:2"
                },
                nodeType: "YulIf",
                src: "1559:2:2"
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "1623:34:2",
                value: {
                  "arguments": [
                    {
                      name: "offset",
                      nodeType: "YulIdentifier",
                      src: "1650:6:2"
                    }
                  ],
                  functionName: {
                    name: "calldataload",
                    nodeType: "YulIdentifier",
                    src: "1637:12:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1637:20:2"
                },
                variables: [
                  {
                    name: "length",
                    nodeType: "YulTypedName",
                    src: "1627:6:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "1666:88:2",
                value: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "offset",
                          nodeType: "YulIdentifier",
                          src: "1727:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "1735:4:2",
                          type: "",
                          value: "0x20"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "1723:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "1723:17:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "1742:6:2"
                    },
                    {
                      name: "end",
                      nodeType: "YulIdentifier",
                      src: "1750:3:2"
                    }
                  ],
                  functionName: {
                    name: "abi_decode_available_length_t_string_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "1675:47:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1675:79:2"
                },
                variableNames: [
                  {
                    name: "array",
                    nodeType: "YulIdentifier",
                    src: "1666:5:2"
                  }
                ]
              }
            ]
          },
          name: "abi_decode_t_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "offset",
              nodeType: "YulTypedName",
              src: "1527:6:2",
              type: ""
            },
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "1535:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "array",
              nodeType: "YulTypedName",
              src: "1543:5:2",
              type: ""
            }
          ],
          src: "1487:273:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "1818:87:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "1828:29:2",
                value: {
                  "arguments": [
                    {
                      name: "offset",
                      nodeType: "YulIdentifier",
                      src: "1850:6:2"
                    }
                  ],
                  functionName: {
                    name: "calldataload",
                    nodeType: "YulIdentifier",
                    src: "1837:12:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1837:20:2"
                },
                variableNames: [
                  {
                    name: "value",
                    nodeType: "YulIdentifier",
                    src: "1828:5:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "1893:5:2"
                    }
                  ],
                  functionName: {
                    name: "validator_revert_t_uint256",
                    nodeType: "YulIdentifier",
                    src: "1866:26:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1866:33:2"
                },
                nodeType: "YulExpressionStatement",
                src: "1866:33:2"
              }
            ]
          },
          name: "abi_decode_t_uint256",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "offset",
              nodeType: "YulTypedName",
              src: "1796:6:2",
              type: ""
            },
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "1804:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "1812:5:2",
              type: ""
            }
          ],
          src: "1766:139:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "1977:196:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "2023:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "2032:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "2035:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "2025:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "2025:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "2025:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "1998:7:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "2007:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "1994:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "1994:23:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "2019:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "slt",
                    nodeType: "YulIdentifier",
                    src: "1990:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "1990:32:2"
                },
                nodeType: "YulIf",
                src: "1987:2:2"
              },
              {
                nodeType: "YulBlock",
                src: "2049:117:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "2064:15:2",
                    value: {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "2078:1:2",
                      type: "",
                      value: "0"
                    },
                    variables: [
                      {
                        name: "offset",
                        nodeType: "YulTypedName",
                        src: "2068:6:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "2093:63:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "2128:9:2"
                            },
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "2139:6:2"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "2124:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "2124:22:2"
                        },
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "2148:7:2"
                        }
                      ],
                      functionName: {
                        name: "abi_decode_t_address",
                        nodeType: "YulIdentifier",
                        src: "2103:20:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2103:53:2"
                    },
                    variableNames: [
                      {
                        name: "value0",
                        nodeType: "YulIdentifier",
                        src: "2093:6:2"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          name: "abi_decode_tuple_t_address",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "1947:9:2",
              type: ""
            },
            {
              name: "dataEnd",
              nodeType: "YulTypedName",
              src: "1958:7:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "1970:6:2",
              type: ""
            }
          ],
          src: "1911:262:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "2272:427:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "2318:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "2327:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "2330:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "2320:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "2320:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "2320:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "2293:7:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "2302:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "2289:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2289:23:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "2314:2:2",
                      type: "",
                      value: "64"
                    }
                  ],
                  functionName: {
                    name: "slt",
                    nodeType: "YulIdentifier",
                    src: "2285:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "2285:32:2"
                },
                nodeType: "YulIf",
                src: "2282:2:2"
              },
              {
                nodeType: "YulBlock",
                src: "2344:117:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "2359:15:2",
                    value: {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "2373:1:2",
                      type: "",
                      value: "0"
                    },
                    variables: [
                      {
                        name: "offset",
                        nodeType: "YulTypedName",
                        src: "2363:6:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "2388:63:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "2423:9:2"
                            },
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "2434:6:2"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "2419:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "2419:22:2"
                        },
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "2443:7:2"
                        }
                      ],
                      functionName: {
                        name: "abi_decode_t_address",
                        nodeType: "YulIdentifier",
                        src: "2398:20:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2398:53:2"
                    },
                    variableNames: [
                      {
                        name: "value0",
                        nodeType: "YulIdentifier",
                        src: "2388:6:2"
                      }
                    ]
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "2471:221:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "2486:46:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "2517:9:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "2528:2:2",
                              type: "",
                              value: "32"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "2513:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "2513:18:2"
                        }
                      ],
                      functionName: {
                        name: "calldataload",
                        nodeType: "YulIdentifier",
                        src: "2500:12:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2500:32:2"
                    },
                    variables: [
                      {
                        name: "offset",
                        nodeType: "YulTypedName",
                        src: "2490:6:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    body: {
                      nodeType: "YulBlock",
                      src: "2579:16:2",
                      statements: [
                        {
                          expression: {
                            "arguments": [
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "2588:1:2",
                                type: "",
                                value: "0"
                              },
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "2591:1:2",
                                type: "",
                                value: "0"
                              }
                            ],
                            functionName: {
                              name: "revert",
                              nodeType: "YulIdentifier",
                              src: "2581:6:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "2581:12:2"
                          },
                          nodeType: "YulExpressionStatement",
                          src: "2581:12:2"
                        }
                      ]
                    },
                    condition: {
                      "arguments": [
                        {
                          name: "offset",
                          nodeType: "YulIdentifier",
                          src: "2551:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "2559:18:2",
                          type: "",
                          value: "0xffffffffffffffff"
                        }
                      ],
                      functionName: {
                        name: "gt",
                        nodeType: "YulIdentifier",
                        src: "2548:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2548:30:2"
                    },
                    nodeType: "YulIf",
                    src: "2545:2:2"
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "2609:73:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "2654:9:2"
                            },
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "2665:6:2"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "2650:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "2650:22:2"
                        },
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "2674:7:2"
                        }
                      ],
                      functionName: {
                        name: "abi_decode_t_string_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "2619:30:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2619:63:2"
                    },
                    variableNames: [
                      {
                        name: "value1",
                        nodeType: "YulIdentifier",
                        src: "2609:6:2"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          name: "abi_decode_tuple_t_addresst_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "2234:9:2",
              type: ""
            },
            {
              name: "dataEnd",
              nodeType: "YulTypedName",
              src: "2245:7:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "2257:6:2",
              type: ""
            },
            {
              name: "value1",
              nodeType: "YulTypedName",
              src: "2265:6:2",
              type: ""
            }
          ],
          src: "2179:520:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "2796:314:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "2842:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "2851:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "2854:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "2844:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "2844:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "2844:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "2817:7:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "2826:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "2813:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2813:23:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "2838:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "slt",
                    nodeType: "YulIdentifier",
                    src: "2809:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "2809:32:2"
                },
                nodeType: "YulIf",
                src: "2806:2:2"
              },
              {
                nodeType: "YulBlock",
                src: "2868:235:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "2883:45:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "2914:9:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "2925:1:2",
                              type: "",
                              value: "0"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "2910:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "2910:17:2"
                        }
                      ],
                      functionName: {
                        name: "calldataload",
                        nodeType: "YulIdentifier",
                        src: "2897:12:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2897:31:2"
                    },
                    variables: [
                      {
                        name: "offset",
                        nodeType: "YulTypedName",
                        src: "2887:6:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    body: {
                      nodeType: "YulBlock",
                      src: "2975:16:2",
                      statements: [
                        {
                          expression: {
                            "arguments": [
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "2984:1:2",
                                type: "",
                                value: "0"
                              },
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "2987:1:2",
                                type: "",
                                value: "0"
                              }
                            ],
                            functionName: {
                              name: "revert",
                              nodeType: "YulIdentifier",
                              src: "2977:6:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "2977:12:2"
                          },
                          nodeType: "YulExpressionStatement",
                          src: "2977:12:2"
                        }
                      ]
                    },
                    condition: {
                      "arguments": [
                        {
                          name: "offset",
                          nodeType: "YulIdentifier",
                          src: "2947:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "2955:18:2",
                          type: "",
                          value: "0xffffffffffffffff"
                        }
                      ],
                      functionName: {
                        name: "gt",
                        nodeType: "YulIdentifier",
                        src: "2944:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "2944:30:2"
                    },
                    nodeType: "YulIf",
                    src: "2941:2:2"
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "3005:88:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "3065:9:2"
                            },
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "3076:6:2"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "3061:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "3061:22:2"
                        },
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "3085:7:2"
                        }
                      ],
                      functionName: {
                        name: "abi_decode_t_array$_t_uint256_$dyn_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "3015:45:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3015:78:2"
                    },
                    variableNames: [
                      {
                        name: "value0",
                        nodeType: "YulIdentifier",
                        src: "3005:6:2"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          name: "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "2766:9:2",
              type: ""
            },
            {
              name: "dataEnd",
              nodeType: "YulTypedName",
              src: "2777:7:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "2789:6:2",
              type: ""
            }
          ],
          src: "2705:405:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "3219:530:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "3265:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "3274:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "3277:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "3267:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "3267:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "3267:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "3240:7:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "3249:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "3236:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3236:23:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "3261:2:2",
                      type: "",
                      value: "64"
                    }
                  ],
                  functionName: {
                    name: "slt",
                    nodeType: "YulIdentifier",
                    src: "3232:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "3232:32:2"
                },
                nodeType: "YulIf",
                src: "3229:2:2"
              },
              {
                nodeType: "YulBlock",
                src: "3291:220:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "3306:45:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "3337:9:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "3348:1:2",
                              type: "",
                              value: "0"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "3333:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "3333:17:2"
                        }
                      ],
                      functionName: {
                        name: "calldataload",
                        nodeType: "YulIdentifier",
                        src: "3320:12:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3320:31:2"
                    },
                    variables: [
                      {
                        name: "offset",
                        nodeType: "YulTypedName",
                        src: "3310:6:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    body: {
                      nodeType: "YulBlock",
                      src: "3398:16:2",
                      statements: [
                        {
                          expression: {
                            "arguments": [
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "3407:1:2",
                                type: "",
                                value: "0"
                              },
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "3410:1:2",
                                type: "",
                                value: "0"
                              }
                            ],
                            functionName: {
                              name: "revert",
                              nodeType: "YulIdentifier",
                              src: "3400:6:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "3400:12:2"
                          },
                          nodeType: "YulExpressionStatement",
                          src: "3400:12:2"
                        }
                      ]
                    },
                    condition: {
                      "arguments": [
                        {
                          name: "offset",
                          nodeType: "YulIdentifier",
                          src: "3370:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "3378:18:2",
                          type: "",
                          value: "0xffffffffffffffff"
                        }
                      ],
                      functionName: {
                        name: "gt",
                        nodeType: "YulIdentifier",
                        src: "3367:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3367:30:2"
                    },
                    nodeType: "YulIf",
                    src: "3364:2:2"
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "3428:73:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "3473:9:2"
                            },
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "3484:6:2"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "3469:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "3469:22:2"
                        },
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "3493:7:2"
                        }
                      ],
                      functionName: {
                        name: "abi_decode_t_string_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "3438:30:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3438:63:2"
                    },
                    variableNames: [
                      {
                        name: "value0",
                        nodeType: "YulIdentifier",
                        src: "3428:6:2"
                      }
                    ]
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "3521:221:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "3536:46:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "3567:9:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "3578:2:2",
                              type: "",
                              value: "32"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "3563:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "3563:18:2"
                        }
                      ],
                      functionName: {
                        name: "calldataload",
                        nodeType: "YulIdentifier",
                        src: "3550:12:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3550:32:2"
                    },
                    variables: [
                      {
                        name: "offset",
                        nodeType: "YulTypedName",
                        src: "3540:6:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    body: {
                      nodeType: "YulBlock",
                      src: "3629:16:2",
                      statements: [
                        {
                          expression: {
                            "arguments": [
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "3638:1:2",
                                type: "",
                                value: "0"
                              },
                              {
                                kind: "number",
                                nodeType: "YulLiteral",
                                src: "3641:1:2",
                                type: "",
                                value: "0"
                              }
                            ],
                            functionName: {
                              name: "revert",
                              nodeType: "YulIdentifier",
                              src: "3631:6:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "3631:12:2"
                          },
                          nodeType: "YulExpressionStatement",
                          src: "3631:12:2"
                        }
                      ]
                    },
                    condition: {
                      "arguments": [
                        {
                          name: "offset",
                          nodeType: "YulIdentifier",
                          src: "3601:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "3609:18:2",
                          type: "",
                          value: "0xffffffffffffffff"
                        }
                      ],
                      functionName: {
                        name: "gt",
                        nodeType: "YulIdentifier",
                        src: "3598:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3598:30:2"
                    },
                    nodeType: "YulIf",
                    src: "3595:2:2"
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "3659:73:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "3704:9:2"
                            },
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "3715:6:2"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "3700:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "3700:22:2"
                        },
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "3724:7:2"
                        }
                      ],
                      functionName: {
                        name: "abi_decode_t_string_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "3669:30:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3669:63:2"
                    },
                    variableNames: [
                      {
                        name: "value1",
                        nodeType: "YulIdentifier",
                        src: "3659:6:2"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          name: "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "3181:9:2",
              type: ""
            },
            {
              name: "dataEnd",
              nodeType: "YulTypedName",
              src: "3192:7:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "3204:6:2",
              type: ""
            },
            {
              name: "value1",
              nodeType: "YulTypedName",
              src: "3212:6:2",
              type: ""
            }
          ],
          src: "3116:633:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "3821:196:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "3867:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "3876:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "3879:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "3869:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "3869:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "3869:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "3842:7:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "3851:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "3838:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3838:23:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "3863:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "slt",
                    nodeType: "YulIdentifier",
                    src: "3834:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "3834:32:2"
                },
                nodeType: "YulIf",
                src: "3831:2:2"
              },
              {
                nodeType: "YulBlock",
                src: "3893:117:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "3908:15:2",
                    value: {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "3922:1:2",
                      type: "",
                      value: "0"
                    },
                    variables: [
                      {
                        name: "offset",
                        nodeType: "YulTypedName",
                        src: "3912:6:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "3937:63:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "headStart",
                              nodeType: "YulIdentifier",
                              src: "3972:9:2"
                            },
                            {
                              name: "offset",
                              nodeType: "YulIdentifier",
                              src: "3983:6:2"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "3968:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "3968:22:2"
                        },
                        {
                          name: "dataEnd",
                          nodeType: "YulIdentifier",
                          src: "3992:7:2"
                        }
                      ],
                      functionName: {
                        name: "abi_decode_t_uint256",
                        nodeType: "YulIdentifier",
                        src: "3947:20:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "3947:53:2"
                    },
                    variableNames: [
                      {
                        name: "value0",
                        nodeType: "YulIdentifier",
                        src: "3937:6:2"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          name: "abi_decode_tuple_t_uint256",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "3791:9:2",
              type: ""
            },
            {
              name: "dataEnd",
              nodeType: "YulTypedName",
              src: "3802:7:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "3814:6:2",
              type: ""
            }
          ],
          src: "3755:262:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "4153:126:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "4163:110:2",
                value: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "4261:6:2"
                    },
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "4269:3:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "4177:83:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "4177:96:2"
                },
                variableNames: [
                  {
                    name: "updatedPos",
                    nodeType: "YulIdentifier",
                    src: "4163:10:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encodeUpdatedPos_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "4126:6:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "4134:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "updatedPos",
              nodeType: "YulTypedName",
              src: "4142:10:2",
              type: ""
            }
          ],
          src: "4023:256:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "4407:118:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "4417:102:2",
                value: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "4507:6:2"
                    },
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "4515:3:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "4431:75:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "4431:88:2"
                },
                variableNames: [
                  {
                    name: "updatedPos",
                    nodeType: "YulIdentifier",
                    src: "4417:10:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encodeUpdatedPos_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "4380:6:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "4388:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "updatedPos",
              nodeType: "YulTypedName",
              src: "4396:10:2",
              type: ""
            }
          ],
          src: "4285:240:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "4596:53:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "4613:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "4636:5:2"
                        }
                      ],
                      functionName: {
                        name: "cleanup_t_address",
                        nodeType: "YulIdentifier",
                        src: "4618:17:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "4618:24:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "4606:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "4606:37:2"
                },
                nodeType: "YulExpressionStatement",
                src: "4606:37:2"
              }
            ]
          },
          name: "abi_encode_t_address_to_t_address_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "4584:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "4591:3:2",
              type: ""
            }
          ],
          src: "4531:118:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "4891:937:2",
            statements: [
              {
                nodeType: "YulVariableDeclaration",
                src: "4901:93:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "4988:5:2"
                    }
                  ],
                  functionName: {
                    name: "array_length_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "4915:72:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "4915:79:2"
                },
                variables: [
                  {
                    name: "length",
                    nodeType: "YulTypedName",
                    src: "4905:6:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "5003:118:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "5109:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "5114:6:2"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "5010:98:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "5010:111:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "5003:3:2"
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "5130:20:2",
                value: {
                  name: "pos",
                  nodeType: "YulIdentifier",
                  src: "5147:3:2"
                },
                variables: [
                  {
                    name: "headStart",
                    nodeType: "YulTypedName",
                    src: "5134:9:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "5159:39:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "5175:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "5184:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "5192:4:2",
                          type: "",
                          value: "0x20"
                        }
                      ],
                      functionName: {
                        name: "mul",
                        nodeType: "YulIdentifier",
                        src: "5180:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "5180:17:2"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "5171:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "5171:27:2"
                },
                variables: [
                  {
                    name: "tail",
                    nodeType: "YulTypedName",
                    src: "5163:4:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "5207:96:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "5297:5:2"
                    }
                  ],
                  functionName: {
                    name: "array_dataslot_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "5222:74:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "5222:81:2"
                },
                variables: [
                  {
                    name: "baseRef",
                    nodeType: "YulTypedName",
                    src: "5211:7:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "5312:21:2",
                value: {
                  name: "baseRef",
                  nodeType: "YulIdentifier",
                  src: "5326:7:2"
                },
                variables: [
                  {
                    name: "srcPtr",
                    nodeType: "YulTypedName",
                    src: "5316:6:2",
                    type: ""
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "5402:381:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            name: "pos",
                            nodeType: "YulIdentifier",
                            src: "5423:3:2"
                          },
                          {
                            "arguments": [
                              {
                                name: "tail",
                                nodeType: "YulIdentifier",
                                src: "5432:4:2"
                              },
                              {
                                name: "headStart",
                                nodeType: "YulIdentifier",
                                src: "5438:9:2"
                              }
                            ],
                            functionName: {
                              name: "sub",
                              nodeType: "YulIdentifier",
                              src: "5428:3:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "5428:20:2"
                          }
                        ],
                        functionName: {
                          name: "mstore",
                          nodeType: "YulIdentifier",
                          src: "5416:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "5416:33:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "5416:33:2"
                    },
                    {
                      nodeType: "YulVariableDeclaration",
                      src: "5462:34:2",
                      value: {
                        "arguments": [
                          {
                            name: "srcPtr",
                            nodeType: "YulIdentifier",
                            src: "5489:6:2"
                          }
                        ],
                        functionName: {
                          name: "mload",
                          nodeType: "YulIdentifier",
                          src: "5483:5:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "5483:13:2"
                      },
                      variables: [
                        {
                          name: "elementValue0",
                          nodeType: "YulTypedName",
                          src: "5466:13:2",
                          type: ""
                        }
                      ]
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "5509:122:2",
                      value: {
                        "arguments": [
                          {
                            name: "elementValue0",
                            nodeType: "YulIdentifier",
                            src: "5611:13:2"
                          },
                          {
                            name: "tail",
                            nodeType: "YulIdentifier",
                            src: "5626:4:2"
                          }
                        ],
                        functionName: {
                          name: "abi_encodeUpdatedPos_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr",
                          nodeType: "YulIdentifier",
                          src: "5517:93:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "5517:114:2"
                      },
                      variableNames: [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "5509:4:2"
                        }
                      ]
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "5644:95:2",
                      value: {
                        "arguments": [
                          {
                            name: "srcPtr",
                            nodeType: "YulIdentifier",
                            src: "5732:6:2"
                          }
                        ],
                        functionName: {
                          name: "array_nextElement_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                          nodeType: "YulIdentifier",
                          src: "5654:77:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "5654:85:2"
                      },
                      variableNames: [
                        {
                          name: "srcPtr",
                          nodeType: "YulIdentifier",
                          src: "5644:6:2"
                        }
                      ]
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "5752:21:2",
                      value: {
                        "arguments": [
                          {
                            name: "pos",
                            nodeType: "YulIdentifier",
                            src: "5763:3:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "5768:4:2",
                            type: "",
                            value: "0x20"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "5759:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "5759:14:2"
                      },
                      variableNames: [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "5752:3:2"
                        }
                      ]
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "i",
                      nodeType: "YulIdentifier",
                      src: "5364:1:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "5367:6:2"
                    }
                  ],
                  functionName: {
                    name: "lt",
                    nodeType: "YulIdentifier",
                    src: "5361:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "5361:13:2"
                },
                nodeType: "YulForLoop",
                post: {
                  nodeType: "YulBlock",
                  src: "5375:18:2",
                  statements: [
                    {
                      nodeType: "YulAssignment",
                      src: "5377:14:2",
                      value: {
                        "arguments": [
                          {
                            name: "i",
                            nodeType: "YulIdentifier",
                            src: "5386:1:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "5389:1:2",
                            type: "",
                            value: "1"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "5382:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "5382:9:2"
                      },
                      variableNames: [
                        {
                          name: "i",
                          nodeType: "YulIdentifier",
                          src: "5377:1:2"
                        }
                      ]
                    }
                  ]
                },
                pre: {
                  nodeType: "YulBlock",
                  src: "5346:14:2",
                  statements: [
                    {
                      nodeType: "YulVariableDeclaration",
                      src: "5348:10:2",
                      value: {
                        kind: "number",
                        nodeType: "YulLiteral",
                        src: "5357:1:2",
                        type: "",
                        value: "0"
                      },
                      variables: [
                        {
                          name: "i",
                          nodeType: "YulTypedName",
                          src: "5352:1:2",
                          type: ""
                        }
                      ]
                    }
                  ]
                },
                src: "5342:441:2"
              },
              {
                nodeType: "YulAssignment",
                src: "5792:11:2",
                value: {
                  name: "tail",
                  nodeType: "YulIdentifier",
                  src: "5799:4:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "5792:3:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "5812:10:2",
                value: {
                  name: "pos",
                  nodeType: "YulIdentifier",
                  src: "5819:3:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "5812:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "4870:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "4877:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "4886:3:2",
              type: ""
            }
          ],
          src: "4717:1111:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "6054:913:2",
            statements: [
              {
                nodeType: "YulVariableDeclaration",
                src: "6064:89:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "6147:5:2"
                    }
                  ],
                  functionName: {
                    name: "array_length_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "6078:68:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "6078:75:2"
                },
                variables: [
                  {
                    name: "length",
                    nodeType: "YulTypedName",
                    src: "6068:6:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "6162:114:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "6264:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "6269:6:2"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "6169:94:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "6169:107:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "6162:3:2"
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "6285:20:2",
                value: {
                  name: "pos",
                  nodeType: "YulIdentifier",
                  src: "6302:3:2"
                },
                variables: [
                  {
                    name: "headStart",
                    nodeType: "YulTypedName",
                    src: "6289:9:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "6314:39:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "6330:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "6339:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "6347:4:2",
                          type: "",
                          value: "0x20"
                        }
                      ],
                      functionName: {
                        name: "mul",
                        nodeType: "YulIdentifier",
                        src: "6335:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "6335:17:2"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "6326:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "6326:27:2"
                },
                variables: [
                  {
                    name: "tail",
                    nodeType: "YulTypedName",
                    src: "6318:4:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "6362:92:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "6448:5:2"
                    }
                  ],
                  functionName: {
                    name: "array_dataslot_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "6377:70:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "6377:77:2"
                },
                variables: [
                  {
                    name: "baseRef",
                    nodeType: "YulTypedName",
                    src: "6366:7:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "6463:21:2",
                value: {
                  name: "baseRef",
                  nodeType: "YulIdentifier",
                  src: "6477:7:2"
                },
                variables: [
                  {
                    name: "srcPtr",
                    nodeType: "YulTypedName",
                    src: "6467:6:2",
                    type: ""
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "6553:369:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            name: "pos",
                            nodeType: "YulIdentifier",
                            src: "6574:3:2"
                          },
                          {
                            "arguments": [
                              {
                                name: "tail",
                                nodeType: "YulIdentifier",
                                src: "6583:4:2"
                              },
                              {
                                name: "headStart",
                                nodeType: "YulIdentifier",
                                src: "6589:9:2"
                              }
                            ],
                            functionName: {
                              name: "sub",
                              nodeType: "YulIdentifier",
                              src: "6579:3:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "6579:20:2"
                          }
                        ],
                        functionName: {
                          name: "mstore",
                          nodeType: "YulIdentifier",
                          src: "6567:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "6567:33:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "6567:33:2"
                    },
                    {
                      nodeType: "YulVariableDeclaration",
                      src: "6613:34:2",
                      value: {
                        "arguments": [
                          {
                            name: "srcPtr",
                            nodeType: "YulIdentifier",
                            src: "6640:6:2"
                          }
                        ],
                        functionName: {
                          name: "mload",
                          nodeType: "YulIdentifier",
                          src: "6634:5:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "6634:13:2"
                      },
                      variables: [
                        {
                          name: "elementValue0",
                          nodeType: "YulTypedName",
                          src: "6617:13:2",
                          type: ""
                        }
                      ]
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "6660:114:2",
                      value: {
                        "arguments": [
                          {
                            name: "elementValue0",
                            nodeType: "YulIdentifier",
                            src: "6754:13:2"
                          },
                          {
                            name: "tail",
                            nodeType: "YulIdentifier",
                            src: "6769:4:2"
                          }
                        ],
                        functionName: {
                          name: "abi_encodeUpdatedPos_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr",
                          nodeType: "YulIdentifier",
                          src: "6668:85:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "6668:106:2"
                      },
                      variableNames: [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "6660:4:2"
                        }
                      ]
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "6787:91:2",
                      value: {
                        "arguments": [
                          {
                            name: "srcPtr",
                            nodeType: "YulIdentifier",
                            src: "6871:6:2"
                          }
                        ],
                        functionName: {
                          name: "array_nextElement_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                          nodeType: "YulIdentifier",
                          src: "6797:73:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "6797:81:2"
                      },
                      variableNames: [
                        {
                          name: "srcPtr",
                          nodeType: "YulIdentifier",
                          src: "6787:6:2"
                        }
                      ]
                    },
                    {
                      nodeType: "YulAssignment",
                      src: "6891:21:2",
                      value: {
                        "arguments": [
                          {
                            name: "pos",
                            nodeType: "YulIdentifier",
                            src: "6902:3:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "6907:4:2",
                            type: "",
                            value: "0x20"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "6898:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "6898:14:2"
                      },
                      variableNames: [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "6891:3:2"
                        }
                      ]
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "i",
                      nodeType: "YulIdentifier",
                      src: "6515:1:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "6518:6:2"
                    }
                  ],
                  functionName: {
                    name: "lt",
                    nodeType: "YulIdentifier",
                    src: "6512:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "6512:13:2"
                },
                nodeType: "YulForLoop",
                post: {
                  nodeType: "YulBlock",
                  src: "6526:18:2",
                  statements: [
                    {
                      nodeType: "YulAssignment",
                      src: "6528:14:2",
                      value: {
                        "arguments": [
                          {
                            name: "i",
                            nodeType: "YulIdentifier",
                            src: "6537:1:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "6540:1:2",
                            type: "",
                            value: "1"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "6533:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "6533:9:2"
                      },
                      variableNames: [
                        {
                          name: "i",
                          nodeType: "YulIdentifier",
                          src: "6528:1:2"
                        }
                      ]
                    }
                  ]
                },
                pre: {
                  nodeType: "YulBlock",
                  src: "6497:14:2",
                  statements: [
                    {
                      nodeType: "YulVariableDeclaration",
                      src: "6499:10:2",
                      value: {
                        kind: "number",
                        nodeType: "YulLiteral",
                        src: "6508:1:2",
                        type: "",
                        value: "0"
                      },
                      variables: [
                        {
                          name: "i",
                          nodeType: "YulTypedName",
                          src: "6503:1:2",
                          type: ""
                        }
                      ]
                    }
                  ]
                },
                src: "6493:429:2"
              },
              {
                nodeType: "YulAssignment",
                src: "6931:11:2",
                value: {
                  name: "tail",
                  nodeType: "YulIdentifier",
                  src: "6938:4:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "6931:3:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "6951:10:2",
                value: {
                  name: "pos",
                  nodeType: "YulIdentifier",
                  src: "6958:3:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "6951:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "6033:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "6040:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "6049:3:2",
              type: ""
            }
          ],
          src: "5888:1079:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "7022:50:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7039:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "7059:5:2"
                        }
                      ],
                      functionName: {
                        name: "cleanup_t_bool",
                        nodeType: "YulIdentifier",
                        src: "7044:14:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "7044:21:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "7032:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7032:34:2"
                },
                nodeType: "YulExpressionStatement",
                src: "7032:34:2"
              }
            ]
          },
          name: "abi_encode_t_bool_to_t_bool",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "7010:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "7017:3:2",
              type: ""
            }
          ],
          src: "6973:99:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "7137:50:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7154:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "7174:5:2"
                        }
                      ],
                      functionName: {
                        name: "cleanup_t_bool",
                        nodeType: "YulIdentifier",
                        src: "7159:14:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "7159:21:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "7147:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7147:34:2"
                },
                nodeType: "YulExpressionStatement",
                src: "7147:34:2"
              }
            ]
          },
          name: "abi_encode_t_bool_to_t_bool_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "7125:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "7132:3:2",
              type: ""
            }
          ],
          src: "7078:109:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "7275:262:2",
            statements: [
              {
                nodeType: "YulVariableDeclaration",
                src: "7285:53:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "7332:5:2"
                    }
                  ],
                  functionName: {
                    name: "array_length_t_string_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "7299:32:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7299:39:2"
                },
                variables: [
                  {
                    name: "length",
                    nodeType: "YulTypedName",
                    src: "7289:6:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "7347:68:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7403:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "7408:6:2"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "7354:48:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7354:61:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "7347:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "7450:5:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "7457:4:2",
                          type: "",
                          value: "0x20"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "7446:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "7446:16:2"
                    },
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7464:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "7469:6:2"
                    }
                  ],
                  functionName: {
                    name: "copy_memory_to_memory",
                    nodeType: "YulIdentifier",
                    src: "7424:21:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7424:52:2"
                },
                nodeType: "YulExpressionStatement",
                src: "7424:52:2"
              },
              {
                nodeType: "YulAssignment",
                src: "7485:46:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7496:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "7523:6:2"
                        }
                      ],
                      functionName: {
                        name: "round_up_to_mul_of_32",
                        nodeType: "YulIdentifier",
                        src: "7501:21:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "7501:29:2"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "7492:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7492:39:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "7485:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "7256:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "7263:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "7271:3:2",
              type: ""
            }
          ],
          src: "7193:344:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "7635:272:2",
            statements: [
              {
                nodeType: "YulVariableDeclaration",
                src: "7645:53:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "7692:5:2"
                    }
                  ],
                  functionName: {
                    name: "array_length_t_string_memory_ptr",
                    nodeType: "YulIdentifier",
                    src: "7659:32:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7659:39:2"
                },
                variables: [
                  {
                    name: "length",
                    nodeType: "YulTypedName",
                    src: "7649:6:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "7707:78:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7773:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "7778:6:2"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "7714:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7714:71:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "7707:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "7820:5:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "7827:4:2",
                          type: "",
                          value: "0x20"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "7816:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "7816:16:2"
                    },
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7834:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "7839:6:2"
                    }
                  ],
                  functionName: {
                    name: "copy_memory_to_memory",
                    nodeType: "YulIdentifier",
                    src: "7794:21:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7794:52:2"
                },
                nodeType: "YulExpressionStatement",
                src: "7794:52:2"
              },
              {
                nodeType: "YulAssignment",
                src: "7855:46:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "7866:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "7893:6:2"
                        }
                      ],
                      functionName: {
                        name: "round_up_to_mul_of_32",
                        nodeType: "YulIdentifier",
                        src: "7871:21:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "7871:29:2"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "7862:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "7862:39:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "7855:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "7616:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "7623:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "7631:3:2",
              type: ""
            }
          ],
          src: "7543:364:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "8059:175:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "8069:74:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "8135:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "8140:2:2",
                      type: "",
                      value: "23"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "8076:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8076:67:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "8069:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "8164:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "8169:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "8160:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "8160:11:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "8173:25:2",
                      type: "",
                      value: "You have already voted."
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "8153:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8153:46:2"
                },
                nodeType: "YulExpressionStatement",
                src: "8153:46:2"
              },
              {
                nodeType: "YulAssignment",
                src: "8209:19:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "8220:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "8225:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "8216:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8216:12:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "8209:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "8047:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "8055:3:2",
              type: ""
            }
          ],
          src: "7913:321:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "8386:177:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "8396:74:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "8462:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "8467:2:2",
                      type: "",
                      value: "25"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "8403:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8403:67:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "8396:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "8491:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "8496:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "8487:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "8487:11:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "8500:27:2",
                      type: "",
                      value: "Voter already registered."
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "8480:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8480:48:2"
                },
                nodeType: "YulExpressionStatement",
                src: "8480:48:2"
              },
              {
                nodeType: "YulAssignment",
                src: "8538:19:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "8549:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "8554:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "8545:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8545:12:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "8538:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "8374:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "8382:3:2",
              type: ""
            }
          ],
          src: "8240:323:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "8715:221:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "8725:74:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "8791:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "8796:2:2",
                      type: "",
                      value: "35"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "8732:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8732:67:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "8725:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "8820:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "8825:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "8816:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "8816:11:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "8829:34:2",
                      type: "",
                      value: "Only admin can perform this acti"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "8809:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8809:55:2"
                },
                nodeType: "YulExpressionStatement",
                src: "8809:55:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "8885:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "8890:2:2",
                          type: "",
                          value: "32"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "8881:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "8881:12:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "8895:5:2",
                      type: "",
                      value: "on."
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "8874:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8874:27:2"
                },
                nodeType: "YulExpressionStatement",
                src: "8874:27:2"
              },
              {
                nodeType: "YulAssignment",
                src: "8911:19:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "8922:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "8927:2:2",
                      type: "",
                      value: "64"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "8918:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "8918:12:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "8911:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "8703:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "8711:3:2",
              type: ""
            }
          ],
          src: "8569:367:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "9088:183:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "9098:74:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "9164:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "9169:2:2",
                      type: "",
                      value: "31"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "9105:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9105:67:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "9098:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "9193:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "9198:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "9189:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "9189:11:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "9202:33:2",
                      type: "",
                      value: "You are not registered to vote."
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "9182:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9182:54:2"
                },
                nodeType: "YulExpressionStatement",
                src: "9182:54:2"
              },
              {
                nodeType: "YulAssignment",
                src: "9246:19:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "9257:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "9262:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "9253:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9253:12:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "9246:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "9076:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "9084:3:2",
              type: ""
            }
          ],
          src: "8942:329:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "9423:219:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "9433:74:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "9499:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "9504:2:2",
                      type: "",
                      value: "33"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "9440:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9440:67:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "9433:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "9528:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "9533:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "9524:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "9524:11:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "9537:34:2",
                      type: "",
                      value: "Exceeded maximum number of votes"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "9517:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9517:55:2"
                },
                nodeType: "YulExpressionStatement",
                src: "9517:55:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "9593:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "9598:2:2",
                          type: "",
                          value: "32"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "9589:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "9589:12:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "9603:3:2",
                      type: "",
                      value: "."
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "9582:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9582:25:2"
                },
                nodeType: "YulExpressionStatement",
                src: "9582:25:2"
              },
              {
                nodeType: "YulAssignment",
                src: "9617:19:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "9628:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "9633:2:2",
                      type: "",
                      value: "64"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "9624:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9624:12:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "9617:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "9411:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "9419:3:2",
              type: ""
            }
          ],
          src: "9277:365:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "9794:173:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "9804:74:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "9870:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "9875:2:2",
                      type: "",
                      value: "21"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "9811:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9811:67:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "9804:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "9899:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "9904:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "9895:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "9895:11:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "9908:23:2",
                      type: "",
                      value: "Voter not registered."
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "9888:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9888:44:2"
                },
                nodeType: "YulExpressionStatement",
                src: "9888:44:2"
              },
              {
                nodeType: "YulAssignment",
                src: "9942:19:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "9953:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "9958:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "9949:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "9949:12:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "9942:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "9782:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "9790:3:2",
              type: ""
            }
          ],
          src: "9648:319:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "10119:173:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "10129:74:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "10195:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "10200:2:2",
                      type: "",
                      value: "21"
                    }
                  ],
                  functionName: {
                    name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "10136:58:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "10136:67:2"
                },
                variableNames: [
                  {
                    name: "pos",
                    nodeType: "YulIdentifier",
                    src: "10129:3:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "pos",
                          nodeType: "YulIdentifier",
                          src: "10224:3:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "10229:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "10220:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "10220:11:2"
                    },
                    {
                      kind: "string",
                      nodeType: "YulLiteral",
                      src: "10233:23:2",
                      type: "",
                      value: "Invalid candidate ID."
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "10213:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "10213:44:2"
                },
                nodeType: "YulExpressionStatement",
                src: "10213:44:2"
              },
              {
                nodeType: "YulAssignment",
                src: "10267:19:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "10278:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "10283:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "10274:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "10274:12:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "10267:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4_to_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "10107:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "10115:3:2",
              type: ""
            }
          ],
          src: "9973:319:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "10470:905:2",
            statements: [
              {
                nodeType: "YulVariableDeclaration",
                src: "10480:26:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "10496:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "10501:4:2",
                      type: "",
                      value: "0x80"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "10492:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "10492:14:2"
                },
                variables: [
                  {
                    name: "tail",
                    nodeType: "YulTypedName",
                    src: "10484:4:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "10516:162:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "10549:43:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "10579:5:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "10586:4:2",
                              type: "",
                              value: "0x00"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "10575:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "10575:16:2"
                        }
                      ],
                      functionName: {
                        name: "mload",
                        nodeType: "YulIdentifier",
                        src: "10569:5:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "10569:23:2"
                    },
                    variables: [
                      {
                        name: "memberValue0",
                        nodeType: "YulTypedName",
                        src: "10553:12:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    expression: {
                      "arguments": [
                        {
                          name: "memberValue0",
                          nodeType: "YulIdentifier",
                          src: "10639:12:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "10657:3:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "10662:4:2",
                              type: "",
                              value: "0x00"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "10653:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "10653:14:2"
                        }
                      ],
                      functionName: {
                        name: "abi_encode_t_uint256_to_t_uint256",
                        nodeType: "YulIdentifier",
                        src: "10605:33:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "10605:63:2"
                    },
                    nodeType: "YulExpressionStatement",
                    src: "10605:63:2"
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "10688:235:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "10723:43:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "10753:5:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "10760:4:2",
                              type: "",
                              value: "0x20"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "10749:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "10749:16:2"
                        }
                      ],
                      functionName: {
                        name: "mload",
                        nodeType: "YulIdentifier",
                        src: "10743:5:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "10743:23:2"
                    },
                    variables: [
                      {
                        name: "memberValue0",
                        nodeType: "YulTypedName",
                        src: "10727:12:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    expression: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "10791:3:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "10796:4:2",
                              type: "",
                              value: "0x20"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "10787:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "10787:14:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "tail",
                              nodeType: "YulIdentifier",
                              src: "10807:4:2"
                            },
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "10813:3:2"
                            }
                          ],
                          functionName: {
                            name: "sub",
                            nodeType: "YulIdentifier",
                            src: "10803:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "10803:14:2"
                        }
                      ],
                      functionName: {
                        name: "mstore",
                        nodeType: "YulIdentifier",
                        src: "10780:6:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "10780:38:2"
                    },
                    nodeType: "YulExpressionStatement",
                    src: "10780:38:2"
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "10831:81:2",
                    value: {
                      "arguments": [
                        {
                          name: "memberValue0",
                          nodeType: "YulIdentifier",
                          src: "10893:12:2"
                        },
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "10907:4:2"
                        }
                      ],
                      functionName: {
                        name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "10839:53:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "10839:73:2"
                    },
                    variableNames: [
                      {
                        name: "tail",
                        nodeType: "YulIdentifier",
                        src: "10831:4:2"
                      }
                    ]
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "10933:236:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "10969:43:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "10999:5:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11006:4:2",
                              type: "",
                              value: "0x40"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "10995:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "10995:16:2"
                        }
                      ],
                      functionName: {
                        name: "mload",
                        nodeType: "YulIdentifier",
                        src: "10989:5:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "10989:23:2"
                    },
                    variables: [
                      {
                        name: "memberValue0",
                        nodeType: "YulTypedName",
                        src: "10973:12:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    expression: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "11037:3:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11042:4:2",
                              type: "",
                              value: "0x40"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "11033:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11033:14:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "tail",
                              nodeType: "YulIdentifier",
                              src: "11053:4:2"
                            },
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "11059:3:2"
                            }
                          ],
                          functionName: {
                            name: "sub",
                            nodeType: "YulIdentifier",
                            src: "11049:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11049:14:2"
                        }
                      ],
                      functionName: {
                        name: "mstore",
                        nodeType: "YulIdentifier",
                        src: "11026:6:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11026:38:2"
                    },
                    nodeType: "YulExpressionStatement",
                    src: "11026:38:2"
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "11077:81:2",
                    value: {
                      "arguments": [
                        {
                          name: "memberValue0",
                          nodeType: "YulIdentifier",
                          src: "11139:12:2"
                        },
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "11153:4:2"
                        }
                      ],
                      functionName: {
                        name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "11085:53:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11085:73:2"
                    },
                    variableNames: [
                      {
                        name: "tail",
                        nodeType: "YulIdentifier",
                        src: "11077:4:2"
                      }
                    ]
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "11179:169:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "11219:43:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "11249:5:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11256:4:2",
                              type: "",
                              value: "0x60"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "11245:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11245:16:2"
                        }
                      ],
                      functionName: {
                        name: "mload",
                        nodeType: "YulIdentifier",
                        src: "11239:5:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11239:23:2"
                    },
                    variables: [
                      {
                        name: "memberValue0",
                        nodeType: "YulTypedName",
                        src: "11223:12:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    expression: {
                      "arguments": [
                        {
                          name: "memberValue0",
                          nodeType: "YulIdentifier",
                          src: "11309:12:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "11327:3:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11332:4:2",
                              type: "",
                              value: "0x60"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "11323:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11323:14:2"
                        }
                      ],
                      functionName: {
                        name: "abi_encode_t_uint256_to_t_uint256",
                        nodeType: "YulIdentifier",
                        src: "11275:33:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11275:63:2"
                    },
                    nodeType: "YulExpressionStatement",
                    src: "11275:63:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "11358:11:2",
                value: {
                  name: "tail",
                  nodeType: "YulIdentifier",
                  src: "11365:4:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "11358:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "10449:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "10456:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "10465:3:2",
              type: ""
            }
          ],
          src: "10356:1019:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "11537:660:2",
            statements: [
              {
                nodeType: "YulVariableDeclaration",
                src: "11547:26:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "11563:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "11568:4:2",
                      type: "",
                      value: "0x60"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "11559:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "11559:14:2"
                },
                variables: [
                  {
                    name: "tail",
                    nodeType: "YulTypedName",
                    src: "11551:4:2",
                    type: ""
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "11583:239:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "11622:43:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "11652:5:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11659:4:2",
                              type: "",
                              value: "0x00"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "11648:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11648:16:2"
                        }
                      ],
                      functionName: {
                        name: "mload",
                        nodeType: "YulIdentifier",
                        src: "11642:5:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11642:23:2"
                    },
                    variables: [
                      {
                        name: "memberValue0",
                        nodeType: "YulTypedName",
                        src: "11626:12:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    expression: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "11690:3:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11695:4:2",
                              type: "",
                              value: "0x00"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "11686:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11686:14:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "tail",
                              nodeType: "YulIdentifier",
                              src: "11706:4:2"
                            },
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "11712:3:2"
                            }
                          ],
                          functionName: {
                            name: "sub",
                            nodeType: "YulIdentifier",
                            src: "11702:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11702:14:2"
                        }
                      ],
                      functionName: {
                        name: "mstore",
                        nodeType: "YulIdentifier",
                        src: "11679:6:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11679:38:2"
                    },
                    nodeType: "YulExpressionStatement",
                    src: "11679:38:2"
                  },
                  {
                    nodeType: "YulAssignment",
                    src: "11730:81:2",
                    value: {
                      "arguments": [
                        {
                          name: "memberValue0",
                          nodeType: "YulIdentifier",
                          src: "11792:12:2"
                        },
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "11806:4:2"
                        }
                      ],
                      functionName: {
                        name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr",
                        nodeType: "YulIdentifier",
                        src: "11738:53:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11738:73:2"
                    },
                    variableNames: [
                      {
                        name: "tail",
                        nodeType: "YulIdentifier",
                        src: "11730:4:2"
                      }
                    ]
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "11832:166:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "11875:43:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "11905:5:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11912:4:2",
                              type: "",
                              value: "0x20"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "11901:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11901:16:2"
                        }
                      ],
                      functionName: {
                        name: "mload",
                        nodeType: "YulIdentifier",
                        src: "11895:5:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11895:23:2"
                    },
                    variables: [
                      {
                        name: "memberValue0",
                        nodeType: "YulTypedName",
                        src: "11879:12:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    expression: {
                      "arguments": [
                        {
                          name: "memberValue0",
                          nodeType: "YulIdentifier",
                          src: "11959:12:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "11977:3:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "11982:4:2",
                              type: "",
                              value: "0x20"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "11973:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "11973:14:2"
                        }
                      ],
                      functionName: {
                        name: "abi_encode_t_bool_to_t_bool",
                        nodeType: "YulIdentifier",
                        src: "11931:27:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "11931:57:2"
                    },
                    nodeType: "YulExpressionStatement",
                    src: "11931:57:2"
                  }
                ]
              },
              {
                nodeType: "YulBlock",
                src: "12008:162:2",
                statements: [
                  {
                    nodeType: "YulVariableDeclaration",
                    src: "12047:43:2",
                    value: {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "12077:5:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "12084:4:2",
                              type: "",
                              value: "0x40"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "12073:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "12073:16:2"
                        }
                      ],
                      functionName: {
                        name: "mload",
                        nodeType: "YulIdentifier",
                        src: "12067:5:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "12067:23:2"
                    },
                    variables: [
                      {
                        name: "memberValue0",
                        nodeType: "YulTypedName",
                        src: "12051:12:2",
                        type: ""
                      }
                    ]
                  },
                  {
                    expression: {
                      "arguments": [
                        {
                          name: "memberValue0",
                          nodeType: "YulIdentifier",
                          src: "12131:12:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "pos",
                              nodeType: "YulIdentifier",
                              src: "12149:3:2"
                            },
                            {
                              kind: "number",
                              nodeType: "YulLiteral",
                              src: "12154:4:2",
                              type: "",
                              value: "0x40"
                            }
                          ],
                          functionName: {
                            name: "add",
                            nodeType: "YulIdentifier",
                            src: "12145:3:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "12145:14:2"
                        }
                      ],
                      functionName: {
                        name: "abi_encode_t_bool_to_t_bool",
                        nodeType: "YulIdentifier",
                        src: "12103:27:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "12103:57:2"
                    },
                    nodeType: "YulExpressionStatement",
                    src: "12103:57:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "12180:11:2",
                value: {
                  name: "tail",
                  nodeType: "YulIdentifier",
                  src: "12187:4:2"
                },
                variableNames: [
                  {
                    name: "end",
                    nodeType: "YulIdentifier",
                    src: "12180:3:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "11516:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "11523:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "end",
              nodeType: "YulTypedName",
              src: "11532:3:2",
              type: ""
            }
          ],
          src: "11431:766:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "12258:53:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "12275:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "12298:5:2"
                        }
                      ],
                      functionName: {
                        name: "cleanup_t_uint256",
                        nodeType: "YulIdentifier",
                        src: "12280:17:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "12280:24:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "12268:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "12268:37:2"
                },
                nodeType: "YulExpressionStatement",
                src: "12268:37:2"
              }
            ]
          },
          name: "abi_encode_t_uint256_to_t_uint256",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "12246:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "12253:3:2",
              type: ""
            }
          ],
          src: "12203:108:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "12382:53:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "12399:3:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "12422:5:2"
                        }
                      ],
                      functionName: {
                        name: "cleanup_t_uint256",
                        nodeType: "YulIdentifier",
                        src: "12404:17:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "12404:24:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "12392:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "12392:37:2"
                },
                nodeType: "YulExpressionStatement",
                src: "12392:37:2"
              }
            ]
          },
          name: "abi_encode_t_uint256_to_t_uint256_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "12370:5:2",
              type: ""
            },
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "12377:3:2",
              type: ""
            }
          ],
          src: "12317:118:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "12539:124:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "12549:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "12561:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "12572:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "12557:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "12557:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "12549:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "12629:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "12642:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "12653:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "12638:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "12638:17:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_address_to_t_address_fromStack",
                    nodeType: "YulIdentifier",
                    src: "12585:43:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "12585:71:2"
                },
                nodeType: "YulExpressionStatement",
                src: "12585:71:2"
              }
            ]
          },
          name: "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "12511:9:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "12523:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "12534:4:2",
              type: ""
            }
          ],
          src: "12441:222:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "12867:275:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "12877:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "12889:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "12900:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "12885:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "12885:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "12877:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "12924:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "12935:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "12920:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "12920:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "12943:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "12949:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "12939:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "12939:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "12913:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "12913:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "12913:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "12969:166:2",
                value: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "13121:6:2"
                    },
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "13130:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "12977:143:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "12977:158:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "12969:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "12839:9:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "12851:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "12862:4:2",
              type: ""
            }
          ],
          src: "12669:473:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "13338:267:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "13348:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "13360:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "13371:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "13356:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "13356:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "13348:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "13395:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "13406:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "13391:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "13391:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "13414:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "13420:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "13410:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "13410:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "13384:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "13384:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "13384:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "13440:158:2",
                value: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "13584:6:2"
                    },
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "13593:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "13448:135:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "13448:150:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "13440:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "13310:9:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "13322:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "13333:4:2",
              type: ""
            }
          ],
          src: "13148:457:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "13703:118:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "13713:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "13725:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "13736:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "13721:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "13721:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "13713:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "13787:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "13800:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "13811:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "13796:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "13796:17:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_bool_to_t_bool_fromStack",
                    nodeType: "YulIdentifier",
                    src: "13749:37:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "13749:65:2"
                },
                nodeType: "YulExpressionStatement",
                src: "13749:65:2"
              }
            ]
          },
          name: "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "13675:9:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "13687:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "13698:4:2",
              type: ""
            }
          ],
          src: "13611:210:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "13989:347:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "13999:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "14011:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "14022:2:2",
                      type: "",
                      value: "96"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "14007:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14007:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "13999:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "14046:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "14057:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "14042:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "14042:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "14065:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "14071:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "14061:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "14061:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "14035:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14035:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "14035:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "14091:86:2",
                value: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "14163:6:2"
                    },
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "14172:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "14099:63:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14099:78:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "14091:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value1",
                      nodeType: "YulIdentifier",
                      src: "14225:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "14238:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "14249:2:2",
                          type: "",
                          value: "32"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "14234:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "14234:18:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_bool_to_t_bool_fromStack",
                    nodeType: "YulIdentifier",
                    src: "14187:37:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14187:66:2"
                },
                nodeType: "YulExpressionStatement",
                src: "14187:66:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value2",
                      nodeType: "YulIdentifier",
                      src: "14301:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "14314:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "14325:2:2",
                          type: "",
                          value: "64"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "14310:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "14310:18:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_bool_to_t_bool_fromStack",
                    nodeType: "YulIdentifier",
                    src: "14263:37:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14263:66:2"
                },
                nodeType: "YulExpressionStatement",
                src: "14263:66:2"
              }
            ]
          },
          name: "abi_encode_tuple_t_string_memory_ptr_t_bool_t_bool__to_t_string_memory_ptr_t_bool_t_bool__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "13945:9:2",
              type: ""
            },
            {
              name: "value2",
              nodeType: "YulTypedName",
              src: "13957:6:2",
              type: ""
            },
            {
              name: "value1",
              nodeType: "YulTypedName",
              src: "13965:6:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "13973:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "13984:4:2",
              type: ""
            }
          ],
          src: "13827:509:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "14513:248:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "14523:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "14535:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "14546:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "14531:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14531:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "14523:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "14570:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "14581:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "14566:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "14566:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "14589:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "14595:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "14585:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "14585:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "14559:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14559:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "14559:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "14615:139:2",
                value: {
                  "arguments": [
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "14749:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "14623:124:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14623:131:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "14615:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863__to_t_string_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "14493:9:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "14508:4:2",
              type: ""
            }
          ],
          src: "14342:419:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "14938:248:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "14948:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "14960:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "14971:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "14956:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14956:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "14948:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "14995:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "15006:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "14991:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "14991:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "15014:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "15020:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "15010:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "15010:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "14984:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "14984:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "14984:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "15040:139:2",
                value: {
                  "arguments": [
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "15174:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "15048:124:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "15048:131:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "15040:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c__to_t_string_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "14918:9:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "14933:4:2",
              type: ""
            }
          ],
          src: "14767:419:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "15363:248:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "15373:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "15385:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "15396:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "15381:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "15381:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "15373:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "15420:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "15431:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "15416:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "15416:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "15439:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "15445:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "15435:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "15435:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "15409:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "15409:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "15409:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "15465:139:2",
                value: {
                  "arguments": [
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "15599:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "15473:124:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "15473:131:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "15465:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991__to_t_string_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "15343:9:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "15358:4:2",
              type: ""
            }
          ],
          src: "15192:419:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "15788:248:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "15798:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "15810:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "15821:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "15806:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "15806:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "15798:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "15845:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "15856:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "15841:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "15841:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "15864:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "15870:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "15860:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "15860:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "15834:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "15834:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "15834:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "15890:139:2",
                value: {
                  "arguments": [
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "16024:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "15898:124:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "15898:131:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "15890:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473__to_t_string_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "15768:9:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "15783:4:2",
              type: ""
            }
          ],
          src: "15617:419:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "16213:248:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "16223:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "16235:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "16246:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "16231:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "16231:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "16223:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "16270:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "16281:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "16266:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "16266:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "16289:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "16295:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "16285:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "16285:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "16259:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "16259:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "16259:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "16315:139:2",
                value: {
                  "arguments": [
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "16449:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "16323:124:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "16323:131:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "16315:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491__to_t_string_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "16193:9:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "16208:4:2",
              type: ""
            }
          ],
          src: "16042:419:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "16638:248:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "16648:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "16660:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "16671:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "16656:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "16656:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "16648:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "16695:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "16706:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "16691:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "16691:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "16714:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "16720:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "16710:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "16710:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "16684:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "16684:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "16684:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "16740:139:2",
                value: {
                  "arguments": [
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "16874:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "16748:124:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "16748:131:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "16740:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346__to_t_string_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "16618:9:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "16633:4:2",
              type: ""
            }
          ],
          src: "16467:419:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "17063:248:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "17073:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "17085:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "17096:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "17081:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17081:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "17073:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "17120:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "17131:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "17116:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "17116:17:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "17139:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "17145:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "17135:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "17135:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "17109:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17109:47:2"
                },
                nodeType: "YulExpressionStatement",
                src: "17109:47:2"
              },
              {
                nodeType: "YulAssignment",
                src: "17165:139:2",
                value: {
                  "arguments": [
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "17299:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "17173:124:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17173:131:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "17165:4:2"
                  }
                ]
              }
            ]
          },
          name: "abi_encode_tuple_t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4__to_t_string_memory_ptr__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "17043:9:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "17058:4:2",
              type: ""
            }
          ],
          src: "16892:419:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "17415:124:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "17425:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "17437:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "17448:2:2",
                      type: "",
                      value: "32"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "17433:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17433:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "17425:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "17505:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "17518:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "17529:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "17514:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "17514:17:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_uint256_to_t_uint256_fromStack",
                    nodeType: "YulIdentifier",
                    src: "17461:43:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17461:71:2"
                },
                nodeType: "YulExpressionStatement",
                src: "17461:71:2"
              }
            ]
          },
          name: "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "17387:9:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "17399:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "17410:4:2",
              type: ""
            }
          ],
          src: "17317:222:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "17767:513:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "17777:27:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "17789:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "17800:3:2",
                      type: "",
                      value: "128"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "17785:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17785:19:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "17777:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "17858:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "17871:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "17882:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "17867:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "17867:17:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_uint256_to_t_uint256_fromStack",
                    nodeType: "YulIdentifier",
                    src: "17814:43:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17814:71:2"
                },
                nodeType: "YulExpressionStatement",
                src: "17814:71:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "17906:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "17917:2:2",
                          type: "",
                          value: "32"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "17902:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "17902:18:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "17926:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "17932:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "17922:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "17922:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "17895:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17895:48:2"
                },
                nodeType: "YulExpressionStatement",
                src: "17895:48:2"
              },
              {
                nodeType: "YulAssignment",
                src: "17952:86:2",
                value: {
                  "arguments": [
                    {
                      name: "value1",
                      nodeType: "YulIdentifier",
                      src: "18024:6:2"
                    },
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "18033:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "17960:63:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "17960:78:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "17952:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "18059:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "18070:2:2",
                          type: "",
                          value: "64"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "18055:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18055:18:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "18079:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "18085:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "18075:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18075:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "18048:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18048:48:2"
                },
                nodeType: "YulExpressionStatement",
                src: "18048:48:2"
              },
              {
                nodeType: "YulAssignment",
                src: "18105:86:2",
                value: {
                  "arguments": [
                    {
                      name: "value2",
                      nodeType: "YulIdentifier",
                      src: "18177:6:2"
                    },
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "18186:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "18113:63:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18113:78:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "18105:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value3",
                      nodeType: "YulIdentifier",
                      src: "18245:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "18258:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "18269:2:2",
                          type: "",
                          value: "96"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "18254:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18254:18:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_uint256_to_t_uint256_fromStack",
                    nodeType: "YulIdentifier",
                    src: "18201:43:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18201:72:2"
                },
                nodeType: "YulExpressionStatement",
                src: "18201:72:2"
              }
            ]
          },
          name: "abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "17715:9:2",
              type: ""
            },
            {
              name: "value3",
              nodeType: "YulTypedName",
              src: "17727:6:2",
              type: ""
            },
            {
              name: "value2",
              nodeType: "YulTypedName",
              src: "17735:6:2",
              type: ""
            },
            {
              name: "value1",
              nodeType: "YulTypedName",
              src: "17743:6:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "17751:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "17762:4:2",
              type: ""
            }
          ],
          src: "17545:735:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "18460:359:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "18470:26:2",
                value: {
                  "arguments": [
                    {
                      name: "headStart",
                      nodeType: "YulIdentifier",
                      src: "18482:9:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "18493:2:2",
                      type: "",
                      value: "96"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "18478:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18478:18:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "18470:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value0",
                      nodeType: "YulIdentifier",
                      src: "18550:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "18563:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "18574:1:2",
                          type: "",
                          value: "0"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "18559:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18559:17:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_uint256_to_t_uint256_fromStack",
                    nodeType: "YulIdentifier",
                    src: "18506:43:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18506:71:2"
                },
                nodeType: "YulExpressionStatement",
                src: "18506:71:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "18598:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "18609:2:2",
                          type: "",
                          value: "32"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "18594:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18594:18:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "tail",
                          nodeType: "YulIdentifier",
                          src: "18618:4:2"
                        },
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "18624:9:2"
                        }
                      ],
                      functionName: {
                        name: "sub",
                        nodeType: "YulIdentifier",
                        src: "18614:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18614:20:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "18587:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18587:48:2"
                },
                nodeType: "YulExpressionStatement",
                src: "18587:48:2"
              },
              {
                nodeType: "YulAssignment",
                src: "18644:86:2",
                value: {
                  "arguments": [
                    {
                      name: "value1",
                      nodeType: "YulIdentifier",
                      src: "18716:6:2"
                    },
                    {
                      name: "tail",
                      nodeType: "YulIdentifier",
                      src: "18725:4:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    nodeType: "YulIdentifier",
                    src: "18652:63:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18652:78:2"
                },
                variableNames: [
                  {
                    name: "tail",
                    nodeType: "YulIdentifier",
                    src: "18644:4:2"
                  }
                ]
              },
              {
                expression: {
                  "arguments": [
                    {
                      name: "value2",
                      nodeType: "YulIdentifier",
                      src: "18784:6:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "headStart",
                          nodeType: "YulIdentifier",
                          src: "18797:9:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "18808:2:2",
                          type: "",
                          value: "64"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "18793:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18793:18:2"
                    }
                  ],
                  functionName: {
                    name: "abi_encode_t_uint256_to_t_uint256_fromStack",
                    nodeType: "YulIdentifier",
                    src: "18740:43:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18740:72:2"
                },
                nodeType: "YulExpressionStatement",
                src: "18740:72:2"
              }
            ]
          },
          name: "abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "headStart",
              nodeType: "YulTypedName",
              src: "18416:9:2",
              type: ""
            },
            {
              name: "value2",
              nodeType: "YulTypedName",
              src: "18428:6:2",
              type: ""
            },
            {
              name: "value1",
              nodeType: "YulTypedName",
              src: "18436:6:2",
              type: ""
            },
            {
              name: "value0",
              nodeType: "YulTypedName",
              src: "18444:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "tail",
              nodeType: "YulTypedName",
              src: "18455:4:2",
              type: ""
            }
          ],
          src: "18286:533:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "18865:243:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "18875:19:2",
                value: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "18891:2:2",
                      type: "",
                      value: "64"
                    }
                  ],
                  functionName: {
                    name: "mload",
                    nodeType: "YulIdentifier",
                    src: "18885:5:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18885:9:2"
                },
                variableNames: [
                  {
                    name: "memPtr",
                    nodeType: "YulIdentifier",
                    src: "18875:6:2"
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "18903:35:2",
                value: {
                  "arguments": [
                    {
                      name: "memPtr",
                      nodeType: "YulIdentifier",
                      src: "18925:6:2"
                    },
                    {
                      name: "size",
                      nodeType: "YulIdentifier",
                      src: "18933:4:2"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "18921:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18921:17:2"
                },
                variables: [
                  {
                    name: "newFreePtr",
                    nodeType: "YulTypedName",
                    src: "18907:10:2",
                    type: ""
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "19049:22:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [],
                        functionName: {
                          name: "panic_error_0x41",
                          nodeType: "YulIdentifier",
                          src: "19051:16:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "19051:18:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "19051:18:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "newFreePtr",
                          nodeType: "YulIdentifier",
                          src: "18992:10:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "19004:18:2",
                          type: "",
                          value: "0xffffffffffffffff"
                        }
                      ],
                      functionName: {
                        name: "gt",
                        nodeType: "YulIdentifier",
                        src: "18989:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "18989:34:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "newFreePtr",
                          nodeType: "YulIdentifier",
                          src: "19028:10:2"
                        },
                        {
                          name: "memPtr",
                          nodeType: "YulIdentifier",
                          src: "19040:6:2"
                        }
                      ],
                      functionName: {
                        name: "lt",
                        nodeType: "YulIdentifier",
                        src: "19025:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "19025:22:2"
                    }
                  ],
                  functionName: {
                    name: "or",
                    nodeType: "YulIdentifier",
                    src: "18986:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "18986:62:2"
                },
                nodeType: "YulIf",
                src: "18983:2:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "19087:2:2",
                      type: "",
                      value: "64"
                    },
                    {
                      name: "newFreePtr",
                      nodeType: "YulIdentifier",
                      src: "19091:10:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "19080:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19080:22:2"
                },
                nodeType: "YulExpressionStatement",
                src: "19080:22:2"
              }
            ]
          },
          name: "allocateMemory",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "size",
              nodeType: "YulTypedName",
              src: "18849:4:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "memPtr",
              nodeType: "YulTypedName",
              src: "18858:6:2",
              type: ""
            }
          ],
          src: "18825:283:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "19196:229:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "19301:22:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [],
                        functionName: {
                          name: "panic_error_0x41",
                          nodeType: "YulIdentifier",
                          src: "19303:16:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "19303:18:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "19303:18:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "19273:6:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "19281:18:2",
                      type: "",
                      value: "0xffffffffffffffff"
                    }
                  ],
                  functionName: {
                    name: "gt",
                    nodeType: "YulIdentifier",
                    src: "19270:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19270:30:2"
                },
                nodeType: "YulIf",
                src: "19267:2:2"
              },
              {
                nodeType: "YulAssignment",
                src: "19333:25:2",
                value: {
                  "arguments": [
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "19345:6:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "19353:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "mul",
                    nodeType: "YulIdentifier",
                    src: "19341:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19341:17:2"
                },
                variableNames: [
                  {
                    name: "size",
                    nodeType: "YulIdentifier",
                    src: "19333:4:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "19395:23:2",
                value: {
                  "arguments": [
                    {
                      name: "size",
                      nodeType: "YulIdentifier",
                      src: "19407:4:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "19413:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "19403:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19403:15:2"
                },
                variableNames: [
                  {
                    name: "size",
                    nodeType: "YulIdentifier",
                    src: "19395:4:2"
                  }
                ]
              }
            ]
          },
          name: "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "19180:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "size",
              nodeType: "YulTypedName",
              src: "19191:4:2",
              type: ""
            }
          ],
          src: "19114:311:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "19498:265:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "19603:22:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [],
                        functionName: {
                          name: "panic_error_0x41",
                          nodeType: "YulIdentifier",
                          src: "19605:16:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "19605:18:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "19605:18:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "19575:6:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "19583:18:2",
                      type: "",
                      value: "0xffffffffffffffff"
                    }
                  ],
                  functionName: {
                    name: "gt",
                    nodeType: "YulIdentifier",
                    src: "19572:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19572:30:2"
                },
                nodeType: "YulIf",
                src: "19569:2:2"
              },
              {
                nodeType: "YulAssignment",
                src: "19655:41:2",
                value: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "19671:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "19679:4:2",
                          type: "",
                          value: "0x1f"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "19667:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "19667:17:2"
                    },
                    {
                      "arguments": [
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "19690:4:2",
                          type: "",
                          value: "0x1f"
                        }
                      ],
                      functionName: {
                        name: "not",
                        nodeType: "YulIdentifier",
                        src: "19686:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "19686:9:2"
                    }
                  ],
                  functionName: {
                    name: "and",
                    nodeType: "YulIdentifier",
                    src: "19663:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19663:33:2"
                },
                variableNames: [
                  {
                    name: "size",
                    nodeType: "YulIdentifier",
                    src: "19655:4:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "19733:23:2",
                value: {
                  "arguments": [
                    {
                      name: "size",
                      nodeType: "YulIdentifier",
                      src: "19745:4:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "19751:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "19741:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19741:15:2"
                },
                variableNames: [
                  {
                    name: "size",
                    nodeType: "YulIdentifier",
                    src: "19733:4:2"
                  }
                ]
              }
            ]
          },
          name: "array_allocation_size_t_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "19482:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "size",
              nodeType: "YulTypedName",
              src: "19493:4:2",
              type: ""
            }
          ],
          src: "19431:332:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "19866:60:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "19876:11:2",
                value: {
                  name: "ptr",
                  nodeType: "YulIdentifier",
                  src: "19884:3:2"
                },
                variableNames: [
                  {
                    name: "data",
                    nodeType: "YulIdentifier",
                    src: "19876:4:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "19897:22:2",
                value: {
                  "arguments": [
                    {
                      name: "ptr",
                      nodeType: "YulIdentifier",
                      src: "19909:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "19914:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "19905:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "19905:14:2"
                },
                variableNames: [
                  {
                    name: "data",
                    nodeType: "YulIdentifier",
                    src: "19897:4:2"
                  }
                ]
              }
            ]
          },
          name: "array_dataslot_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "ptr",
              nodeType: "YulTypedName",
              src: "19853:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "data",
              nodeType: "YulTypedName",
              src: "19861:4:2",
              type: ""
            }
          ],
          src: "19769:157:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "20025:60:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "20035:11:2",
                value: {
                  name: "ptr",
                  nodeType: "YulIdentifier",
                  src: "20043:3:2"
                },
                variableNames: [
                  {
                    name: "data",
                    nodeType: "YulIdentifier",
                    src: "20035:4:2"
                  }
                ]
              },
              {
                nodeType: "YulAssignment",
                src: "20056:22:2",
                value: {
                  "arguments": [
                    {
                      name: "ptr",
                      nodeType: "YulIdentifier",
                      src: "20068:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "20073:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "20064:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20064:14:2"
                },
                variableNames: [
                  {
                    name: "data",
                    nodeType: "YulIdentifier",
                    src: "20056:4:2"
                  }
                ]
              }
            ]
          },
          name: "array_dataslot_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "ptr",
              nodeType: "YulTypedName",
              src: "20012:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "data",
              nodeType: "YulTypedName",
              src: "20020:4:2",
              type: ""
            }
          ],
          src: "19932:153:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "20190:40:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "20201:22:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "20217:5:2"
                    }
                  ],
                  functionName: {
                    name: "mload",
                    nodeType: "YulIdentifier",
                    src: "20211:5:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20211:12:2"
                },
                variableNames: [
                  {
                    name: "length",
                    nodeType: "YulIdentifier",
                    src: "20201:6:2"
                  }
                ]
              }
            ]
          },
          name: "array_length_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "20173:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "20183:6:2",
              type: ""
            }
          ],
          src: "20091:139:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "20331:40:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "20342:22:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "20358:5:2"
                    }
                  ],
                  functionName: {
                    name: "mload",
                    nodeType: "YulIdentifier",
                    src: "20352:5:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20352:12:2"
                },
                variableNames: [
                  {
                    name: "length",
                    nodeType: "YulIdentifier",
                    src: "20342:6:2"
                  }
                ]
              }
            ]
          },
          name: "array_length_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "20314:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "20324:6:2",
              type: ""
            }
          ],
          src: "20236:135:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "20436:40:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "20447:22:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "20463:5:2"
                    }
                  ],
                  functionName: {
                    name: "mload",
                    nodeType: "YulIdentifier",
                    src: "20457:5:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20457:12:2"
                },
                variableNames: [
                  {
                    name: "length",
                    nodeType: "YulIdentifier",
                    src: "20447:6:2"
                  }
                ]
              }
            ]
          },
          name: "array_length_t_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "20419:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "20429:6:2",
              type: ""
            }
          ],
          src: "20377:99:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "20582:38:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "20592:22:2",
                value: {
                  "arguments": [
                    {
                      name: "ptr",
                      nodeType: "YulIdentifier",
                      src: "20604:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "20609:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "20600:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20600:14:2"
                },
                variableNames: [
                  {
                    name: "next",
                    nodeType: "YulIdentifier",
                    src: "20592:4:2"
                  }
                ]
              }
            ]
          },
          name: "array_nextElement_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "ptr",
              nodeType: "YulTypedName",
              src: "20569:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "next",
              nodeType: "YulTypedName",
              src: "20577:4:2",
              type: ""
            }
          ],
          src: "20482:138:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "20722:38:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "20732:22:2",
                value: {
                  "arguments": [
                    {
                      name: "ptr",
                      nodeType: "YulIdentifier",
                      src: "20744:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "20749:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "20740:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20740:14:2"
                },
                variableNames: [
                  {
                    name: "next",
                    nodeType: "YulIdentifier",
                    src: "20732:4:2"
                  }
                ]
              }
            ]
          },
          name: "array_nextElement_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "ptr",
              nodeType: "YulTypedName",
              src: "20709:3:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "next",
              nodeType: "YulTypedName",
              src: "20717:4:2",
              type: ""
            }
          ],
          src: "20626:134:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "20902:73:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "20919:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "20924:6:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "20912:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20912:19:2"
                },
                nodeType: "YulExpressionStatement",
                src: "20912:19:2"
              },
              {
                nodeType: "YulAssignment",
                src: "20940:29:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "20959:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "20964:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "20955:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "20955:14:2"
                },
                variableNames: [
                  {
                    name: "updated_pos",
                    nodeType: "YulIdentifier",
                    src: "20940:11:2"
                  }
                ]
              }
            ]
          },
          name: "array_storeLengthForEncoding_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "20874:3:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "20879:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "updated_pos",
              nodeType: "YulTypedName",
              src: "20890:11:2",
              type: ""
            }
          ],
          src: "20766:209:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21113:73:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "21130:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "21135:6:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "21123:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21123:19:2"
                },
                nodeType: "YulExpressionStatement",
                src: "21123:19:2"
              },
              {
                nodeType: "YulAssignment",
                src: "21151:29:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "21170:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "21175:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "21166:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21166:14:2"
                },
                variableNames: [
                  {
                    name: "updated_pos",
                    nodeType: "YulIdentifier",
                    src: "21151:11:2"
                  }
                ]
              }
            ]
          },
          name: "array_storeLengthForEncoding_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "21085:3:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "21090:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "updated_pos",
              nodeType: "YulTypedName",
              src: "21101:11:2",
              type: ""
            }
          ],
          src: "20981:205:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21278:73:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "21295:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "21300:6:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "21288:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21288:19:2"
                },
                nodeType: "YulExpressionStatement",
                src: "21288:19:2"
              },
              {
                nodeType: "YulAssignment",
                src: "21316:29:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "21335:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "21340:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "21331:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21331:14:2"
                },
                variableNames: [
                  {
                    name: "updated_pos",
                    nodeType: "YulIdentifier",
                    src: "21316:11:2"
                  }
                ]
              }
            ]
          },
          name: "array_storeLengthForEncoding_t_string_memory_ptr",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "21250:3:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "21255:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "updated_pos",
              nodeType: "YulTypedName",
              src: "21266:11:2",
              type: ""
            }
          ],
          src: "21192:159:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21453:73:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "21470:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "21475:6:2"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "21463:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21463:19:2"
                },
                nodeType: "YulExpressionStatement",
                src: "21463:19:2"
              },
              {
                nodeType: "YulAssignment",
                src: "21491:29:2",
                value: {
                  "arguments": [
                    {
                      name: "pos",
                      nodeType: "YulIdentifier",
                      src: "21510:3:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "21515:4:2",
                      type: "",
                      value: "0x20"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "21506:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21506:14:2"
                },
                variableNames: [
                  {
                    name: "updated_pos",
                    nodeType: "YulIdentifier",
                    src: "21491:11:2"
                  }
                ]
              }
            ]
          },
          name: "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "pos",
              nodeType: "YulTypedName",
              src: "21425:3:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "21430:6:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "updated_pos",
              nodeType: "YulTypedName",
              src: "21441:11:2",
              type: ""
            }
          ],
          src: "21357:169:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21577:51:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "21587:35:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "21616:5:2"
                    }
                  ],
                  functionName: {
                    name: "cleanup_t_uint160",
                    nodeType: "YulIdentifier",
                    src: "21598:17:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21598:24:2"
                },
                variableNames: [
                  {
                    name: "cleaned",
                    nodeType: "YulIdentifier",
                    src: "21587:7:2"
                  }
                ]
              }
            ]
          },
          name: "cleanup_t_address",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "21559:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "cleaned",
              nodeType: "YulTypedName",
              src: "21569:7:2",
              type: ""
            }
          ],
          src: "21532:96:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21676:48:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "21686:32:2",
                value: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "21711:5:2"
                        }
                      ],
                      functionName: {
                        name: "iszero",
                        nodeType: "YulIdentifier",
                        src: "21704:6:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "21704:13:2"
                    }
                  ],
                  functionName: {
                    name: "iszero",
                    nodeType: "YulIdentifier",
                    src: "21697:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21697:21:2"
                },
                variableNames: [
                  {
                    name: "cleaned",
                    nodeType: "YulIdentifier",
                    src: "21686:7:2"
                  }
                ]
              }
            ]
          },
          name: "cleanup_t_bool",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "21658:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "cleaned",
              nodeType: "YulTypedName",
              src: "21668:7:2",
              type: ""
            }
          ],
          src: "21634:90:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21775:81:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "21785:65:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "21800:5:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "21807:42:2",
                      type: "",
                      value: "0xffffffffffffffffffffffffffffffffffffffff"
                    }
                  ],
                  functionName: {
                    name: "and",
                    nodeType: "YulIdentifier",
                    src: "21796:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "21796:54:2"
                },
                variableNames: [
                  {
                    name: "cleaned",
                    nodeType: "YulIdentifier",
                    src: "21785:7:2"
                  }
                ]
              }
            ]
          },
          name: "cleanup_t_uint160",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "21757:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "cleaned",
              nodeType: "YulTypedName",
              src: "21767:7:2",
              type: ""
            }
          ],
          src: "21730:126:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21907:32:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "21917:16:2",
                value: {
                  name: "value",
                  nodeType: "YulIdentifier",
                  src: "21928:5:2"
                },
                variableNames: [
                  {
                    name: "cleaned",
                    nodeType: "YulIdentifier",
                    src: "21917:7:2"
                  }
                ]
              }
            ]
          },
          name: "cleanup_t_uint256",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "21889:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "cleaned",
              nodeType: "YulTypedName",
              src: "21899:7:2",
              type: ""
            }
          ],
          src: "21862:77:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "21996:103:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      name: "dst",
                      nodeType: "YulIdentifier",
                      src: "22019:3:2"
                    },
                    {
                      name: "src",
                      nodeType: "YulIdentifier",
                      src: "22024:3:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "22029:6:2"
                    }
                  ],
                  functionName: {
                    name: "calldatacopy",
                    nodeType: "YulIdentifier",
                    src: "22006:12:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22006:30:2"
                },
                nodeType: "YulExpressionStatement",
                src: "22006:30:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "dst",
                          nodeType: "YulIdentifier",
                          src: "22077:3:2"
                        },
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "22082:6:2"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "22073:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "22073:16:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "22091:1:2",
                      type: "",
                      value: "0"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "22066:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22066:27:2"
                },
                nodeType: "YulExpressionStatement",
                src: "22066:27:2"
              }
            ]
          },
          name: "copy_calldata_to_memory",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "src",
              nodeType: "YulTypedName",
              src: "21978:3:2",
              type: ""
            },
            {
              name: "dst",
              nodeType: "YulTypedName",
              src: "21983:3:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "21988:6:2",
              type: ""
            }
          ],
          src: "21945:154:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "22154:258:2",
            statements: [
              {
                nodeType: "YulVariableDeclaration",
                src: "22164:10:2",
                value: {
                  kind: "number",
                  nodeType: "YulLiteral",
                  src: "22173:1:2",
                  type: "",
                  value: "0"
                },
                variables: [
                  {
                    name: "i",
                    nodeType: "YulTypedName",
                    src: "22168:1:2",
                    type: ""
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "22233:63:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                name: "dst",
                                nodeType: "YulIdentifier",
                                src: "22258:3:2"
                              },
                              {
                                name: "i",
                                nodeType: "YulIdentifier",
                                src: "22263:1:2"
                              }
                            ],
                            functionName: {
                              name: "add",
                              nodeType: "YulIdentifier",
                              src: "22254:3:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "22254:11:2"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    name: "src",
                                    nodeType: "YulIdentifier",
                                    src: "22277:3:2"
                                  },
                                  {
                                    name: "i",
                                    nodeType: "YulIdentifier",
                                    src: "22282:1:2"
                                  }
                                ],
                                functionName: {
                                  name: "add",
                                  nodeType: "YulIdentifier",
                                  src: "22273:3:2"
                                },
                                nodeType: "YulFunctionCall",
                                src: "22273:11:2"
                              }
                            ],
                            functionName: {
                              name: "mload",
                              nodeType: "YulIdentifier",
                              src: "22267:5:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "22267:18:2"
                          }
                        ],
                        functionName: {
                          name: "mstore",
                          nodeType: "YulIdentifier",
                          src: "22247:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "22247:39:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "22247:39:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "i",
                      nodeType: "YulIdentifier",
                      src: "22194:1:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "22197:6:2"
                    }
                  ],
                  functionName: {
                    name: "lt",
                    nodeType: "YulIdentifier",
                    src: "22191:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22191:13:2"
                },
                nodeType: "YulForLoop",
                post: {
                  nodeType: "YulBlock",
                  src: "22205:19:2",
                  statements: [
                    {
                      nodeType: "YulAssignment",
                      src: "22207:15:2",
                      value: {
                        "arguments": [
                          {
                            name: "i",
                            nodeType: "YulIdentifier",
                            src: "22216:1:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "22219:2:2",
                            type: "",
                            value: "32"
                          }
                        ],
                        functionName: {
                          name: "add",
                          nodeType: "YulIdentifier",
                          src: "22212:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "22212:10:2"
                      },
                      variableNames: [
                        {
                          name: "i",
                          nodeType: "YulIdentifier",
                          src: "22207:1:2"
                        }
                      ]
                    }
                  ]
                },
                pre: {
                  nodeType: "YulBlock",
                  src: "22187:3:2",
                  statements: []
                },
                src: "22183:113:2"
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "22330:76:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                name: "dst",
                                nodeType: "YulIdentifier",
                                src: "22380:3:2"
                              },
                              {
                                name: "length",
                                nodeType: "YulIdentifier",
                                src: "22385:6:2"
                              }
                            ],
                            functionName: {
                              name: "add",
                              nodeType: "YulIdentifier",
                              src: "22376:3:2"
                            },
                            nodeType: "YulFunctionCall",
                            src: "22376:16:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "22394:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "mstore",
                          nodeType: "YulIdentifier",
                          src: "22369:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "22369:27:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "22369:27:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "i",
                      nodeType: "YulIdentifier",
                      src: "22311:1:2"
                    },
                    {
                      name: "length",
                      nodeType: "YulIdentifier",
                      src: "22314:6:2"
                    }
                  ],
                  functionName: {
                    name: "gt",
                    nodeType: "YulIdentifier",
                    src: "22308:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22308:13:2"
                },
                nodeType: "YulIf",
                src: "22305:2:2"
              }
            ]
          },
          name: "copy_memory_to_memory",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "src",
              nodeType: "YulTypedName",
              src: "22136:3:2",
              type: ""
            },
            {
              name: "dst",
              nodeType: "YulTypedName",
              src: "22141:3:2",
              type: ""
            },
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "22146:6:2",
              type: ""
            }
          ],
          src: "22105:307:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "22469:269:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "22479:22:2",
                value: {
                  "arguments": [
                    {
                      name: "data",
                      nodeType: "YulIdentifier",
                      src: "22493:4:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "22499:1:2",
                      type: "",
                      value: "2"
                    }
                  ],
                  functionName: {
                    name: "div",
                    nodeType: "YulIdentifier",
                    src: "22489:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22489:12:2"
                },
                variableNames: [
                  {
                    name: "length",
                    nodeType: "YulIdentifier",
                    src: "22479:6:2"
                  }
                ]
              },
              {
                nodeType: "YulVariableDeclaration",
                src: "22510:38:2",
                value: {
                  "arguments": [
                    {
                      name: "data",
                      nodeType: "YulIdentifier",
                      src: "22540:4:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "22546:1:2",
                      type: "",
                      value: "1"
                    }
                  ],
                  functionName: {
                    name: "and",
                    nodeType: "YulIdentifier",
                    src: "22536:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22536:12:2"
                },
                variables: [
                  {
                    name: "outOfPlaceEncoding",
                    nodeType: "YulTypedName",
                    src: "22514:18:2",
                    type: ""
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "22587:51:2",
                  statements: [
                    {
                      nodeType: "YulAssignment",
                      src: "22601:27:2",
                      value: {
                        "arguments": [
                          {
                            name: "length",
                            nodeType: "YulIdentifier",
                            src: "22615:6:2"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "22623:4:2",
                            type: "",
                            value: "0x7f"
                          }
                        ],
                        functionName: {
                          name: "and",
                          nodeType: "YulIdentifier",
                          src: "22611:3:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "22611:17:2"
                      },
                      variableNames: [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "22601:6:2"
                        }
                      ]
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "outOfPlaceEncoding",
                      nodeType: "YulIdentifier",
                      src: "22567:18:2"
                    }
                  ],
                  functionName: {
                    name: "iszero",
                    nodeType: "YulIdentifier",
                    src: "22560:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22560:26:2"
                },
                nodeType: "YulIf",
                src: "22557:2:2"
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "22690:42:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [],
                        functionName: {
                          name: "panic_error_0x22",
                          nodeType: "YulIdentifier",
                          src: "22704:16:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "22704:18:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "22704:18:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "outOfPlaceEncoding",
                      nodeType: "YulIdentifier",
                      src: "22654:18:2"
                    },
                    {
                      "arguments": [
                        {
                          name: "length",
                          nodeType: "YulIdentifier",
                          src: "22677:6:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "22685:2:2",
                          type: "",
                          value: "32"
                        }
                      ],
                      functionName: {
                        name: "lt",
                        nodeType: "YulIdentifier",
                        src: "22674:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "22674:14:2"
                    }
                  ],
                  functionName: {
                    name: "eq",
                    nodeType: "YulIdentifier",
                    src: "22651:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22651:38:2"
                },
                nodeType: "YulIf",
                src: "22648:2:2"
              }
            ]
          },
          name: "extract_byte_array_length",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "data",
              nodeType: "YulTypedName",
              src: "22453:4:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "length",
              nodeType: "YulTypedName",
              src: "22462:6:2",
              type: ""
            }
          ],
          src: "22418:320:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "22787:190:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "22797:33:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "22824:5:2"
                    }
                  ],
                  functionName: {
                    name: "cleanup_t_uint256",
                    nodeType: "YulIdentifier",
                    src: "22806:17:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22806:24:2"
                },
                variableNames: [
                  {
                    name: "value",
                    nodeType: "YulIdentifier",
                    src: "22797:5:2"
                  }
                ]
              },
              {
                body: {
                  nodeType: "YulBlock",
                  src: "22920:22:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [],
                        functionName: {
                          name: "panic_error_0x11",
                          nodeType: "YulIdentifier",
                          src: "22922:16:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "22922:18:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "22922:18:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "22845:5:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "22852:66:2",
                      type: "",
                      value: "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                    }
                  ],
                  functionName: {
                    name: "eq",
                    nodeType: "YulIdentifier",
                    src: "22842:2:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22842:77:2"
                },
                nodeType: "YulIf",
                src: "22839:2:2"
              },
              {
                nodeType: "YulAssignment",
                src: "22951:20:2",
                value: {
                  "arguments": [
                    {
                      name: "value",
                      nodeType: "YulIdentifier",
                      src: "22962:5:2"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "22969:1:2",
                      type: "",
                      value: "1"
                    }
                  ],
                  functionName: {
                    name: "add",
                    nodeType: "YulIdentifier",
                    src: "22958:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "22958:13:2"
                },
                variableNames: [
                  {
                    name: "ret",
                    nodeType: "YulIdentifier",
                    src: "22951:3:2"
                  }
                ]
              }
            ]
          },
          name: "increment_t_uint256",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "22773:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "ret",
              nodeType: "YulTypedName",
              src: "22783:3:2",
              type: ""
            }
          ],
          src: "22744:233:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "23011:152:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23028:1:2",
                      type: "",
                      value: "0"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23031:77:2",
                      type: "",
                      value: "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "23021:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23021:88:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23021:88:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23125:1:2",
                      type: "",
                      value: "4"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23128:4:2",
                      type: "",
                      value: "0x11"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "23118:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23118:15:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23118:15:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23149:1:2",
                      type: "",
                      value: "0"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23152:4:2",
                      type: "",
                      value: "0x24"
                    }
                  ],
                  functionName: {
                    name: "revert",
                    nodeType: "YulIdentifier",
                    src: "23142:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23142:15:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23142:15:2"
              }
            ]
          },
          name: "panic_error_0x11",
          nodeType: "YulFunctionDefinition",
          src: "22983:180:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "23197:152:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23214:1:2",
                      type: "",
                      value: "0"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23217:77:2",
                      type: "",
                      value: "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "23207:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23207:88:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23207:88:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23311:1:2",
                      type: "",
                      value: "4"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23314:4:2",
                      type: "",
                      value: "0x22"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "23304:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23304:15:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23304:15:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23335:1:2",
                      type: "",
                      value: "0"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23338:4:2",
                      type: "",
                      value: "0x24"
                    }
                  ],
                  functionName: {
                    name: "revert",
                    nodeType: "YulIdentifier",
                    src: "23328:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23328:15:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23328:15:2"
              }
            ]
          },
          name: "panic_error_0x22",
          nodeType: "YulFunctionDefinition",
          src: "23169:180:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "23383:152:2",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23400:1:2",
                      type: "",
                      value: "0"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23403:77:2",
                      type: "",
                      value: "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "23393:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23393:88:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23393:88:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23497:1:2",
                      type: "",
                      value: "4"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23500:4:2",
                      type: "",
                      value: "0x41"
                    }
                  ],
                  functionName: {
                    name: "mstore",
                    nodeType: "YulIdentifier",
                    src: "23490:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23490:15:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23490:15:2"
              },
              {
                expression: {
                  "arguments": [
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23521:1:2",
                      type: "",
                      value: "0"
                    },
                    {
                      kind: "number",
                      nodeType: "YulLiteral",
                      src: "23524:4:2",
                      type: "",
                      value: "0x24"
                    }
                  ],
                  functionName: {
                    name: "revert",
                    nodeType: "YulIdentifier",
                    src: "23514:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23514:15:2"
                },
                nodeType: "YulExpressionStatement",
                src: "23514:15:2"
              }
            ]
          },
          name: "panic_error_0x41",
          nodeType: "YulFunctionDefinition",
          src: "23355:180:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "23589:54:2",
            statements: [
              {
                nodeType: "YulAssignment",
                src: "23599:38:2",
                value: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "23617:5:2"
                        },
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "23624:2:2",
                          type: "",
                          value: "31"
                        }
                      ],
                      functionName: {
                        name: "add",
                        nodeType: "YulIdentifier",
                        src: "23613:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "23613:14:2"
                    },
                    {
                      "arguments": [
                        {
                          kind: "number",
                          nodeType: "YulLiteral",
                          src: "23633:2:2",
                          type: "",
                          value: "31"
                        }
                      ],
                      functionName: {
                        name: "not",
                        nodeType: "YulIdentifier",
                        src: "23629:3:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "23629:7:2"
                    }
                  ],
                  functionName: {
                    name: "and",
                    nodeType: "YulIdentifier",
                    src: "23609:3:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23609:28:2"
                },
                variableNames: [
                  {
                    name: "result",
                    nodeType: "YulIdentifier",
                    src: "23599:6:2"
                  }
                ]
              }
            ]
          },
          name: "round_up_to_mul_of_32",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "23572:5:2",
              type: ""
            }
          ],
          returnVariables: [
            {
              name: "result",
              nodeType: "YulTypedName",
              src: "23582:6:2",
              type: ""
            }
          ],
          src: "23541:102:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "23692:79:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "23749:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "23758:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "23761:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "23751:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "23751:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "23751:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "23715:5:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "23740:5:2"
                            }
                          ],
                          functionName: {
                            name: "cleanup_t_address",
                            nodeType: "YulIdentifier",
                            src: "23722:17:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "23722:24:2"
                        }
                      ],
                      functionName: {
                        name: "eq",
                        nodeType: "YulIdentifier",
                        src: "23712:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "23712:35:2"
                    }
                  ],
                  functionName: {
                    name: "iszero",
                    nodeType: "YulIdentifier",
                    src: "23705:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23705:43:2"
                },
                nodeType: "YulIf",
                src: "23702:2:2"
              }
            ]
          },
          name: "validator_revert_t_address",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "23685:5:2",
              type: ""
            }
          ],
          src: "23649:122:2"
        },
        {
          body: {
            nodeType: "YulBlock",
            src: "23820:79:2",
            statements: [
              {
                body: {
                  nodeType: "YulBlock",
                  src: "23877:16:2",
                  statements: [
                    {
                      expression: {
                        "arguments": [
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "23886:1:2",
                            type: "",
                            value: "0"
                          },
                          {
                            kind: "number",
                            nodeType: "YulLiteral",
                            src: "23889:1:2",
                            type: "",
                            value: "0"
                          }
                        ],
                        functionName: {
                          name: "revert",
                          nodeType: "YulIdentifier",
                          src: "23879:6:2"
                        },
                        nodeType: "YulFunctionCall",
                        src: "23879:12:2"
                      },
                      nodeType: "YulExpressionStatement",
                      src: "23879:12:2"
                    }
                  ]
                },
                condition: {
                  "arguments": [
                    {
                      "arguments": [
                        {
                          name: "value",
                          nodeType: "YulIdentifier",
                          src: "23843:5:2"
                        },
                        {
                          "arguments": [
                            {
                              name: "value",
                              nodeType: "YulIdentifier",
                              src: "23868:5:2"
                            }
                          ],
                          functionName: {
                            name: "cleanup_t_uint256",
                            nodeType: "YulIdentifier",
                            src: "23850:17:2"
                          },
                          nodeType: "YulFunctionCall",
                          src: "23850:24:2"
                        }
                      ],
                      functionName: {
                        name: "eq",
                        nodeType: "YulIdentifier",
                        src: "23840:2:2"
                      },
                      nodeType: "YulFunctionCall",
                      src: "23840:35:2"
                    }
                  ],
                  functionName: {
                    name: "iszero",
                    nodeType: "YulIdentifier",
                    src: "23833:6:2"
                  },
                  nodeType: "YulFunctionCall",
                  src: "23833:43:2"
                },
                nodeType: "YulIf",
                src: "23830:2:2"
              }
            ]
          },
          name: "validator_revert_t_uint256",
          nodeType: "YulFunctionDefinition",
          parameters: [
            {
              name: "value",
              nodeType: "YulTypedName",
              src: "23813:5:2",
              type: ""
            }
          ],
          src: "23777:122:2"
        }
      ]
    },
    contents: '{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocateMemory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n        mstore(array, length) dst := add(array, 0x20)\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) { revert(0, 0) }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementPos := src\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocateMemory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr(value0, pos)\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr(value0, pos) -> updatedPos {\n        updatedPos := abi_encode_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr(value0, pos)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // struct Voting.Candidate[] -> struct Voting.Candidate[]\n    function abi_encode_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    // struct Voting.Voter[] -> struct Voting.Voter[]\n    function abi_encode_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let headStart := pos\n        let tail := add(pos, mul(length, 0x20))\n        let baseRef := array_dataslot_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, headStart))\n            let elementValue0 := mload(srcPtr)\n            tail := abi_encodeUpdatedPos_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr(elementValue0, tail)\n            srcPtr := array_nextElement_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr(srcPtr)\n            pos := add(pos, 0x20)\n        }\n        pos := tail\n        end := pos\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n\n        mstore(add(pos, 0), "You have already voted.")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n\n        mstore(add(pos, 0), "Voter already registered.")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n\n        mstore(add(pos, 0), "Only admin can perform this acti")\n\n        mstore(add(pos, 32), "on.")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n\n        mstore(add(pos, 0), "You are not registered to vote.")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n\n        mstore(add(pos, 0), "Exceeded maximum number of votes")\n\n        mstore(add(pos, 32), ".")\n\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n\n        mstore(add(pos, 0), "Voter not registered.")\n\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n\n        mstore(add(pos, 0), "Invalid candidate ID.")\n\n        end := add(pos, 32)\n    }\n\n    // struct Voting.Candidate -> struct Voting.Candidate\n    function abi_encode_t_struct$_Candidate_$50_memory_ptr_to_t_struct$_Candidate_$50_memory_ptr(value, pos)  -> end  {\n        let tail := add(pos, 0x80)\n\n        {\n            // id\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // party\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // voteCount\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        end := tail\n    }\n\n    // struct Voting.Voter -> struct Voting.Voter\n    function abi_encode_t_struct$_Voter_$57_memory_ptr_to_t_struct$_Voter_$57_memory_ptr(value, pos)  -> end  {\n        let tail := add(pos, 0x60)\n\n        {\n            // fullName\n\n            let memberValue0 := mload(add(value, 0x00))\n\n            mstore(add(pos, 0x00), sub(tail, pos))\n            tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // isRegistered\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // hasVoted\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0x40))\n        }\n\n        end := tail\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_bool_t_bool__to_t_string_memory_ptr_t_bool_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function allocateMemory(size) -> memPtr {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, size)\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        // round up\n        size := and(add(length, 0x1f), not(0x1f))\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n',
    id: 2,
    language: "Yul",
    name: "#utility.yul"
  }
];
const sourceMap = "60:5016:1:-:0;;;665:136;;;;;;;;;;701:1;690:8;:12;;;;731:1;713:15;:19;;;;751:10;743:5;;:18;;;;;;;;;;;;;;;;;;60:5016;;;;;;";
const deployedSourceMap = "60:5016:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;850:291;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1644:162;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;446:27;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3875:298;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;311:44;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;3621:246;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;4779:294;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;480:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;362:39;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;1996:749;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4551:220;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;408:31;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1149:431;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;509:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;850:291;592:5;;;;;;;;;;;578:19;;:10;:19;;;570:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;998:107:::1;;;;;;;;1022:15;;998:107;;;;1052:5;998:107;;;;1072:6;998:107;;;;1093:1;998:107;;::::0;968:10:::1;:27:::0;979:15:::1;;968:27;;;;;;;;;;;:137;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1116:15;;:17;;;;;;;;;:::i;:::-;;;;;;850:291:::0;;:::o;1644:162::-;1694:4;1719:6;:18;1726:10;1719:18;;;;;;;;;;;;;;;:31;;;;;;;;;;;;1711:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;1794:4;1787:11;;1644:162;:::o;446:27::-;;;;:::o;3875:298::-;3924:18;3955:32;4006:15;;3990:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3955:67;;4038:6;4033:102;4054:15;;4050:1;:19;4033:102;;;4110:10;:13;4121:1;4110:13;;;;;;;;;;;4091:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:13;4105:1;4091:16;;;;;;;;;;;;;;;;;;;;;:32;;;;4071:3;;;;;:::i;:::-;;;;4033:102;;;;4152:13;4145:20;;;3875:298;:::o;311:44::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3621:246::-;3699:4;3705:13;3720:4;3737:26;3766:10;:24;3777:12;3766:24;;;;;;;;;;;3737:53;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3809:9;:12;;;3823:9;:14;;;3839:9;:19;;;3801:58;;;;;;;3621:246;;;;;:::o;4779:294::-;4824:14;4851:24;4890:14;:21;;;;4878:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;4851:61;;4928:6;4923:116;4944:14;:21;;;;4940:1;:25;4923:116;;;5002:6;:25;5009:14;5024:1;5009:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5002:25;;;;;;;;;;;;;;;4987:40;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:9;4997:1;4987:12;;;;;;;;;;;;;;;;;;;;;:40;;;;4967:3;;;;;:::i;:::-;;;;4923:116;;;;5056:9;5049:16;;;4779:294;:::o;480:20::-;;;;:::o;362:39::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1996:749::-;1878:6;:18;1885:10;1878:18;;;;;;;;;;;;;;;:31;;;;;;;;;;;;1856:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;2086:6:::1;:18;2093:10;2086:18;;;;;;;;;;;;;;;:27;;;;;;;;;;;;2085:28;2077:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;2198:8;;2174:13;:20;:32;;2152:115;;;;;;;;;;;;:::i;:::-;;;;;;;;;2359:6;2354:339;2375:13;:20;2371:1;:24;2354:339;;;2417:16;2436:13;2450:1;2436:16;;;;;;;;;;;;;;;;;;;;;;2417:35;;2508:1;2493:11;:16;;:49;;;;;2527:15;;2513:11;:29;2493:49;2467:132;;;;;;;;;;;;:::i;:::-;;;;;;;;;2646:10;:23:::0;2657:11:::1;2646:23;;;;;;;;;;;:33;;;:35;;;;;;;;;:::i;:::-;;;;;;2354:339;2397:3;;;;;:::i;:::-;;;;2354:339;;;;2732:4;2702:6:::0;:18:::1;2709:10;2702:18;;;;;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;1996:749:::0;:::o;4551:220::-;4613:13;4628:4;4634;4651:18;4672:6;:21;4679:13;4672:21;;;;;;;;;;;;;;;4651:42;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4712:5;:14;;;4728:5;:18;;;4748:5;:14;;;4704:59;;;;;;;4551:220;;;;;:::o;408:31::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1149:431::-;1286:6;:21;1293:13;1286:21;;;;;;;;;;;;;;;:34;;;;;;;;;;;;1285:35;1263:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;1410:115;;;;;;;;1441:9;1410:115;;;;1479:4;1410:115;;;;;;1508:5;1410:115;;;;;1386:6;:21;1393:13;1386:21;;;;;;;;;;;;;;;:139;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1538:14;1558:13;1538:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1149:431;;:::o;509:20::-;;;;;;;;;;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:622:2:-;;145:80;160:64;217:6;160:64;:::i;:::-;145:80;:::i;:::-;136:89;;245:5;273:6;266:5;259:21;299:4;292:5;288:16;281:23;;324:6;374:3;366:4;358:6;354:17;349:3;345:27;342:36;339:2;;;391:1;388;381:12;339:2;419:1;404:236;429:6;426:1;423:13;404:236;;;496:3;524:37;557:3;545:10;524:37;:::i;:::-;519:3;512:50;591:4;586:3;582:14;575:21;;625:4;620:3;616:14;609:21;;464:176;451:1;448;444:9;439:14;;404:236;;;408:14;126:520;;;;;;;:::o;652:344::-;;755:65;770:49;812:6;770:49;:::i;:::-;755:65;:::i;:::-;746:74;;843:6;836:5;829:21;881:4;874:5;870:16;919:3;910:6;905:3;901:16;898:25;895:2;;;936:1;933;926:12;895:2;949:41;983:6;978:3;973;949:41;:::i;:::-;736:260;;;;;;:::o;1002:139::-;;1086:6;1073:20;1064:29;;1102:33;1129:5;1102:33;:::i;:::-;1054:87;;;;:::o;1164:303::-;;1284:3;1277:4;1269:6;1265:17;1261:27;1251:2;;1302:1;1299;1292:12;1251:2;1342:6;1329:20;1367:94;1457:3;1449:6;1442:4;1434:6;1430:17;1367:94;:::i;:::-;1358:103;;1241:226;;;;;:::o;1487:273::-;;1592:3;1585:4;1577:6;1573:17;1569:27;1559:2;;1610:1;1607;1600:12;1559:2;1650:6;1637:20;1675:79;1750:3;1742:6;1735:4;1727:6;1723:17;1675:79;:::i;:::-;1666:88;;1549:211;;;;;:::o;1766:139::-;;1850:6;1837:20;1828:29;;1866:33;1893:5;1866:33;:::i;:::-;1818:87;;;;:::o;1911:262::-;;2019:2;2007:9;1998:7;1994:23;1990:32;1987:2;;;2035:1;2032;2025:12;1987:2;2078:1;2103:53;2148:7;2139:6;2128:9;2124:22;2103:53;:::i;:::-;2093:63;;2049:117;1977:196;;;;:::o;2179:520::-;;;2314:2;2302:9;2293:7;2289:23;2285:32;2282:2;;;2330:1;2327;2320:12;2282:2;2373:1;2398:53;2443:7;2434:6;2423:9;2419:22;2398:53;:::i;:::-;2388:63;;2344:117;2528:2;2517:9;2513:18;2500:32;2559:18;2551:6;2548:30;2545:2;;;2591:1;2588;2581:12;2545:2;2619:63;2674:7;2665:6;2654:9;2650:22;2619:63;:::i;:::-;2609:73;;2471:221;2272:427;;;;;:::o;2705:405::-;;2838:2;2826:9;2817:7;2813:23;2809:32;2806:2;;;2854:1;2851;2844:12;2806:2;2925:1;2914:9;2910:17;2897:31;2955:18;2947:6;2944:30;2941:2;;;2987:1;2984;2977:12;2941:2;3015:78;3085:7;3076:6;3065:9;3061:22;3015:78;:::i;:::-;3005:88;;2868:235;2796:314;;;;:::o;3116:633::-;;;3261:2;3249:9;3240:7;3236:23;3232:32;3229:2;;;3277:1;3274;3267:12;3229:2;3348:1;3337:9;3333:17;3320:31;3378:18;3370:6;3367:30;3364:2;;;3410:1;3407;3400:12;3364:2;3438:63;3493:7;3484:6;3473:9;3469:22;3438:63;:::i;:::-;3428:73;;3291:220;3578:2;3567:9;3563:18;3550:32;3609:18;3601:6;3598:30;3595:2;;;3641:1;3638;3631:12;3595:2;3669:63;3724:7;3715:6;3704:9;3700:22;3669:63;:::i;:::-;3659:73;;3521:221;3219:530;;;;;:::o;3755:262::-;;3863:2;3851:9;3842:7;3838:23;3834:32;3831:2;;;3879:1;3876;3869:12;3831:2;3922:1;3947:53;3992:7;3983:6;3972:9;3968:22;3947:53;:::i;:::-;3937:63;;3893:117;3821:196;;;;:::o;4023:256::-;;4177:96;4269:3;4261:6;4177:96;:::i;:::-;4163:110;;4153:126;;;;:::o;4285:240::-;;4431:88;4515:3;4507:6;4431:88;:::i;:::-;4417:102;;4407:118;;;;:::o;4531:::-;4618:24;4636:5;4618:24;:::i;:::-;4613:3;4606:37;4596:53;;:::o;4717:1111::-;;4915:79;4988:5;4915:79;:::i;:::-;5010:111;5114:6;5109:3;5010:111;:::i;:::-;5003:118;;5147:3;5192:4;5184:6;5180:17;5175:3;5171:27;5222:81;5297:5;5222:81;:::i;:::-;5326:7;5357:1;5342:441;5367:6;5364:1;5361:13;5342:441;;;5438:9;5432:4;5428:20;5423:3;5416:33;5489:6;5483:13;5517:114;5626:4;5611:13;5517:114;:::i;:::-;5509:122;;5654:85;5732:6;5654:85;:::i;:::-;5644:95;;5768:4;5763:3;5759:14;5752:21;;5402:381;5389:1;5386;5382:9;5377:14;;5342:441;;;5346:14;5799:4;5792:11;;5819:3;5812:10;;4891:937;;;;;;;;;:::o;5888:1079::-;;6078:75;6147:5;6078:75;:::i;:::-;6169:107;6269:6;6264:3;6169:107;:::i;:::-;6162:114;;6302:3;6347:4;6339:6;6335:17;6330:3;6326:27;6377:77;6448:5;6377:77;:::i;:::-;6477:7;6508:1;6493:429;6518:6;6515:1;6512:13;6493:429;;;6589:9;6583:4;6579:20;6574:3;6567:33;6640:6;6634:13;6668:106;6769:4;6754:13;6668:106;:::i;:::-;6660:114;;6797:81;6871:6;6797:81;:::i;:::-;6787:91;;6907:4;6902:3;6898:14;6891:21;;6553:369;6540:1;6537;6533:9;6528:14;;6493:429;;;6497:14;6938:4;6931:11;;6958:3;6951:10;;6054:913;;;;;;;;;:::o;6973:99::-;7044:21;7059:5;7044:21;:::i;:::-;7039:3;7032:34;7022:50;;:::o;7078:109::-;7159:21;7174:5;7159:21;:::i;:::-;7154:3;7147:34;7137:50;;:::o;7193:344::-;;7299:39;7332:5;7299:39;:::i;:::-;7354:61;7408:6;7403:3;7354:61;:::i;:::-;7347:68;;7424:52;7469:6;7464:3;7457:4;7450:5;7446:16;7424:52;:::i;:::-;7501:29;7523:6;7501:29;:::i;:::-;7496:3;7492:39;7485:46;;7275:262;;;;;:::o;7543:364::-;;7659:39;7692:5;7659:39;:::i;:::-;7714:71;7778:6;7773:3;7714:71;:::i;:::-;7707:78;;7794:52;7839:6;7834:3;7827:4;7820:5;7816:16;7794:52;:::i;:::-;7871:29;7893:6;7871:29;:::i;:::-;7866:3;7862:39;7855:46;;7635:272;;;;;:::o;7913:321::-;;8076:67;8140:2;8135:3;8076:67;:::i;:::-;8069:74;;8173:25;8169:1;8164:3;8160:11;8153:46;8225:2;8220:3;8216:12;8209:19;;8059:175;;;:::o;8240:323::-;;8403:67;8467:2;8462:3;8403:67;:::i;:::-;8396:74;;8500:27;8496:1;8491:3;8487:11;8480:48;8554:2;8549:3;8545:12;8538:19;;8386:177;;;:::o;8569:367::-;;8732:67;8796:2;8791:3;8732:67;:::i;:::-;8725:74;;8829:34;8825:1;8820:3;8816:11;8809:55;8895:5;8890:2;8885:3;8881:12;8874:27;8927:2;8922:3;8918:12;8911:19;;8715:221;;;:::o;8942:329::-;;9105:67;9169:2;9164:3;9105:67;:::i;:::-;9098:74;;9202:33;9198:1;9193:3;9189:11;9182:54;9262:2;9257:3;9253:12;9246:19;;9088:183;;;:::o;9277:365::-;;9440:67;9504:2;9499:3;9440:67;:::i;:::-;9433:74;;9537:34;9533:1;9528:3;9524:11;9517:55;9603:3;9598:2;9593:3;9589:12;9582:25;9633:2;9628:3;9624:12;9617:19;;9423:219;;;:::o;9648:319::-;;9811:67;9875:2;9870:3;9811:67;:::i;:::-;9804:74;;9908:23;9904:1;9899:3;9895:11;9888:44;9958:2;9953:3;9949:12;9942:19;;9794:173;;;:::o;9973:319::-;;10136:67;10200:2;10195:3;10136:67;:::i;:::-;10129:74;;10233:23;10229:1;10224:3;10220:11;10213:44;10283:2;10278:3;10274:12;10267:19;;10119:173;;;:::o;10356:1019::-;;10501:4;10496:3;10492:14;10586:4;10579:5;10575:16;10569:23;10605:63;10662:4;10657:3;10653:14;10639:12;10605:63;:::i;:::-;10516:162;10760:4;10753:5;10749:16;10743:23;10813:3;10807:4;10803:14;10796:4;10791:3;10787:14;10780:38;10839:73;10907:4;10893:12;10839:73;:::i;:::-;10831:81;;10688:235;11006:4;10999:5;10995:16;10989:23;11059:3;11053:4;11049:14;11042:4;11037:3;11033:14;11026:38;11085:73;11153:4;11139:12;11085:73;:::i;:::-;11077:81;;10933:236;11256:4;11249:5;11245:16;11239:23;11275:63;11332:4;11327:3;11323:14;11309:12;11275:63;:::i;:::-;11179:169;11365:4;11358:11;;10470:905;;;;;:::o;11431:766::-;;11568:4;11563:3;11559:14;11659:4;11652:5;11648:16;11642:23;11712:3;11706:4;11702:14;11695:4;11690:3;11686:14;11679:38;11738:73;11806:4;11792:12;11738:73;:::i;:::-;11730:81;;11583:239;11912:4;11905:5;11901:16;11895:23;11931:57;11982:4;11977:3;11973:14;11959:12;11931:57;:::i;:::-;11832:166;12084:4;12077:5;12073:16;12067:23;12103:57;12154:4;12149:3;12145:14;12131:12;12103:57;:::i;:::-;12008:162;12187:4;12180:11;;11537:660;;;;;:::o;12203:108::-;12280:24;12298:5;12280:24;:::i;:::-;12275:3;12268:37;12258:53;;:::o;12317:118::-;12404:24;12422:5;12404:24;:::i;:::-;12399:3;12392:37;12382:53;;:::o;12441:222::-;;12572:2;12561:9;12557:18;12549:26;;12585:71;12653:1;12642:9;12638:17;12629:6;12585:71;:::i;:::-;12539:124;;;;:::o;12669:473::-;;12900:2;12889:9;12885:18;12877:26;;12949:9;12943:4;12939:20;12935:1;12924:9;12920:17;12913:47;12977:158;13130:4;13121:6;12977:158;:::i;:::-;12969:166;;12867:275;;;;:::o;13148:457::-;;13371:2;13360:9;13356:18;13348:26;;13420:9;13414:4;13410:20;13406:1;13395:9;13391:17;13384:47;13448:150;13593:4;13584:6;13448:150;:::i;:::-;13440:158;;13338:267;;;;:::o;13611:210::-;;13736:2;13725:9;13721:18;13713:26;;13749:65;13811:1;13800:9;13796:17;13787:6;13749:65;:::i;:::-;13703:118;;;;:::o;13827:509::-;;14022:2;14011:9;14007:18;13999:26;;14071:9;14065:4;14061:20;14057:1;14046:9;14042:17;14035:47;14099:78;14172:4;14163:6;14099:78;:::i;:::-;14091:86;;14187:66;14249:2;14238:9;14234:18;14225:6;14187:66;:::i;:::-;14263;14325:2;14314:9;14310:18;14301:6;14263:66;:::i;:::-;13989:347;;;;;;:::o;14342:419::-;;14546:2;14535:9;14531:18;14523:26;;14595:9;14589:4;14585:20;14581:1;14570:9;14566:17;14559:47;14623:131;14749:4;14623:131;:::i;:::-;14615:139;;14513:248;;;:::o;14767:419::-;;14971:2;14960:9;14956:18;14948:26;;15020:9;15014:4;15010:20;15006:1;14995:9;14991:17;14984:47;15048:131;15174:4;15048:131;:::i;:::-;15040:139;;14938:248;;;:::o;15192:419::-;;15396:2;15385:9;15381:18;15373:26;;15445:9;15439:4;15435:20;15431:1;15420:9;15416:17;15409:47;15473:131;15599:4;15473:131;:::i;:::-;15465:139;;15363:248;;;:::o;15617:419::-;;15821:2;15810:9;15806:18;15798:26;;15870:9;15864:4;15860:20;15856:1;15845:9;15841:17;15834:47;15898:131;16024:4;15898:131;:::i;:::-;15890:139;;15788:248;;;:::o;16042:419::-;;16246:2;16235:9;16231:18;16223:26;;16295:9;16289:4;16285:20;16281:1;16270:9;16266:17;16259:47;16323:131;16449:4;16323:131;:::i;:::-;16315:139;;16213:248;;;:::o;16467:419::-;;16671:2;16660:9;16656:18;16648:26;;16720:9;16714:4;16710:20;16706:1;16695:9;16691:17;16684:47;16748:131;16874:4;16748:131;:::i;:::-;16740:139;;16638:248;;;:::o;16892:419::-;;17096:2;17085:9;17081:18;17073:26;;17145:9;17139:4;17135:20;17131:1;17120:9;17116:17;17109:47;17173:131;17299:4;17173:131;:::i;:::-;17165:139;;17063:248;;;:::o;17317:222::-;;17448:2;17437:9;17433:18;17425:26;;17461:71;17529:1;17518:9;17514:17;17505:6;17461:71;:::i;:::-;17415:124;;;;:::o;17545:735::-;;17800:3;17789:9;17785:19;17777:27;;17814:71;17882:1;17871:9;17867:17;17858:6;17814:71;:::i;:::-;17932:9;17926:4;17922:20;17917:2;17906:9;17902:18;17895:48;17960:78;18033:4;18024:6;17960:78;:::i;:::-;17952:86;;18085:9;18079:4;18075:20;18070:2;18059:9;18055:18;18048:48;18113:78;18186:4;18177:6;18113:78;:::i;:::-;18105:86;;18201:72;18269:2;18258:9;18254:18;18245:6;18201:72;:::i;:::-;17767:513;;;;;;;:::o;18286:533::-;;18493:2;18482:9;18478:18;18470:26;;18506:71;18574:1;18563:9;18559:17;18550:6;18506:71;:::i;:::-;18624:9;18618:4;18614:20;18609:2;18598:9;18594:18;18587:48;18652:78;18725:4;18716:6;18652:78;:::i;:::-;18644:86;;18740:72;18808:2;18797:9;18793:18;18784:6;18740:72;:::i;:::-;18460:359;;;;;;:::o;18825:283::-;;18891:2;18885:9;18875:19;;18933:4;18925:6;18921:17;19040:6;19028:10;19025:22;19004:18;18992:10;18989:34;18986:62;18983:2;;;19051:18;;:::i;:::-;18983:2;19091:10;19087:2;19080:22;18865:243;;;;:::o;19114:311::-;;19281:18;19273:6;19270:30;19267:2;;;19303:18;;:::i;:::-;19267:2;19353:4;19345:6;19341:17;19333:25;;19413:4;19407;19403:15;19395:23;;19196:229;;;:::o;19431:332::-;;19583:18;19575:6;19572:30;19569:2;;;19605:18;;:::i;:::-;19569:2;19690:4;19686:9;19679:4;19671:6;19667:17;19663:33;19655:41;;19751:4;19745;19741:15;19733:23;;19498:265;;;:::o;19769:157::-;;19884:3;19876:11;;19914:4;19909:3;19905:14;19897:22;;19866:60;;;:::o;19932:153::-;;20043:3;20035:11;;20073:4;20068:3;20064:14;20056:22;;20025:60;;;:::o;20091:139::-;;20217:5;20211:12;20201:22;;20190:40;;;:::o;20236:135::-;;20358:5;20352:12;20342:22;;20331:40;;;:::o;20377:99::-;;20463:5;20457:12;20447:22;;20436:40;;;:::o;20482:138::-;;20609:4;20604:3;20600:14;20592:22;;20582:38;;;:::o;20626:134::-;;20749:4;20744:3;20740:14;20732:22;;20722:38;;;:::o;20766:209::-;;20924:6;20919:3;20912:19;20964:4;20959:3;20955:14;20940:29;;20902:73;;;;:::o;20981:205::-;;21135:6;21130:3;21123:19;21175:4;21170:3;21166:14;21151:29;;21113:73;;;;:::o;21192:159::-;;21300:6;21295:3;21288:19;21340:4;21335:3;21331:14;21316:29;;21278:73;;;;:::o;21357:169::-;;21475:6;21470:3;21463:19;21515:4;21510:3;21506:14;21491:29;;21453:73;;;;:::o;21532:96::-;;21598:24;21616:5;21598:24;:::i;:::-;21587:35;;21577:51;;;:::o;21634:90::-;;21711:5;21704:13;21697:21;21686:32;;21676:48;;;:::o;21730:126::-;;21807:42;21800:5;21796:54;21785:65;;21775:81;;;:::o;21862:77::-;;21928:5;21917:16;;21907:32;;;:::o;21945:154::-;22029:6;22024:3;22019;22006:30;22091:1;22082:6;22077:3;22073:16;22066:27;21996:103;;;:::o;22105:307::-;22173:1;22183:113;22197:6;22194:1;22191:13;22183:113;;;22282:1;22277:3;22273:11;22267:18;22263:1;22258:3;22254:11;22247:39;22219:2;22216:1;22212:10;22207:15;;22183:113;;;22314:6;22311:1;22308:13;22305:2;;;22394:1;22385:6;22380:3;22376:16;22369:27;22305:2;22154:258;;;;:::o;22418:320::-;;22499:1;22493:4;22489:12;22479:22;;22546:1;22540:4;22536:12;22567:18;22557:2;;22623:4;22615:6;22611:17;22601:27;;22557:2;22685;22677:6;22674:14;22654:18;22651:38;22648:2;;;22704:18;;:::i;:::-;22648:2;22469:269;;;;:::o;22744:233::-;;22806:24;22824:5;22806:24;:::i;:::-;22797:33;;22852:66;22845:5;22842:77;22839:2;;;22922:18;;:::i;:::-;22839:2;22969:1;22962:5;22958:13;22951:20;;22787:190;;;:::o;22983:180::-;23031:77;23028:1;23021:88;23128:4;23125:1;23118:15;23152:4;23149:1;23142:15;23169:180;23217:77;23214:1;23207:88;23314:4;23311:1;23304:15;23338:4;23335:1;23328:15;23355:180;23403:77;23400:1;23393:88;23500:4;23497:1;23490:15;23524:4;23521:1;23514:15;23541:102;;23633:2;23629:7;23624:2;23617:5;23613:14;23609:28;23599:38;;23589:54;;;:::o;23649:122::-;23722:24;23740:5;23722:24;:::i;:::-;23715:5;23712:35;23702:2;;23761:1;23758;23751:12;23702:2;23692:79;:::o;23777:122::-;23850:24;23868:5;23850:24;:::i;:::-;23843:5;23840:35;23830:2;;23889:1;23886;23879:12;23830:2;23820:79;:::o";
const source = '// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Voting {\r\n    struct Candidate {\r\n        uint id;\r\n        string name;\r\n        string party;\r\n        uint voteCount;\r\n    }\r\n\r\n    struct Voter {\r\n        string fullName;\r\n        bool isRegistered;\r\n        bool hasVoted;\r\n    }\r\n\r\n    mapping(uint => Candidate) public candidates;\r\n    mapping(address => Voter) public voters;\r\n    address[] public voterAddresses;\r\n    uint public candidatesCount;\r\n    uint public maxVotes;\r\n\r\n    address public admin;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, "Only admin can perform this action.");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        maxVotes = 2;\r\n        candidatesCount = 0;\r\n        admin = msg.sender; // Assign the deployer as admin\r\n    }\r\n\r\n    // Add a new candidate (admin-only)\r\n    function addCandidate(\r\n        string memory _name,\r\n        string memory _party\r\n    ) public onlyAdmin {\r\n        candidates[candidatesCount] = Candidate(\r\n            candidatesCount,\r\n            _name,\r\n            _party,\r\n            0\r\n        );\r\n        candidatesCount++;\r\n    }\r\n\r\n    function registerVoter(\r\n        address _voterAddress,\r\n        string memory _fullname\r\n    ) public {\r\n        require(\r\n            !voters[_voterAddress].isRegistered,\r\n            "Voter already registered."\r\n        );\r\n\r\n        voters[_voterAddress] = Voter({\r\n            fullName: _fullname,\r\n            isRegistered: true,\r\n            hasVoted: false\r\n        });\r\n\r\n        voterAddresses.push(_voterAddress);\r\n    }\r\n\r\n    // Authenticate voter by comparing password hashes\r\n    function authenticateVoter() public view returns (bool) {\r\n        require(voters[msg.sender].isRegistered, "Voter not registered.");\r\n        return true;\r\n    }\r\n\r\n    modifier onlyRegisteredVoter() {\r\n        require(\r\n            voters[msg.sender].isRegistered,\r\n            "You are not registered to vote."\r\n        );\r\n        _;\r\n    }\r\n\r\n    function vote(uint[] memory _candidateIds) public onlyRegisteredVoter {\r\n        require(!voters[msg.sender].hasVoted, "You have already voted.");\r\n        require(\r\n            _candidateIds.length <= maxVotes,\r\n            "Exceeded maximum number of votes."\r\n        );\r\n\r\n\r\n        // Ensure the voter has not already voted for these candidates\r\n        for (uint i = 0; i < _candidateIds.length; i++) {\r\n            uint candidateId = _candidateIds[i];\r\n            require(\r\n                candidateId >= 0 && candidateId < candidatesCount,\r\n                "Invalid candidate ID."\r\n            );\r\n            // Record the vote\r\n            candidates[candidateId].voteCount++;\r\n        }\r\n       voters[msg.sender].hasVoted = true; \r\n    }\r\n\r\n    // function hasAlreadyVoted(\r\n    //     uint[] memory votedCandidates,\r\n    //     uint candidateId\r\n    // ) internal pure returns (bool) {\r\n    //     for (uint i = 0; i < votedCandidates.length; i++) {\r\n    //         if (votedCandidates[i] == candidateId) {\r\n    //             return true;\r\n    //         }\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n    // function vote(string memory _username, uint _candidateId) public onlyAdmin {\r\n    //     require(voters[_username].isRegistered, "Voter not registered.");\r\n    //     require(!voters[_username].hasVoted, "Voter has already voted.");\r\n    //     require(\r\n    //         _candidateId > 0 && _candidateId <= candidatesCount,\r\n    //         "Invalid candidate ID."\r\n    //     );\r\n\r\n    //     voters[_username].hasVoted = true;\r\n    //     candidates[_candidateId].voteCount++;\r\n    // }\r\n\r\n    function getCandidate(\r\n        uint _candidateId\r\n    ) public view returns (uint, string memory, uint) {\r\n        Candidate memory candidate = candidates[_candidateId];\r\n        return (candidate.id, candidate.name, candidate.voteCount);\r\n    }\r\n\r\n    function getAllCandidates() public view returns (Candidate[] memory) {\r\n        Candidate[] memory allCandidates = new Candidate[](candidatesCount);\r\n        for (uint i = 0; i < candidatesCount; i++) {\r\n            allCandidates[i] = candidates[i];\r\n        }\r\n        return allCandidates;\r\n    }\r\n\r\n    // function getVoter(\r\n    //     string memory _username\r\n    // ) public view returns (string memory, string memory, bool, bool) {\r\n    //     Voter memory voter = voters[_username];\r\n    //     return (\r\n    //         voter.username,\r\n    //         voter.fullName,\r\n    //         voter.hasVoted,\r\n    //         voter.isRegistered\r\n    //     );\r\n    // }\r\n\r\n     function getVoter(address _voterAddress) public view returns (string memory, bool, bool) {\r\n        Voter memory voter = voters[_voterAddress];\r\n        return (voter.fullName, voter.isRegistered, voter.hasVoted);\r\n    }\r\n\r\n    function getAllVoters() public view returns (Voter[] memory) {\r\n        Voter[] memory allVoters = new Voter[](voterAddresses.length);\r\n        for (uint i = 0; i < voterAddresses.length; i++) {\r\n            allVoters[i] = voters[voterAddresses[i]];\r\n        }\r\n        return allVoters;\r\n    }\r\n}\r\n';
const sourcePath = "C:\\Users\\micha\\Desktop\\blockchain_assignment\\contracts\\Voting.sol";
const ast = {
  absolutePath: "project:/contracts/Voting.sol",
  exportedSymbols: {
    Voting: [
      406
    ]
  },
  id: 407,
  license: "MIT",
  nodeType: "SourceUnit",
  nodes: [
    {
      id: 41,
      literals: [
        "solidity",
        "^",
        "0.8",
        ".0"
      ],
      nodeType: "PragmaDirective",
      src: "33:23:1"
    },
    {
      abstract: false,
      baseContracts: [],
      contractDependencies: [],
      contractKind: "contract",
      fullyImplemented: true,
      id: 406,
      linearizedBaseContracts: [
        406
      ],
      name: "Voting",
      nodeType: "ContractDefinition",
      nodes: [
        {
          canonicalName: "Voting.Candidate",
          id: 50,
          members: [
            {
              constant: false,
              id: 43,
              mutability: "mutable",
              name: "id",
              nodeType: "VariableDeclaration",
              scope: 50,
              src: "111:7:1",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              },
              typeName: {
                id: 42,
                name: "uint",
                nodeType: "ElementaryTypeName",
                src: "111:4:1",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              visibility: "internal"
            },
            {
              constant: false,
              id: 45,
              mutability: "mutable",
              name: "name",
              nodeType: "VariableDeclaration",
              scope: 50,
              src: "129:11:1",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              },
              typeName: {
                id: 44,
                name: "string",
                nodeType: "ElementaryTypeName",
                src: "129:6:1",
                typeDescriptions: {
                  typeIdentifier: "t_string_storage_ptr",
                  typeString: "string"
                }
              },
              visibility: "internal"
            },
            {
              constant: false,
              id: 47,
              mutability: "mutable",
              name: "party",
              nodeType: "VariableDeclaration",
              scope: 50,
              src: "151:12:1",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              },
              typeName: {
                id: 46,
                name: "string",
                nodeType: "ElementaryTypeName",
                src: "151:6:1",
                typeDescriptions: {
                  typeIdentifier: "t_string_storage_ptr",
                  typeString: "string"
                }
              },
              visibility: "internal"
            },
            {
              constant: false,
              id: 49,
              mutability: "mutable",
              name: "voteCount",
              nodeType: "VariableDeclaration",
              scope: 50,
              src: "174:14:1",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              },
              typeName: {
                id: 48,
                name: "uint",
                nodeType: "ElementaryTypeName",
                src: "174:4:1",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                }
              },
              visibility: "internal"
            }
          ],
          name: "Candidate",
          nodeType: "StructDefinition",
          scope: 406,
          src: "83:113:1",
          visibility: "public"
        },
        {
          canonicalName: "Voting.Voter",
          id: 57,
          members: [
            {
              constant: false,
              id: 52,
              mutability: "mutable",
              name: "fullName",
              nodeType: "VariableDeclaration",
              scope: 57,
              src: "228:15:1",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_string_storage_ptr",
                typeString: "string"
              },
              typeName: {
                id: 51,
                name: "string",
                nodeType: "ElementaryTypeName",
                src: "228:6:1",
                typeDescriptions: {
                  typeIdentifier: "t_string_storage_ptr",
                  typeString: "string"
                }
              },
              visibility: "internal"
            },
            {
              constant: false,
              id: 54,
              mutability: "mutable",
              name: "isRegistered",
              nodeType: "VariableDeclaration",
              scope: 57,
              src: "254:17:1",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              typeName: {
                id: 53,
                name: "bool",
                nodeType: "ElementaryTypeName",
                src: "254:4:1",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              },
              visibility: "internal"
            },
            {
              constant: false,
              id: 56,
              mutability: "mutable",
              name: "hasVoted",
              nodeType: "VariableDeclaration",
              scope: 57,
              src: "282:13:1",
              stateVariable: false,
              storageLocation: "default",
              typeDescriptions: {
                typeIdentifier: "t_bool",
                typeString: "bool"
              },
              typeName: {
                id: 55,
                name: "bool",
                nodeType: "ElementaryTypeName",
                src: "282:4:1",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                }
              },
              visibility: "internal"
            }
          ],
          name: "Voter",
          nodeType: "StructDefinition",
          scope: 406,
          src: "204:99:1",
          visibility: "public"
        },
        {
          constant: false,
          functionSelector: "3477ee2e",
          id: 62,
          mutability: "mutable",
          name: "candidates",
          nodeType: "VariableDeclaration",
          scope: 406,
          src: "311:44:1",
          stateVariable: true,
          storageLocation: "default",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_Candidate_$50_storage_$",
            typeString: "mapping(uint256 => struct Voting.Candidate)"
          },
          typeName: {
            id: 61,
            keyType: {
              id: 58,
              name: "uint",
              nodeType: "ElementaryTypeName",
              src: "319:4:1",
              typeDescriptions: {
                typeIdentifier: "t_uint256",
                typeString: "uint256"
              }
            },
            nodeType: "Mapping",
            src: "311:26:1",
            typeDescriptions: {
              typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_Candidate_$50_storage_$",
              typeString: "mapping(uint256 => struct Voting.Candidate)"
            },
            valueType: {
              id: 60,
              nodeType: "UserDefinedTypeName",
              pathNode: {
                id: 59,
                name: "Candidate",
                nodeType: "IdentifierPath",
                referencedDeclaration: 50,
                src: "327:9:1"
              },
              referencedDeclaration: 50,
              src: "327:9:1",
              typeDescriptions: {
                typeIdentifier: "t_struct$_Candidate_$50_storage_ptr",
                typeString: "struct Voting.Candidate"
              }
            }
          },
          visibility: "public"
        },
        {
          constant: false,
          functionSelector: "a3ec138d",
          id: 67,
          mutability: "mutable",
          name: "voters",
          nodeType: "VariableDeclaration",
          scope: 406,
          src: "362:39:1",
          stateVariable: true,
          storageLocation: "default",
          typeDescriptions: {
            typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
            typeString: "mapping(address => struct Voting.Voter)"
          },
          typeName: {
            id: 66,
            keyType: {
              id: 63,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "370:7:1",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            nodeType: "Mapping",
            src: "362:25:1",
            typeDescriptions: {
              typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
              typeString: "mapping(address => struct Voting.Voter)"
            },
            valueType: {
              id: 65,
              nodeType: "UserDefinedTypeName",
              pathNode: {
                id: 64,
                name: "Voter",
                nodeType: "IdentifierPath",
                referencedDeclaration: 57,
                src: "381:5:1"
              },
              referencedDeclaration: 57,
              src: "381:5:1",
              typeDescriptions: {
                typeIdentifier: "t_struct$_Voter_$57_storage_ptr",
                typeString: "struct Voting.Voter"
              }
            }
          },
          visibility: "public"
        },
        {
          constant: false,
          functionSelector: "dd0e2373",
          id: 70,
          mutability: "mutable",
          name: "voterAddresses",
          nodeType: "VariableDeclaration",
          scope: 406,
          src: "408:31:1",
          stateVariable: true,
          storageLocation: "default",
          typeDescriptions: {
            typeIdentifier: "t_array$_t_address_$dyn_storage",
            typeString: "address[]"
          },
          typeName: {
            baseType: {
              id: 68,
              name: "address",
              nodeType: "ElementaryTypeName",
              src: "408:7:1",
              stateMutability: "nonpayable",
              typeDescriptions: {
                typeIdentifier: "t_address",
                typeString: "address"
              }
            },
            id: 69,
            nodeType: "ArrayTypeName",
            src: "408:9:1",
            typeDescriptions: {
              typeIdentifier: "t_array$_t_address_$dyn_storage_ptr",
              typeString: "address[]"
            }
          },
          visibility: "public"
        },
        {
          constant: false,
          functionSelector: "2d35a8a2",
          id: 72,
          mutability: "mutable",
          name: "candidatesCount",
          nodeType: "VariableDeclaration",
          scope: 406,
          src: "446:27:1",
          stateVariable: true,
          storageLocation: "default",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          },
          typeName: {
            id: 71,
            name: "uint",
            nodeType: "ElementaryTypeName",
            src: "446:4:1",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            }
          },
          visibility: "public"
        },
        {
          constant: false,
          functionSelector: "777c3acf",
          id: 74,
          mutability: "mutable",
          name: "maxVotes",
          nodeType: "VariableDeclaration",
          scope: 406,
          src: "480:20:1",
          stateVariable: true,
          storageLocation: "default",
          typeDescriptions: {
            typeIdentifier: "t_uint256",
            typeString: "uint256"
          },
          typeName: {
            id: 73,
            name: "uint",
            nodeType: "ElementaryTypeName",
            src: "480:4:1",
            typeDescriptions: {
              typeIdentifier: "t_uint256",
              typeString: "uint256"
            }
          },
          visibility: "public"
        },
        {
          constant: false,
          functionSelector: "f851a440",
          id: 76,
          mutability: "mutable",
          name: "admin",
          nodeType: "VariableDeclaration",
          scope: 406,
          src: "509:20:1",
          stateVariable: true,
          storageLocation: "default",
          typeDescriptions: {
            typeIdentifier: "t_address",
            typeString: "address"
          },
          typeName: {
            id: 75,
            name: "address",
            nodeType: "ElementaryTypeName",
            src: "509:7:1",
            stateMutability: "nonpayable",
            typeDescriptions: {
              typeIdentifier: "t_address",
              typeString: "address"
            }
          },
          visibility: "public"
        },
        {
          body: {
            id: 87,
            nodeType: "Block",
            src: "559:98:1",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      commonType: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      },
                      id: 82,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        expression: {
                          id: 79,
                          name: "msg",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 4294967281,
                          src: "578:3:1",
                          typeDescriptions: {
                            typeIdentifier: "t_magic_message",
                            typeString: "msg"
                          }
                        },
                        id: 80,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        memberName: "sender",
                        nodeType: "MemberAccess",
                        src: "578:10:1",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      nodeType: "BinaryOperation",
                      operator: "==",
                      rightExpression: {
                        id: 81,
                        name: "admin",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 76,
                        src: "592:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      src: "578:19:1",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    },
                    {
                      hexValue: "4f6e6c792061646d696e2063616e20706572666f726d207468697320616374696f6e2e",
                      id: 83,
                      isConstant: false,
                      isLValue: false,
                      isPure: true,
                      kind: "string",
                      lValueRequested: false,
                      nodeType: "Literal",
                      src: "599:37:1",
                      typeDescriptions: {
                        typeIdentifier: "t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991",
                        typeString: 'literal_string "Only admin can perform this action."'
                      },
                      value: "Only admin can perform this action."
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      {
                        typeIdentifier: "t_stringliteral_2e2e4234c1604b8a5ec37d764ceb257f859a269d3e56d82815b55db63efc7991",
                        typeString: 'literal_string "Only admin can perform this action."'
                      }
                    ],
                    id: 78,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [
                      4294967278,
                      4294967278
                    ],
                    referencedDeclaration: 4294967278,
                    src: "570:7:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 84,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "570:67:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 85,
                nodeType: "ExpressionStatement",
                src: "570:67:1"
              },
              {
                id: 86,
                nodeType: "PlaceholderStatement",
                src: "648:1:1"
              }
            ]
          },
          id: 88,
          name: "onlyAdmin",
          nodeType: "ModifierDefinition",
          parameters: {
            id: 77,
            nodeType: "ParameterList",
            parameters: [],
            src: "556:2:1"
          },
          src: "538:119:1",
          virtual: false,
          visibility: "internal"
        },
        {
          body: {
            id: 104,
            nodeType: "Block",
            src: "679:122:1",
            statements: [
              {
                expression: {
                  id: 93,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    id: 91,
                    name: "maxVotes",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 74,
                    src: "690:8:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    hexValue: "32",
                    id: 92,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "701:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_rational_2_by_1",
                      typeString: "int_const 2"
                    },
                    value: "2"
                  },
                  src: "690:12:1",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                id: 94,
                nodeType: "ExpressionStatement",
                src: "690:12:1"
              },
              {
                expression: {
                  id: 97,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    id: 95,
                    name: "candidatesCount",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 72,
                    src: "713:15:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    hexValue: "30",
                    id: 96,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "731:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  },
                  src: "713:19:1",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                id: 98,
                nodeType: "ExpressionStatement",
                src: "713:19:1"
              },
              {
                expression: {
                  id: 102,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    id: 99,
                    name: "admin",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 76,
                    src: "743:5:1",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    expression: {
                      id: 100,
                      name: "msg",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 4294967281,
                      src: "751:3:1",
                      typeDescriptions: {
                        typeIdentifier: "t_magic_message",
                        typeString: "msg"
                      }
                    },
                    id: 101,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "sender",
                    nodeType: "MemberAccess",
                    src: "751:10:1",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  src: "743:18:1",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                id: 103,
                nodeType: "ExpressionStatement",
                src: "743:18:1"
              }
            ]
          },
          id: 105,
          implemented: true,
          kind: "constructor",
          modifiers: [],
          name: "",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 89,
            nodeType: "ParameterList",
            parameters: [],
            src: "676:2:1"
          },
          returnParameters: {
            id: 90,
            nodeType: "ParameterList",
            parameters: [],
            src: "679:0:1"
          },
          scope: 406,
          src: "665:136:1",
          stateMutability: "nonpayable",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 128,
            nodeType: "Block",
            src: "957:184:1",
            statements: [
              {
                expression: {
                  id: 123,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    baseExpression: {
                      id: 114,
                      name: "candidates",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 62,
                      src: "968:10:1",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_Candidate_$50_storage_$",
                        typeString: "mapping(uint256 => struct Voting.Candidate storage ref)"
                      }
                    },
                    id: 116,
                    indexExpression: {
                      id: 115,
                      name: "candidatesCount",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 72,
                      src: "979:15:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: true,
                    nodeType: "IndexAccess",
                    src: "968:27:1",
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Candidate_$50_storage",
                      typeString: "struct Voting.Candidate storage ref"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    "arguments": [
                      {
                        id: 118,
                        name: "candidatesCount",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 72,
                        src: "1022:15:1",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      {
                        id: 119,
                        name: "_name",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 107,
                        src: "1052:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string memory"
                        }
                      },
                      {
                        id: 120,
                        name: "_party",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 109,
                        src: "1072:6:1",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string memory"
                        }
                      },
                      {
                        hexValue: "30",
                        id: 121,
                        isConstant: false,
                        isLValue: false,
                        isPure: true,
                        kind: "number",
                        lValueRequested: false,
                        nodeType: "Literal",
                        src: "1093:1:1",
                        typeDescriptions: {
                          typeIdentifier: "t_rational_0_by_1",
                          typeString: "int_const 0"
                        },
                        value: "0"
                      }
                    ],
                    expression: {
                      argumentTypes: [
                        {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        },
                        {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string memory"
                        },
                        {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string memory"
                        },
                        {
                          typeIdentifier: "t_rational_0_by_1",
                          typeString: "int_const 0"
                        }
                      ],
                      id: 117,
                      name: "Candidate",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 50,
                      src: "998:9:1",
                      typeDescriptions: {
                        typeIdentifier: "t_type$_t_struct$_Candidate_$50_storage_ptr_$",
                        typeString: "type(struct Voting.Candidate storage pointer)"
                      }
                    },
                    id: 122,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    kind: "structConstructorCall",
                    lValueRequested: false,
                    names: [],
                    nodeType: "FunctionCall",
                    src: "998:107:1",
                    tryCall: false,
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Candidate_$50_memory_ptr",
                      typeString: "struct Voting.Candidate memory"
                    }
                  },
                  src: "968:137:1",
                  typeDescriptions: {
                    typeIdentifier: "t_struct$_Candidate_$50_storage",
                    typeString: "struct Voting.Candidate storage ref"
                  }
                },
                id: 124,
                nodeType: "ExpressionStatement",
                src: "968:137:1"
              },
              {
                expression: {
                  id: 126,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "UnaryOperation",
                  operator: "++",
                  prefix: false,
                  src: "1116:17:1",
                  subExpression: {
                    id: 125,
                    name: "candidatesCount",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 72,
                    src: "1116:15:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                id: 127,
                nodeType: "ExpressionStatement",
                src: "1116:17:1"
              }
            ]
          },
          functionSelector: "26541b56",
          id: 129,
          implemented: true,
          kind: "function",
          modifiers: [
            {
              id: 112,
              modifierName: {
                id: 111,
                name: "onlyAdmin",
                nodeType: "IdentifierPath",
                referencedDeclaration: 88,
                src: "947:9:1"
              },
              nodeType: "ModifierInvocation",
              src: "947:9:1"
            }
          ],
          name: "addCandidate",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 110,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 107,
                mutability: "mutable",
                name: "_name",
                nodeType: "VariableDeclaration",
                scope: 129,
                src: "882:19:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string"
                },
                typeName: {
                  id: 106,
                  name: "string",
                  nodeType: "ElementaryTypeName",
                  src: "882:6:1",
                  typeDescriptions: {
                    typeIdentifier: "t_string_storage_ptr",
                    typeString: "string"
                  }
                },
                visibility: "internal"
              },
              {
                constant: false,
                id: 109,
                mutability: "mutable",
                name: "_party",
                nodeType: "VariableDeclaration",
                scope: 129,
                src: "912:20:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string"
                },
                typeName: {
                  id: 108,
                  name: "string",
                  nodeType: "ElementaryTypeName",
                  src: "912:6:1",
                  typeDescriptions: {
                    typeIdentifier: "t_string_storage_ptr",
                    typeString: "string"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "871:68:1"
          },
          returnParameters: {
            id: 113,
            nodeType: "ParameterList",
            parameters: [],
            src: "957:0:1"
          },
          scope: 406,
          src: "850:291:1",
          stateMutability: "nonpayable",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 161,
            nodeType: "Block",
            src: "1252:328:1",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      id: 141,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "UnaryOperation",
                      operator: "!",
                      prefix: true,
                      src: "1285:35:1",
                      subExpression: {
                        expression: {
                          baseExpression: {
                            id: 137,
                            name: "voters",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 67,
                            src: "1286:6:1",
                            typeDescriptions: {
                              typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                              typeString: "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          id: 139,
                          indexExpression: {
                            id: 138,
                            name: "_voterAddress",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 131,
                            src: "1293:13:1",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: false,
                          nodeType: "IndexAccess",
                          src: "1286:21:1",
                          typeDescriptions: {
                            typeIdentifier: "t_struct$_Voter_$57_storage",
                            typeString: "struct Voting.Voter storage ref"
                          }
                        },
                        id: 140,
                        isConstant: false,
                        isLValue: true,
                        isPure: false,
                        lValueRequested: false,
                        memberName: "isRegistered",
                        nodeType: "MemberAccess",
                        referencedDeclaration: 54,
                        src: "1286:34:1",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    },
                    {
                      hexValue: "566f74657220616c726561647920726567697374657265642e",
                      id: 142,
                      isConstant: false,
                      isLValue: false,
                      isPure: true,
                      kind: "string",
                      lValueRequested: false,
                      nodeType: "Literal",
                      src: "1335:27:1",
                      typeDescriptions: {
                        typeIdentifier: "t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c",
                        typeString: 'literal_string "Voter already registered."'
                      },
                      value: "Voter already registered."
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      {
                        typeIdentifier: "t_stringliteral_2dec434e65e07c500a6f602c22443135b41ed88b8555ad1a06c0774a6639c39c",
                        typeString: 'literal_string "Voter already registered."'
                      }
                    ],
                    id: 136,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [
                      4294967278,
                      4294967278
                    ],
                    referencedDeclaration: 4294967278,
                    src: "1263:7:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 143,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1263:110:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 144,
                nodeType: "ExpressionStatement",
                src: "1263:110:1"
              },
              {
                expression: {
                  id: 153,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    baseExpression: {
                      id: 145,
                      name: "voters",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 67,
                      src: "1386:6:1",
                      typeDescriptions: {
                        typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                        typeString: "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    id: 147,
                    indexExpression: {
                      id: 146,
                      name: "_voterAddress",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 131,
                      src: "1393:13:1",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      }
                    },
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: true,
                    nodeType: "IndexAccess",
                    src: "1386:21:1",
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Voter_$57_storage",
                      typeString: "struct Voting.Voter storage ref"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    "arguments": [
                      {
                        id: 149,
                        name: "_fullname",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 133,
                        src: "1441:9:1",
                        typeDescriptions: {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string memory"
                        }
                      },
                      {
                        hexValue: "74727565",
                        id: 150,
                        isConstant: false,
                        isLValue: false,
                        isPure: true,
                        kind: "bool",
                        lValueRequested: false,
                        nodeType: "Literal",
                        src: "1479:4:1",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        },
                        value: "true"
                      },
                      {
                        hexValue: "66616c7365",
                        id: 151,
                        isConstant: false,
                        isLValue: false,
                        isPure: true,
                        kind: "bool",
                        lValueRequested: false,
                        nodeType: "Literal",
                        src: "1508:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        },
                        value: "false"
                      }
                    ],
                    expression: {
                      argumentTypes: [
                        {
                          typeIdentifier: "t_string_memory_ptr",
                          typeString: "string memory"
                        },
                        {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        },
                        {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      ],
                      id: 148,
                      name: "Voter",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 57,
                      src: "1410:5:1",
                      typeDescriptions: {
                        typeIdentifier: "t_type$_t_struct$_Voter_$57_storage_ptr_$",
                        typeString: "type(struct Voting.Voter storage pointer)"
                      }
                    },
                    id: 152,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    kind: "structConstructorCall",
                    lValueRequested: false,
                    names: [
                      "fullName",
                      "isRegistered",
                      "hasVoted"
                    ],
                    nodeType: "FunctionCall",
                    src: "1410:115:1",
                    tryCall: false,
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Voter_$57_memory_ptr",
                      typeString: "struct Voting.Voter memory"
                    }
                  },
                  src: "1386:139:1",
                  typeDescriptions: {
                    typeIdentifier: "t_struct$_Voter_$57_storage",
                    typeString: "struct Voting.Voter storage ref"
                  }
                },
                id: 154,
                nodeType: "ExpressionStatement",
                src: "1386:139:1"
              },
              {
                expression: {
                  "arguments": [
                    {
                      id: 158,
                      name: "_voterAddress",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 131,
                      src: "1558:13:1",
                      typeDescriptions: {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      }
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_address",
                        typeString: "address"
                      }
                    ],
                    expression: {
                      id: 155,
                      name: "voterAddresses",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 70,
                      src: "1538:14:1",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_address_$dyn_storage",
                        typeString: "address[] storage ref"
                      }
                    },
                    id: 157,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "push",
                    nodeType: "MemberAccess",
                    src: "1538:19:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_arraypush_nonpayable$_t_address_$returns$__$",
                      typeString: "function (address)"
                    }
                  },
                  id: 159,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1538:34:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 160,
                nodeType: "ExpressionStatement",
                src: "1538:34:1"
              }
            ]
          },
          functionSelector: "ebbb4f84",
          id: 162,
          implemented: true,
          kind: "function",
          modifiers: [],
          name: "registerVoter",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 134,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 131,
                mutability: "mutable",
                name: "_voterAddress",
                nodeType: "VariableDeclaration",
                scope: 162,
                src: "1182:21:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                typeName: {
                  id: 130,
                  name: "address",
                  nodeType: "ElementaryTypeName",
                  src: "1182:7:1",
                  stateMutability: "nonpayable",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                visibility: "internal"
              },
              {
                constant: false,
                id: 133,
                mutability: "mutable",
                name: "_fullname",
                nodeType: "VariableDeclaration",
                scope: 162,
                src: "1214:23:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string"
                },
                typeName: {
                  id: 132,
                  name: "string",
                  nodeType: "ElementaryTypeName",
                  src: "1214:6:1",
                  typeDescriptions: {
                    typeIdentifier: "t_string_storage_ptr",
                    typeString: "string"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "1171:73:1"
          },
          returnParameters: {
            id: 135,
            nodeType: "ParameterList",
            parameters: [],
            src: "1252:0:1"
          },
          scope: 406,
          src: "1149:431:1",
          stateMutability: "nonpayable",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 178,
            nodeType: "Block",
            src: "1700:106:1",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      expression: {
                        baseExpression: {
                          id: 168,
                          name: "voters",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 67,
                          src: "1719:6:1",
                          typeDescriptions: {
                            typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                            typeString: "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        id: 171,
                        indexExpression: {
                          expression: {
                            id: 169,
                            name: "msg",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 4294967281,
                            src: "1726:3:1",
                            typeDescriptions: {
                              typeIdentifier: "t_magic_message",
                              typeString: "msg"
                            }
                          },
                          id: 170,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "sender",
                          nodeType: "MemberAccess",
                          src: "1726:10:1",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        isConstant: false,
                        isLValue: true,
                        isPure: false,
                        lValueRequested: false,
                        nodeType: "IndexAccess",
                        src: "1719:18:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_storage",
                          typeString: "struct Voting.Voter storage ref"
                        }
                      },
                      id: 172,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "isRegistered",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 54,
                      src: "1719:31:1",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    },
                    {
                      hexValue: "566f746572206e6f7420726567697374657265642e",
                      id: 173,
                      isConstant: false,
                      isLValue: false,
                      isPure: true,
                      kind: "string",
                      lValueRequested: false,
                      nodeType: "Literal",
                      src: "1752:23:1",
                      typeDescriptions: {
                        typeIdentifier: "t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346",
                        typeString: 'literal_string "Voter not registered."'
                      },
                      value: "Voter not registered."
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      {
                        typeIdentifier: "t_stringliteral_ccd3d1582bf420c067a2a2d2774cdd38c15905c67b1d4d65b5ff35e5d65fc346",
                        typeString: 'literal_string "Voter not registered."'
                      }
                    ],
                    id: 167,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [
                      4294967278,
                      4294967278
                    ],
                    referencedDeclaration: 4294967278,
                    src: "1711:7:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 174,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1711:65:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 175,
                nodeType: "ExpressionStatement",
                src: "1711:65:1"
              },
              {
                expression: {
                  hexValue: "74727565",
                  id: 176,
                  isConstant: false,
                  isLValue: false,
                  isPure: true,
                  kind: "bool",
                  lValueRequested: false,
                  nodeType: "Literal",
                  src: "1794:4:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  },
                  value: "true"
                },
                functionReturnParameters: 166,
                id: 177,
                nodeType: "Return",
                src: "1787:11:1"
              }
            ]
          },
          functionSelector: "29db6b51",
          id: 179,
          implemented: true,
          kind: "function",
          modifiers: [],
          name: "authenticateVoter",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 163,
            nodeType: "ParameterList",
            parameters: [],
            src: "1670:2:1"
          },
          returnParameters: {
            id: 166,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 165,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 179,
                src: "1694:4:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                },
                typeName: {
                  id: 164,
                  name: "bool",
                  nodeType: "ElementaryTypeName",
                  src: "1694:4:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "1693:6:1"
          },
          scope: 406,
          src: "1644:162:1",
          stateMutability: "view",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 191,
            nodeType: "Block",
            src: "1845:143:1",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      expression: {
                        baseExpression: {
                          id: 182,
                          name: "voters",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 67,
                          src: "1878:6:1",
                          typeDescriptions: {
                            typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                            typeString: "mapping(address => struct Voting.Voter storage ref)"
                          }
                        },
                        id: 185,
                        indexExpression: {
                          expression: {
                            id: 183,
                            name: "msg",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 4294967281,
                            src: "1885:3:1",
                            typeDescriptions: {
                              typeIdentifier: "t_magic_message",
                              typeString: "msg"
                            }
                          },
                          id: 184,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          lValueRequested: false,
                          memberName: "sender",
                          nodeType: "MemberAccess",
                          src: "1885:10:1",
                          typeDescriptions: {
                            typeIdentifier: "t_address",
                            typeString: "address"
                          }
                        },
                        isConstant: false,
                        isLValue: true,
                        isPure: false,
                        lValueRequested: false,
                        nodeType: "IndexAccess",
                        src: "1878:18:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_storage",
                          typeString: "struct Voting.Voter storage ref"
                        }
                      },
                      id: 186,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "isRegistered",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 54,
                      src: "1878:31:1",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    },
                    {
                      hexValue: "596f7520617265206e6f74207265676973746572656420746f20766f74652e",
                      id: 187,
                      isConstant: false,
                      isLValue: false,
                      isPure: true,
                      kind: "string",
                      lValueRequested: false,
                      nodeType: "Literal",
                      src: "1924:33:1",
                      typeDescriptions: {
                        typeIdentifier: "t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473",
                        typeString: 'literal_string "You are not registered to vote."'
                      },
                      value: "You are not registered to vote."
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      {
                        typeIdentifier: "t_stringliteral_57d3589d93850f3cbf9658f8cf7d55be2e67fc493077202d86b3d3bae774a473",
                        typeString: 'literal_string "You are not registered to vote."'
                      }
                    ],
                    id: 181,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [
                      4294967278,
                      4294967278
                    ],
                    referencedDeclaration: 4294967278,
                    src: "1856:7:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 188,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "1856:112:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 189,
                nodeType: "ExpressionStatement",
                src: "1856:112:1"
              },
              {
                id: 190,
                nodeType: "PlaceholderStatement",
                src: "1979:1:1"
              }
            ]
          },
          id: 192,
          name: "onlyRegisteredVoter",
          nodeType: "ModifierDefinition",
          parameters: {
            id: 180,
            nodeType: "ParameterList",
            parameters: [],
            src: "1842:2:1"
          },
          src: "1814:174:1",
          virtual: false,
          visibility: "internal"
        },
        {
          body: {
            id: 262,
            nodeType: "Block",
            src: "2066:679:1",
            statements: [
              {
                expression: {
                  "arguments": [
                    {
                      id: 206,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "UnaryOperation",
                      operator: "!",
                      prefix: true,
                      src: "2085:28:1",
                      subExpression: {
                        expression: {
                          baseExpression: {
                            id: 201,
                            name: "voters",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 67,
                            src: "2086:6:1",
                            typeDescriptions: {
                              typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                              typeString: "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          id: 204,
                          indexExpression: {
                            expression: {
                              id: 202,
                              name: "msg",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 4294967281,
                              src: "2093:3:1",
                              typeDescriptions: {
                                typeIdentifier: "t_magic_message",
                                typeString: "msg"
                              }
                            },
                            id: 203,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberName: "sender",
                            nodeType: "MemberAccess",
                            src: "2093:10:1",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: false,
                          nodeType: "IndexAccess",
                          src: "2086:18:1",
                          typeDescriptions: {
                            typeIdentifier: "t_struct$_Voter_$57_storage",
                            typeString: "struct Voting.Voter storage ref"
                          }
                        },
                        id: 205,
                        isConstant: false,
                        isLValue: true,
                        isPure: false,
                        lValueRequested: false,
                        memberName: "hasVoted",
                        nodeType: "MemberAccess",
                        referencedDeclaration: 56,
                        src: "2086:27:1",
                        typeDescriptions: {
                          typeIdentifier: "t_bool",
                          typeString: "bool"
                        }
                      },
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    },
                    {
                      hexValue: "596f75206861766520616c726561647920766f7465642e",
                      id: 207,
                      isConstant: false,
                      isLValue: false,
                      isPure: true,
                      kind: "string",
                      lValueRequested: false,
                      nodeType: "Literal",
                      src: "2115:25:1",
                      typeDescriptions: {
                        typeIdentifier: "t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863",
                        typeString: 'literal_string "You have already voted."'
                      },
                      value: "You have already voted."
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      {
                        typeIdentifier: "t_stringliteral_1814df8007c14967d1dedfd016a222fa9f9d3d95d881e38c6e569314cca84863",
                        typeString: 'literal_string "You have already voted."'
                      }
                    ],
                    id: 200,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [
                      4294967278,
                      4294967278
                    ],
                    referencedDeclaration: 4294967278,
                    src: "2077:7:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 208,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2077:64:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 209,
                nodeType: "ExpressionStatement",
                src: "2077:64:1"
              },
              {
                expression: {
                  "arguments": [
                    {
                      commonType: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      id: 214,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        expression: {
                          id: 211,
                          name: "_candidateIds",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 195,
                          src: "2174:13:1",
                          typeDescriptions: {
                            typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
                            typeString: "uint256[] memory"
                          }
                        },
                        id: 212,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        memberName: "length",
                        nodeType: "MemberAccess",
                        src: "2174:20:1",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      nodeType: "BinaryOperation",
                      operator: "<=",
                      rightExpression: {
                        id: 213,
                        name: "maxVotes",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 74,
                        src: "2198:8:1",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      src: "2174:32:1",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    },
                    {
                      hexValue: "4578636565646564206d6178696d756d206e756d626572206f6620766f7465732e",
                      id: 215,
                      isConstant: false,
                      isLValue: false,
                      isPure: true,
                      kind: "string",
                      lValueRequested: false,
                      nodeType: "Literal",
                      src: "2221:35:1",
                      typeDescriptions: {
                        typeIdentifier: "t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491",
                        typeString: 'literal_string "Exceeded maximum number of votes."'
                      },
                      value: "Exceeded maximum number of votes."
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      },
                      {
                        typeIdentifier: "t_stringliteral_8b4e7d45de4b14a313e91b34d068c4ce3357c25d012919038c1da1a0b00b6491",
                        typeString: 'literal_string "Exceeded maximum number of votes."'
                      }
                    ],
                    id: 210,
                    name: "require",
                    nodeType: "Identifier",
                    overloadedDeclarations: [
                      4294967278,
                      4294967278
                    ],
                    referencedDeclaration: 4294967278,
                    src: "2152:7:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                      typeString: "function (bool,string memory) pure"
                    }
                  },
                  id: 216,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "2152:115:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$__$",
                    typeString: "tuple()"
                  }
                },
                id: 217,
                nodeType: "ExpressionStatement",
                src: "2152:115:1"
              },
              {
                body: {
                  id: 252,
                  nodeType: "Block",
                  src: "2402:291:1",
                  statements: [
                    {
                      assignments: [
                        230
                      ],
                      declarations: [
                        {
                          constant: false,
                          id: 230,
                          mutability: "mutable",
                          name: "candidateId",
                          nodeType: "VariableDeclaration",
                          scope: 252,
                          src: "2417:16:1",
                          stateVariable: false,
                          storageLocation: "default",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256"
                          },
                          typeName: {
                            id: 229,
                            name: "uint",
                            nodeType: "ElementaryTypeName",
                            src: "2417:4:1",
                            typeDescriptions: {
                              typeIdentifier: "t_uint256",
                              typeString: "uint256"
                            }
                          },
                          visibility: "internal"
                        }
                      ],
                      id: 234,
                      initialValue: {
                        baseExpression: {
                          id: 231,
                          name: "_candidateIds",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 195,
                          src: "2436:13:1",
                          typeDescriptions: {
                            typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
                            typeString: "uint256[] memory"
                          }
                        },
                        id: 233,
                        indexExpression: {
                          id: 232,
                          name: "i",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 219,
                          src: "2450:1:1",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256"
                          }
                        },
                        isConstant: false,
                        isLValue: true,
                        isPure: false,
                        lValueRequested: false,
                        nodeType: "IndexAccess",
                        src: "2436:16:1",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      nodeType: "VariableDeclarationStatement",
                      src: "2417:35:1"
                    },
                    {
                      expression: {
                        "arguments": [
                          {
                            commonType: {
                              typeIdentifier: "t_bool",
                              typeString: "bool"
                            },
                            id: 242,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            leftExpression: {
                              commonType: {
                                typeIdentifier: "t_uint256",
                                typeString: "uint256"
                              },
                              id: 238,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              leftExpression: {
                                id: 236,
                                name: "candidateId",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 230,
                                src: "2493:11:1",
                                typeDescriptions: {
                                  typeIdentifier: "t_uint256",
                                  typeString: "uint256"
                                }
                              },
                              nodeType: "BinaryOperation",
                              operator: ">=",
                              rightExpression: {
                                hexValue: "30",
                                id: 237,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: "number",
                                lValueRequested: false,
                                nodeType: "Literal",
                                src: "2508:1:1",
                                typeDescriptions: {
                                  typeIdentifier: "t_rational_0_by_1",
                                  typeString: "int_const 0"
                                },
                                value: "0"
                              },
                              src: "2493:16:1",
                              typeDescriptions: {
                                typeIdentifier: "t_bool",
                                typeString: "bool"
                              }
                            },
                            nodeType: "BinaryOperation",
                            operator: "&&",
                            rightExpression: {
                              commonType: {
                                typeIdentifier: "t_uint256",
                                typeString: "uint256"
                              },
                              id: 241,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              leftExpression: {
                                id: 239,
                                name: "candidateId",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 230,
                                src: "2513:11:1",
                                typeDescriptions: {
                                  typeIdentifier: "t_uint256",
                                  typeString: "uint256"
                                }
                              },
                              nodeType: "BinaryOperation",
                              operator: "<",
                              rightExpression: {
                                id: 240,
                                name: "candidatesCount",
                                nodeType: "Identifier",
                                overloadedDeclarations: [],
                                referencedDeclaration: 72,
                                src: "2527:15:1",
                                typeDescriptions: {
                                  typeIdentifier: "t_uint256",
                                  typeString: "uint256"
                                }
                              },
                              src: "2513:29:1",
                              typeDescriptions: {
                                typeIdentifier: "t_bool",
                                typeString: "bool"
                              }
                            },
                            src: "2493:49:1",
                            typeDescriptions: {
                              typeIdentifier: "t_bool",
                              typeString: "bool"
                            }
                          },
                          {
                            hexValue: "496e76616c69642063616e6469646174652049442e",
                            id: 243,
                            isConstant: false,
                            isLValue: false,
                            isPure: true,
                            kind: "string",
                            lValueRequested: false,
                            nodeType: "Literal",
                            src: "2561:23:1",
                            typeDescriptions: {
                              typeIdentifier: "t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4",
                              typeString: 'literal_string "Invalid candidate ID."'
                            },
                            value: "Invalid candidate ID."
                          }
                        ],
                        expression: {
                          argumentTypes: [
                            {
                              typeIdentifier: "t_bool",
                              typeString: "bool"
                            },
                            {
                              typeIdentifier: "t_stringliteral_fc2746acb38539d6904cf734f9403b7cf27f687e23fed688a9f6b062ce05b1e4",
                              typeString: 'literal_string "Invalid candidate ID."'
                            }
                          ],
                          id: 235,
                          name: "require",
                          nodeType: "Identifier",
                          overloadedDeclarations: [
                            4294967278,
                            4294967278
                          ],
                          referencedDeclaration: 4294967278,
                          src: "2467:7:1",
                          typeDescriptions: {
                            typeIdentifier: "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            typeString: "function (bool,string memory) pure"
                          }
                        },
                        id: 244,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        kind: "functionCall",
                        lValueRequested: false,
                        names: [],
                        nodeType: "FunctionCall",
                        src: "2467:132:1",
                        tryCall: false,
                        typeDescriptions: {
                          typeIdentifier: "t_tuple$__$",
                          typeString: "tuple()"
                        }
                      },
                      id: 245,
                      nodeType: "ExpressionStatement",
                      src: "2467:132:1"
                    },
                    {
                      expression: {
                        id: 250,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        nodeType: "UnaryOperation",
                        operator: "++",
                        prefix: false,
                        src: "2646:35:1",
                        subExpression: {
                          expression: {
                            baseExpression: {
                              id: 246,
                              name: "candidates",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 62,
                              src: "2646:10:1",
                              typeDescriptions: {
                                typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_Candidate_$50_storage_$",
                                typeString: "mapping(uint256 => struct Voting.Candidate storage ref)"
                              }
                            },
                            id: 248,
                            indexExpression: {
                              id: 247,
                              name: "candidateId",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 230,
                              src: "2657:11:1",
                              typeDescriptions: {
                                typeIdentifier: "t_uint256",
                                typeString: "uint256"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "2646:23:1",
                            typeDescriptions: {
                              typeIdentifier: "t_struct$_Candidate_$50_storage",
                              typeString: "struct Voting.Candidate storage ref"
                            }
                          },
                          id: 249,
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: true,
                          memberName: "voteCount",
                          nodeType: "MemberAccess",
                          referencedDeclaration: 49,
                          src: "2646:33:1",
                          typeDescriptions: {
                            typeIdentifier: "t_uint256",
                            typeString: "uint256"
                          }
                        },
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      id: 251,
                      nodeType: "ExpressionStatement",
                      src: "2646:35:1"
                    }
                  ]
                },
                condition: {
                  commonType: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  },
                  id: 225,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftExpression: {
                    id: 222,
                    name: "i",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 219,
                    src: "2371:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  nodeType: "BinaryOperation",
                  operator: "<",
                  rightExpression: {
                    expression: {
                      id: 223,
                      name: "_candidateIds",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 195,
                      src: "2375:13:1",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
                        typeString: "uint256[] memory"
                      }
                    },
                    id: 224,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "length",
                    nodeType: "MemberAccess",
                    src: "2375:20:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  src: "2371:24:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                id: 253,
                initializationExpression: {
                  assignments: [
                    219
                  ],
                  declarations: [
                    {
                      constant: false,
                      id: 219,
                      mutability: "mutable",
                      name: "i",
                      nodeType: "VariableDeclaration",
                      scope: 253,
                      src: "2359:6:1",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 218,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "2359:4:1",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      visibility: "internal"
                    }
                  ],
                  id: 221,
                  initialValue: {
                    hexValue: "30",
                    id: 220,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "2368:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  },
                  nodeType: "VariableDeclarationStatement",
                  src: "2359:10:1"
                },
                loopExpression: {
                  expression: {
                    id: 227,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "UnaryOperation",
                    operator: "++",
                    prefix: false,
                    src: "2397:3:1",
                    subExpression: {
                      id: 226,
                      name: "i",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 219,
                      src: "2397:1:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  id: 228,
                  nodeType: "ExpressionStatement",
                  src: "2397:3:1"
                },
                nodeType: "ForStatement",
                src: "2354:339:1"
              },
              {
                expression: {
                  id: 260,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftHandSide: {
                    expression: {
                      baseExpression: {
                        id: 254,
                        name: "voters",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 67,
                        src: "2702:6:1",
                        typeDescriptions: {
                          typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                          typeString: "mapping(address => struct Voting.Voter storage ref)"
                        }
                      },
                      id: 257,
                      indexExpression: {
                        expression: {
                          id: 255,
                          name: "msg",
                          nodeType: "Identifier",
                          overloadedDeclarations: [],
                          referencedDeclaration: 4294967281,
                          src: "2709:3:1",
                          typeDescriptions: {
                            typeIdentifier: "t_magic_message",
                            typeString: "msg"
                          }
                        },
                        id: 256,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        memberName: "sender",
                        nodeType: "MemberAccess",
                        src: "2709:10:1",
                        typeDescriptions: {
                          typeIdentifier: "t_address",
                          typeString: "address"
                        }
                      },
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      nodeType: "IndexAccess",
                      src: "2702:18:1",
                      typeDescriptions: {
                        typeIdentifier: "t_struct$_Voter_$57_storage",
                        typeString: "struct Voting.Voter storage ref"
                      }
                    },
                    id: 258,
                    isConstant: false,
                    isLValue: true,
                    isPure: false,
                    lValueRequested: true,
                    memberName: "hasVoted",
                    nodeType: "MemberAccess",
                    referencedDeclaration: 56,
                    src: "2702:27:1",
                    typeDescriptions: {
                      typeIdentifier: "t_bool",
                      typeString: "bool"
                    }
                  },
                  nodeType: "Assignment",
                  operator: "=",
                  rightHandSide: {
                    hexValue: "74727565",
                    id: 259,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "bool",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "2732:4:1",
                    typeDescriptions: {
                      typeIdentifier: "t_bool",
                      typeString: "bool"
                    },
                    value: "true"
                  },
                  src: "2702:34:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                id: 261,
                nodeType: "ExpressionStatement",
                src: "2702:34:1"
              }
            ]
          },
          functionSelector: "ce11f2bb",
          id: 263,
          implemented: true,
          kind: "function",
          modifiers: [
            {
              id: 198,
              modifierName: {
                id: 197,
                name: "onlyRegisteredVoter",
                nodeType: "IdentifierPath",
                referencedDeclaration: 192,
                src: "2046:19:1"
              },
              nodeType: "ModifierInvocation",
              src: "2046:19:1"
            }
          ],
          name: "vote",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 196,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 195,
                mutability: "mutable",
                name: "_candidateIds",
                nodeType: "VariableDeclaration",
                scope: 263,
                src: "2010:27:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_array$_t_uint256_$dyn_memory_ptr",
                  typeString: "uint256[]"
                },
                typeName: {
                  baseType: {
                    id: 193,
                    name: "uint",
                    nodeType: "ElementaryTypeName",
                    src: "2010:4:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  id: 194,
                  nodeType: "ArrayTypeName",
                  src: "2010:6:1",
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_uint256_$dyn_storage_ptr",
                    typeString: "uint256[]"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "2009:29:1"
          },
          returnParameters: {
            id: 199,
            nodeType: "ParameterList",
            parameters: [],
            src: "2066:0:1"
          },
          scope: 406,
          src: "1996:749:1",
          stateMutability: "nonpayable",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 289,
            nodeType: "Block",
            src: "3726:141:1",
            statements: [
              {
                assignments: [
                  276
                ],
                declarations: [
                  {
                    constant: false,
                    id: 276,
                    mutability: "mutable",
                    name: "candidate",
                    nodeType: "VariableDeclaration",
                    scope: 289,
                    src: "3737:26:1",
                    stateVariable: false,
                    storageLocation: "memory",
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Candidate_$50_memory_ptr",
                      typeString: "struct Voting.Candidate"
                    },
                    typeName: {
                      id: 275,
                      nodeType: "UserDefinedTypeName",
                      pathNode: {
                        id: 274,
                        name: "Candidate",
                        nodeType: "IdentifierPath",
                        referencedDeclaration: 50,
                        src: "3737:9:1"
                      },
                      referencedDeclaration: 50,
                      src: "3737:9:1",
                      typeDescriptions: {
                        typeIdentifier: "t_struct$_Candidate_$50_storage_ptr",
                        typeString: "struct Voting.Candidate"
                      }
                    },
                    visibility: "internal"
                  }
                ],
                id: 280,
                initialValue: {
                  baseExpression: {
                    id: 277,
                    name: "candidates",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 62,
                    src: "3766:10:1",
                    typeDescriptions: {
                      typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_Candidate_$50_storage_$",
                      typeString: "mapping(uint256 => struct Voting.Candidate storage ref)"
                    }
                  },
                  id: 279,
                  indexExpression: {
                    id: 278,
                    name: "_candidateId",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 265,
                    src: "3777:12:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  isConstant: false,
                  isLValue: true,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "IndexAccess",
                  src: "3766:24:1",
                  typeDescriptions: {
                    typeIdentifier: "t_struct$_Candidate_$50_storage",
                    typeString: "struct Voting.Candidate storage ref"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "3737:53:1"
              },
              {
                expression: {
                  components: [
                    {
                      expression: {
                        id: 281,
                        name: "candidate",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 276,
                        src: "3809:9:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Candidate_$50_memory_ptr",
                          typeString: "struct Voting.Candidate memory"
                        }
                      },
                      id: 282,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "id",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 43,
                      src: "3809:12:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    {
                      expression: {
                        id: 283,
                        name: "candidate",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 276,
                        src: "3823:9:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Candidate_$50_memory_ptr",
                          typeString: "struct Voting.Candidate memory"
                        }
                      },
                      id: 284,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "name",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 45,
                      src: "3823:14:1",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string memory"
                      }
                    },
                    {
                      expression: {
                        id: 285,
                        name: "candidate",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 276,
                        src: "3839:9:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Candidate_$50_memory_ptr",
                          typeString: "struct Voting.Candidate memory"
                        }
                      },
                      id: 286,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "voteCount",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 49,
                      src: "3839:19:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    }
                  ],
                  id: 287,
                  isConstant: false,
                  isInlineArray: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "TupleExpression",
                  src: "3808:51:1",
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$",
                    typeString: "tuple(uint256,string memory,uint256)"
                  }
                },
                functionReturnParameters: 273,
                id: 288,
                nodeType: "Return",
                src: "3801:58:1"
              }
            ]
          },
          functionSelector: "35b8e820",
          id: 290,
          implemented: true,
          kind: "function",
          modifiers: [],
          name: "getCandidate",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 266,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 265,
                mutability: "mutable",
                name: "_candidateId",
                nodeType: "VariableDeclaration",
                scope: 290,
                src: "3653:17:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                },
                typeName: {
                  id: 264,
                  name: "uint",
                  nodeType: "ElementaryTypeName",
                  src: "3653:4:1",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "3642:35:1"
          },
          returnParameters: {
            id: 273,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 268,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 290,
                src: "3699:4:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                },
                typeName: {
                  id: 267,
                  name: "uint",
                  nodeType: "ElementaryTypeName",
                  src: "3699:4:1",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                visibility: "internal"
              },
              {
                constant: false,
                id: 270,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 290,
                src: "3705:13:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string"
                },
                typeName: {
                  id: 269,
                  name: "string",
                  nodeType: "ElementaryTypeName",
                  src: "3705:6:1",
                  typeDescriptions: {
                    typeIdentifier: "t_string_storage_ptr",
                    typeString: "string"
                  }
                },
                visibility: "internal"
              },
              {
                constant: false,
                id: 272,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 290,
                src: "3720:4:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_uint256",
                  typeString: "uint256"
                },
                typeName: {
                  id: 271,
                  name: "uint",
                  nodeType: "ElementaryTypeName",
                  src: "3720:4:1",
                  typeDescriptions: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "3698:27:1"
          },
          scope: 406,
          src: "3621:246:1",
          stateMutability: "view",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 331,
            nodeType: "Block",
            src: "3944:229:1",
            statements: [
              {
                assignments: [
                  301
                ],
                declarations: [
                  {
                    constant: false,
                    id: 301,
                    mutability: "mutable",
                    name: "allCandidates",
                    nodeType: "VariableDeclaration",
                    scope: 331,
                    src: "3955:32:1",
                    stateVariable: false,
                    storageLocation: "memory",
                    typeDescriptions: {
                      typeIdentifier: "t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                      typeString: "struct Voting.Candidate[]"
                    },
                    typeName: {
                      baseType: {
                        id: 299,
                        nodeType: "UserDefinedTypeName",
                        pathNode: {
                          id: 298,
                          name: "Candidate",
                          nodeType: "IdentifierPath",
                          referencedDeclaration: 50,
                          src: "3955:9:1"
                        },
                        referencedDeclaration: 50,
                        src: "3955:9:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Candidate_$50_storage_ptr",
                          typeString: "struct Voting.Candidate"
                        }
                      },
                      id: 300,
                      nodeType: "ArrayTypeName",
                      src: "3955:11:1",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_struct$_Candidate_$50_storage_$dyn_storage_ptr",
                        typeString: "struct Voting.Candidate[]"
                      }
                    },
                    visibility: "internal"
                  }
                ],
                id: 308,
                initialValue: {
                  "arguments": [
                    {
                      id: 306,
                      name: "candidatesCount",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 72,
                      src: "4006:15:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    ],
                    id: 305,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "NewExpression",
                    src: "3990:15:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr_$",
                      typeString: "function (uint256) pure returns (struct Voting.Candidate memory[] memory)"
                    },
                    typeName: {
                      baseType: {
                        id: 303,
                        nodeType: "UserDefinedTypeName",
                        pathNode: {
                          id: 302,
                          name: "Candidate",
                          nodeType: "IdentifierPath",
                          referencedDeclaration: 50,
                          src: "3994:9:1"
                        },
                        referencedDeclaration: 50,
                        src: "3994:9:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Candidate_$50_storage_ptr",
                          typeString: "struct Voting.Candidate"
                        }
                      },
                      id: 304,
                      nodeType: "ArrayTypeName",
                      src: "3994:11:1",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_struct$_Candidate_$50_storage_$dyn_storage_ptr",
                        typeString: "struct Voting.Candidate[]"
                      }
                    }
                  },
                  id: 307,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "3990:32:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                    typeString: "struct Voting.Candidate memory[] memory"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "3955:67:1"
              },
              {
                body: {
                  id: 327,
                  nodeType: "Block",
                  src: "4076:59:1",
                  statements: [
                    {
                      expression: {
                        id: 325,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftHandSide: {
                          baseExpression: {
                            id: 319,
                            name: "allCandidates",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 301,
                            src: "4091:13:1",
                            typeDescriptions: {
                              typeIdentifier: "t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                              typeString: "struct Voting.Candidate memory[] memory"
                            }
                          },
                          id: 321,
                          indexExpression: {
                            id: 320,
                            name: "i",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 310,
                            src: "4105:1:1",
                            typeDescriptions: {
                              typeIdentifier: "t_uint256",
                              typeString: "uint256"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: true,
                          nodeType: "IndexAccess",
                          src: "4091:16:1",
                          typeDescriptions: {
                            typeIdentifier: "t_struct$_Candidate_$50_memory_ptr",
                            typeString: "struct Voting.Candidate memory"
                          }
                        },
                        nodeType: "Assignment",
                        operator: "=",
                        rightHandSide: {
                          baseExpression: {
                            id: 322,
                            name: "candidates",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 62,
                            src: "4110:10:1",
                            typeDescriptions: {
                              typeIdentifier: "t_mapping$_t_uint256_$_t_struct$_Candidate_$50_storage_$",
                              typeString: "mapping(uint256 => struct Voting.Candidate storage ref)"
                            }
                          },
                          id: 324,
                          indexExpression: {
                            id: 323,
                            name: "i",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 310,
                            src: "4121:1:1",
                            typeDescriptions: {
                              typeIdentifier: "t_uint256",
                              typeString: "uint256"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: false,
                          nodeType: "IndexAccess",
                          src: "4110:13:1",
                          typeDescriptions: {
                            typeIdentifier: "t_struct$_Candidate_$50_storage",
                            typeString: "struct Voting.Candidate storage ref"
                          }
                        },
                        src: "4091:32:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Candidate_$50_memory_ptr",
                          typeString: "struct Voting.Candidate memory"
                        }
                      },
                      id: 326,
                      nodeType: "ExpressionStatement",
                      src: "4091:32:1"
                    }
                  ]
                },
                condition: {
                  commonType: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  },
                  id: 315,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftExpression: {
                    id: 313,
                    name: "i",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 310,
                    src: "4050:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  nodeType: "BinaryOperation",
                  operator: "<",
                  rightExpression: {
                    id: 314,
                    name: "candidatesCount",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 72,
                    src: "4054:15:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  src: "4050:19:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                id: 328,
                initializationExpression: {
                  assignments: [
                    310
                  ],
                  declarations: [
                    {
                      constant: false,
                      id: 310,
                      mutability: "mutable",
                      name: "i",
                      nodeType: "VariableDeclaration",
                      scope: 328,
                      src: "4038:6:1",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 309,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "4038:4:1",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      visibility: "internal"
                    }
                  ],
                  id: 312,
                  initialValue: {
                    hexValue: "30",
                    id: 311,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "4047:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  },
                  nodeType: "VariableDeclarationStatement",
                  src: "4038:10:1"
                },
                loopExpression: {
                  expression: {
                    id: 317,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "UnaryOperation",
                    operator: "++",
                    prefix: false,
                    src: "4071:3:1",
                    subExpression: {
                      id: 316,
                      name: "i",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 310,
                      src: "4071:1:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  id: 318,
                  nodeType: "ExpressionStatement",
                  src: "4071:3:1"
                },
                nodeType: "ForStatement",
                src: "4033:102:1"
              },
              {
                expression: {
                  id: 329,
                  name: "allCandidates",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 301,
                  src: "4152:13:1",
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                    typeString: "struct Voting.Candidate memory[] memory"
                  }
                },
                functionReturnParameters: 296,
                id: 330,
                nodeType: "Return",
                src: "4145:20:1"
              }
            ]
          },
          functionSelector: "2e6997fe",
          id: 332,
          implemented: true,
          kind: "function",
          modifiers: [],
          name: "getAllCandidates",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 291,
            nodeType: "ParameterList",
            parameters: [],
            src: "3900:2:1"
          },
          returnParameters: {
            id: 296,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 295,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 332,
                src: "3924:18:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_array$_t_struct$_Candidate_$50_memory_ptr_$dyn_memory_ptr",
                  typeString: "struct Voting.Candidate[]"
                },
                typeName: {
                  baseType: {
                    id: 293,
                    nodeType: "UserDefinedTypeName",
                    pathNode: {
                      id: 292,
                      name: "Candidate",
                      nodeType: "IdentifierPath",
                      referencedDeclaration: 50,
                      src: "3924:9:1"
                    },
                    referencedDeclaration: 50,
                    src: "3924:9:1",
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Candidate_$50_storage_ptr",
                      typeString: "struct Voting.Candidate"
                    }
                  },
                  id: 294,
                  nodeType: "ArrayTypeName",
                  src: "3924:11:1",
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_struct$_Candidate_$50_storage_$dyn_storage_ptr",
                    typeString: "struct Voting.Candidate[]"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "3923:20:1"
          },
          scope: 406,
          src: "3875:298:1",
          stateMutability: "view",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 358,
            nodeType: "Block",
            src: "4640:131:1",
            statements: [
              {
                assignments: [
                  345
                ],
                declarations: [
                  {
                    constant: false,
                    id: 345,
                    mutability: "mutable",
                    name: "voter",
                    nodeType: "VariableDeclaration",
                    scope: 358,
                    src: "4651:18:1",
                    stateVariable: false,
                    storageLocation: "memory",
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Voter_$57_memory_ptr",
                      typeString: "struct Voting.Voter"
                    },
                    typeName: {
                      id: 344,
                      nodeType: "UserDefinedTypeName",
                      pathNode: {
                        id: 343,
                        name: "Voter",
                        nodeType: "IdentifierPath",
                        referencedDeclaration: 57,
                        src: "4651:5:1"
                      },
                      referencedDeclaration: 57,
                      src: "4651:5:1",
                      typeDescriptions: {
                        typeIdentifier: "t_struct$_Voter_$57_storage_ptr",
                        typeString: "struct Voting.Voter"
                      }
                    },
                    visibility: "internal"
                  }
                ],
                id: 349,
                initialValue: {
                  baseExpression: {
                    id: 346,
                    name: "voters",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 67,
                    src: "4672:6:1",
                    typeDescriptions: {
                      typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                      typeString: "mapping(address => struct Voting.Voter storage ref)"
                    }
                  },
                  id: 348,
                  indexExpression: {
                    id: 347,
                    name: "_voterAddress",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 334,
                    src: "4679:13:1",
                    typeDescriptions: {
                      typeIdentifier: "t_address",
                      typeString: "address"
                    }
                  },
                  isConstant: false,
                  isLValue: true,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "IndexAccess",
                  src: "4672:21:1",
                  typeDescriptions: {
                    typeIdentifier: "t_struct$_Voter_$57_storage",
                    typeString: "struct Voting.Voter storage ref"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "4651:42:1"
              },
              {
                expression: {
                  components: [
                    {
                      expression: {
                        id: 350,
                        name: "voter",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 345,
                        src: "4712:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_memory_ptr",
                          typeString: "struct Voting.Voter memory"
                        }
                      },
                      id: 351,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "fullName",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 52,
                      src: "4712:14:1",
                      typeDescriptions: {
                        typeIdentifier: "t_string_memory_ptr",
                        typeString: "string memory"
                      }
                    },
                    {
                      expression: {
                        id: 352,
                        name: "voter",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 345,
                        src: "4728:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_memory_ptr",
                          typeString: "struct Voting.Voter memory"
                        }
                      },
                      id: 353,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "isRegistered",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 54,
                      src: "4728:18:1",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    },
                    {
                      expression: {
                        id: 354,
                        name: "voter",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 345,
                        src: "4748:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_memory_ptr",
                          typeString: "struct Voting.Voter memory"
                        }
                      },
                      id: 355,
                      isConstant: false,
                      isLValue: true,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "hasVoted",
                      nodeType: "MemberAccess",
                      referencedDeclaration: 56,
                      src: "4748:14:1",
                      typeDescriptions: {
                        typeIdentifier: "t_bool",
                        typeString: "bool"
                      }
                    }
                  ],
                  id: 356,
                  isConstant: false,
                  isInlineArray: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  nodeType: "TupleExpression",
                  src: "4711:52:1",
                  typeDescriptions: {
                    typeIdentifier: "t_tuple$_t_string_memory_ptr_$_t_bool_$_t_bool_$",
                    typeString: "tuple(string memory,bool,bool)"
                  }
                },
                functionReturnParameters: 342,
                id: 357,
                nodeType: "Return",
                src: "4704:59:1"
              }
            ]
          },
          functionSelector: "d4f50f98",
          id: 359,
          implemented: true,
          kind: "function",
          modifiers: [],
          name: "getVoter",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 335,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 334,
                mutability: "mutable",
                name: "_voterAddress",
                nodeType: "VariableDeclaration",
                scope: 359,
                src: "4569:21:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_address",
                  typeString: "address"
                },
                typeName: {
                  id: 333,
                  name: "address",
                  nodeType: "ElementaryTypeName",
                  src: "4569:7:1",
                  stateMutability: "nonpayable",
                  typeDescriptions: {
                    typeIdentifier: "t_address",
                    typeString: "address"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "4568:23:1"
          },
          returnParameters: {
            id: 342,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 337,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 359,
                src: "4613:13:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_string_memory_ptr",
                  typeString: "string"
                },
                typeName: {
                  id: 336,
                  name: "string",
                  nodeType: "ElementaryTypeName",
                  src: "4613:6:1",
                  typeDescriptions: {
                    typeIdentifier: "t_string_storage_ptr",
                    typeString: "string"
                  }
                },
                visibility: "internal"
              },
              {
                constant: false,
                id: 339,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 359,
                src: "4628:4:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                },
                typeName: {
                  id: 338,
                  name: "bool",
                  nodeType: "ElementaryTypeName",
                  src: "4628:4:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                visibility: "internal"
              },
              {
                constant: false,
                id: 341,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 359,
                src: "4634:4:1",
                stateVariable: false,
                storageLocation: "default",
                typeDescriptions: {
                  typeIdentifier: "t_bool",
                  typeString: "bool"
                },
                typeName: {
                  id: 340,
                  name: "bool",
                  nodeType: "ElementaryTypeName",
                  src: "4634:4:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "4612:27:1"
          },
          scope: 406,
          src: "4551:220:1",
          stateMutability: "view",
          virtual: false,
          visibility: "public"
        },
        {
          body: {
            id: 404,
            nodeType: "Block",
            src: "4840:233:1",
            statements: [
              {
                assignments: [
                  370
                ],
                declarations: [
                  {
                    constant: false,
                    id: 370,
                    mutability: "mutable",
                    name: "allVoters",
                    nodeType: "VariableDeclaration",
                    scope: 404,
                    src: "4851:24:1",
                    stateVariable: false,
                    storageLocation: "memory",
                    typeDescriptions: {
                      typeIdentifier: "t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                      typeString: "struct Voting.Voter[]"
                    },
                    typeName: {
                      baseType: {
                        id: 368,
                        nodeType: "UserDefinedTypeName",
                        pathNode: {
                          id: 367,
                          name: "Voter",
                          nodeType: "IdentifierPath",
                          referencedDeclaration: 57,
                          src: "4851:5:1"
                        },
                        referencedDeclaration: 57,
                        src: "4851:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_storage_ptr",
                          typeString: "struct Voting.Voter"
                        }
                      },
                      id: 369,
                      nodeType: "ArrayTypeName",
                      src: "4851:7:1",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_struct$_Voter_$57_storage_$dyn_storage_ptr",
                        typeString: "struct Voting.Voter[]"
                      }
                    },
                    visibility: "internal"
                  }
                ],
                id: 378,
                initialValue: {
                  "arguments": [
                    {
                      expression: {
                        id: 375,
                        name: "voterAddresses",
                        nodeType: "Identifier",
                        overloadedDeclarations: [],
                        referencedDeclaration: 70,
                        src: "4890:14:1",
                        typeDescriptions: {
                          typeIdentifier: "t_array$_t_address_$dyn_storage",
                          typeString: "address[] storage ref"
                        }
                      },
                      id: 376,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      memberName: "length",
                      nodeType: "MemberAccess",
                      src: "4890:21:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    }
                  ],
                  expression: {
                    argumentTypes: [
                      {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    ],
                    id: 374,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    lValueRequested: false,
                    nodeType: "NewExpression",
                    src: "4878:11:1",
                    typeDescriptions: {
                      typeIdentifier: "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr_$",
                      typeString: "function (uint256) pure returns (struct Voting.Voter memory[] memory)"
                    },
                    typeName: {
                      baseType: {
                        id: 372,
                        nodeType: "UserDefinedTypeName",
                        pathNode: {
                          id: 371,
                          name: "Voter",
                          nodeType: "IdentifierPath",
                          referencedDeclaration: 57,
                          src: "4882:5:1"
                        },
                        referencedDeclaration: 57,
                        src: "4882:5:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_storage_ptr",
                          typeString: "struct Voting.Voter"
                        }
                      },
                      id: 373,
                      nodeType: "ArrayTypeName",
                      src: "4882:7:1",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_struct$_Voter_$57_storage_$dyn_storage_ptr",
                        typeString: "struct Voting.Voter[]"
                      }
                    }
                  },
                  id: 377,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  kind: "functionCall",
                  lValueRequested: false,
                  names: [],
                  nodeType: "FunctionCall",
                  src: "4878:34:1",
                  tryCall: false,
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                    typeString: "struct Voting.Voter memory[] memory"
                  }
                },
                nodeType: "VariableDeclarationStatement",
                src: "4851:61:1"
              },
              {
                body: {
                  id: 400,
                  nodeType: "Block",
                  src: "4972:67:1",
                  statements: [
                    {
                      expression: {
                        id: 398,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftHandSide: {
                          baseExpression: {
                            id: 390,
                            name: "allVoters",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 370,
                            src: "4987:9:1",
                            typeDescriptions: {
                              typeIdentifier: "t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                              typeString: "struct Voting.Voter memory[] memory"
                            }
                          },
                          id: 392,
                          indexExpression: {
                            id: 391,
                            name: "i",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 380,
                            src: "4997:1:1",
                            typeDescriptions: {
                              typeIdentifier: "t_uint256",
                              typeString: "uint256"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: true,
                          nodeType: "IndexAccess",
                          src: "4987:12:1",
                          typeDescriptions: {
                            typeIdentifier: "t_struct$_Voter_$57_memory_ptr",
                            typeString: "struct Voting.Voter memory"
                          }
                        },
                        nodeType: "Assignment",
                        operator: "=",
                        rightHandSide: {
                          baseExpression: {
                            id: 393,
                            name: "voters",
                            nodeType: "Identifier",
                            overloadedDeclarations: [],
                            referencedDeclaration: 67,
                            src: "5002:6:1",
                            typeDescriptions: {
                              typeIdentifier: "t_mapping$_t_address_$_t_struct$_Voter_$57_storage_$",
                              typeString: "mapping(address => struct Voting.Voter storage ref)"
                            }
                          },
                          id: 397,
                          indexExpression: {
                            baseExpression: {
                              id: 394,
                              name: "voterAddresses",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 70,
                              src: "5009:14:1",
                              typeDescriptions: {
                                typeIdentifier: "t_array$_t_address_$dyn_storage",
                                typeString: "address[] storage ref"
                              }
                            },
                            id: 396,
                            indexExpression: {
                              id: 395,
                              name: "i",
                              nodeType: "Identifier",
                              overloadedDeclarations: [],
                              referencedDeclaration: 380,
                              src: "5024:1:1",
                              typeDescriptions: {
                                typeIdentifier: "t_uint256",
                                typeString: "uint256"
                              }
                            },
                            isConstant: false,
                            isLValue: true,
                            isPure: false,
                            lValueRequested: false,
                            nodeType: "IndexAccess",
                            src: "5009:17:1",
                            typeDescriptions: {
                              typeIdentifier: "t_address",
                              typeString: "address"
                            }
                          },
                          isConstant: false,
                          isLValue: true,
                          isPure: false,
                          lValueRequested: false,
                          nodeType: "IndexAccess",
                          src: "5002:25:1",
                          typeDescriptions: {
                            typeIdentifier: "t_struct$_Voter_$57_storage",
                            typeString: "struct Voting.Voter storage ref"
                          }
                        },
                        src: "4987:40:1",
                        typeDescriptions: {
                          typeIdentifier: "t_struct$_Voter_$57_memory_ptr",
                          typeString: "struct Voting.Voter memory"
                        }
                      },
                      id: 399,
                      nodeType: "ExpressionStatement",
                      src: "4987:40:1"
                    }
                  ]
                },
                condition: {
                  commonType: {
                    typeIdentifier: "t_uint256",
                    typeString: "uint256"
                  },
                  id: 386,
                  isConstant: false,
                  isLValue: false,
                  isPure: false,
                  lValueRequested: false,
                  leftExpression: {
                    id: 383,
                    name: "i",
                    nodeType: "Identifier",
                    overloadedDeclarations: [],
                    referencedDeclaration: 380,
                    src: "4940:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  nodeType: "BinaryOperation",
                  operator: "<",
                  rightExpression: {
                    expression: {
                      id: 384,
                      name: "voterAddresses",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 70,
                      src: "4944:14:1",
                      typeDescriptions: {
                        typeIdentifier: "t_array$_t_address_$dyn_storage",
                        typeString: "address[] storage ref"
                      }
                    },
                    id: 385,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    memberName: "length",
                    nodeType: "MemberAccess",
                    src: "4944:21:1",
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  src: "4940:25:1",
                  typeDescriptions: {
                    typeIdentifier: "t_bool",
                    typeString: "bool"
                  }
                },
                id: 401,
                initializationExpression: {
                  assignments: [
                    380
                  ],
                  declarations: [
                    {
                      constant: false,
                      id: 380,
                      mutability: "mutable",
                      name: "i",
                      nodeType: "VariableDeclaration",
                      scope: 401,
                      src: "4928:6:1",
                      stateVariable: false,
                      storageLocation: "default",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      },
                      typeName: {
                        id: 379,
                        name: "uint",
                        nodeType: "ElementaryTypeName",
                        src: "4928:4:1",
                        typeDescriptions: {
                          typeIdentifier: "t_uint256",
                          typeString: "uint256"
                        }
                      },
                      visibility: "internal"
                    }
                  ],
                  id: 382,
                  initialValue: {
                    hexValue: "30",
                    id: 381,
                    isConstant: false,
                    isLValue: false,
                    isPure: true,
                    kind: "number",
                    lValueRequested: false,
                    nodeType: "Literal",
                    src: "4937:1:1",
                    typeDescriptions: {
                      typeIdentifier: "t_rational_0_by_1",
                      typeString: "int_const 0"
                    },
                    value: "0"
                  },
                  nodeType: "VariableDeclarationStatement",
                  src: "4928:10:1"
                },
                loopExpression: {
                  expression: {
                    id: 388,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    nodeType: "UnaryOperation",
                    operator: "++",
                    prefix: false,
                    src: "4967:3:1",
                    subExpression: {
                      id: 387,
                      name: "i",
                      nodeType: "Identifier",
                      overloadedDeclarations: [],
                      referencedDeclaration: 380,
                      src: "4967:1:1",
                      typeDescriptions: {
                        typeIdentifier: "t_uint256",
                        typeString: "uint256"
                      }
                    },
                    typeDescriptions: {
                      typeIdentifier: "t_uint256",
                      typeString: "uint256"
                    }
                  },
                  id: 389,
                  nodeType: "ExpressionStatement",
                  src: "4967:3:1"
                },
                nodeType: "ForStatement",
                src: "4923:116:1"
              },
              {
                expression: {
                  id: 402,
                  name: "allVoters",
                  nodeType: "Identifier",
                  overloadedDeclarations: [],
                  referencedDeclaration: 370,
                  src: "5056:9:1",
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                    typeString: "struct Voting.Voter memory[] memory"
                  }
                },
                functionReturnParameters: 365,
                id: 403,
                nodeType: "Return",
                src: "5049:16:1"
              }
            ]
          },
          functionSelector: "35bbe70e",
          id: 405,
          implemented: true,
          kind: "function",
          modifiers: [],
          name: "getAllVoters",
          nodeType: "FunctionDefinition",
          parameters: {
            id: 360,
            nodeType: "ParameterList",
            parameters: [],
            src: "4800:2:1"
          },
          returnParameters: {
            id: 365,
            nodeType: "ParameterList",
            parameters: [
              {
                constant: false,
                id: 364,
                mutability: "mutable",
                name: "",
                nodeType: "VariableDeclaration",
                scope: 405,
                src: "4824:14:1",
                stateVariable: false,
                storageLocation: "memory",
                typeDescriptions: {
                  typeIdentifier: "t_array$_t_struct$_Voter_$57_memory_ptr_$dyn_memory_ptr",
                  typeString: "struct Voting.Voter[]"
                },
                typeName: {
                  baseType: {
                    id: 362,
                    nodeType: "UserDefinedTypeName",
                    pathNode: {
                      id: 361,
                      name: "Voter",
                      nodeType: "IdentifierPath",
                      referencedDeclaration: 57,
                      src: "4824:5:1"
                    },
                    referencedDeclaration: 57,
                    src: "4824:5:1",
                    typeDescriptions: {
                      typeIdentifier: "t_struct$_Voter_$57_storage_ptr",
                      typeString: "struct Voting.Voter"
                    }
                  },
                  id: 363,
                  nodeType: "ArrayTypeName",
                  src: "4824:7:1",
                  typeDescriptions: {
                    typeIdentifier: "t_array$_t_struct$_Voter_$57_storage_$dyn_storage_ptr",
                    typeString: "struct Voting.Voter[]"
                  }
                },
                visibility: "internal"
              }
            ],
            src: "4823:16:1"
          },
          scope: 406,
          src: "4779:294:1",
          stateMutability: "view",
          virtual: false,
          visibility: "public"
        }
      ],
      scope: 407,
      src: "60:5016:1"
    }
  ],
  src: "33:5045:1"
};
const compiler = {
  name: "solc",
  version: "0.8.0+commit.c7dfd78e.Emscripten.clang"
};
const networks = {
  "5777": {
    events: {},
    links: {},
    address: "0x2c1C5D7d000019E019c1ADce95e40fCaF975f87E",
    transactionHash: "0x2858aae9e5e44646fdb5dc21472aef12aabe45d3f2c8041ddf857c456a08defa"
  }
};
const schemaVersion = "3.4.16";
const updatedAt = "2024-12-23T10:22:26.317Z";
const networkType = "ethereum";
const devdoc = {
  kind: "dev",
  methods: {},
  version: 1
};
const userdoc = {
  kind: "user",
  methods: {},
  version: 1
};
const VotingContract = {
  contractName,
  abi,
  metadata,
  bytecode,
  deployedBytecode,
  immutableReferences,
  generatedSources,
  deployedGeneratedSources,
  sourceMap,
  deployedSourceMap,
  source,
  sourcePath,
  ast,
  compiler,
  networks,
  schemaVersion,
  updatedAt,
  networkType,
  devdoc,
  userdoc
};
const contractABI = VotingContract.abi;
const contractAddress = VotingContract.networks[5777].address;
let instance = null;
const getContractInstance = async () => {
  if (typeof window === "undefined") {
    throw new Error("This function can only be called in the browser.");
  }
  if (!window.ethereum) {
    throw new Error("MetaMask is not installed. Please install it to use this app.");
  }
  if (!instance) {
    const web32 = new Web3(window.ethereum);
    await window.ethereum.request({ method: "eth_requestAccounts" });
    instance = new web32.eth.Contract(contractABI, contractAddress);
  }
  return instance;
};
const ADMIN_USERNAME = "admin";
const ADMIN_PASSWORD = "admin";
const AuthContext = createContext(void 0);
const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const navigate = useNavigate();
  const isAuthenticated = !!user;
  const [isAdmin, setIsAdmin] = useState(false);
  useEffect(() => {
    const savedUser = localStorage.getItem("authUser");
    if (savedUser) {
      JSON.parse(savedUser);
      setUser(JSON.parse(savedUser));
    }
    const savedIsAdmin = localStorage.getItem("isAdmin");
    if (savedIsAdmin) {
      setIsAdmin(JSON.parse(
        savedIsAdmin
      ));
    }
  }, []);
  useEffect(() => {
    if (user) {
      localStorage.setItem("authUser", JSON.stringify(user));
      if (user.username === ADMIN_USERNAME) {
        setIsAdmin(true);
        localStorage.setItem("isAdmin", JSON.stringify(true));
      }
    } else {
      localStorage.removeItem("authUser");
      localStorage.removeItem("isAdmin");
    }
  }, [user]);
  let count2 = 0;
  useEffect(() => {
    if (!isAuthenticated && count2 === 1) {
      navigate("/signin");
      count2++;
    }
  }, [isAuthenticated]);
  const logout = () => {
    try {
      localStorage.removeItem("authUser");
      localStorage.removeItem("isAdmin");
      setIsAdmin(false);
      window.location.reload();
    } catch (err) {
      console.error(err);
    }
  };
  const login = async (username, password) => {
    try {
      if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
        setUser({ username: ADMIN_USERNAME, fullName: "Admin" });
        setIsAdmin(true);
        return true;
      } else {
        const contract2 = await getContractInstance();
        const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
        const currentAccount = accounts[0];
        await contract2.methods.authenticateVoter().send({ from: currentAccount });
        const voter = await contract2.methods.getVoter(currentAccount).call();
        setUser({ username: voter[0], fullName: voter[0] });
        setIsAdmin(false);
        return true;
      }
    } catch (err) {
      console.error(err);
      return false;
    }
  };
  return /* @__PURE__ */ jsx(AuthContext.Provider, { value: { user, isAuthenticated, isAdmin, login, logout }, children });
};
const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
function cn(...inputs) {
  return twMerge(clsx(inputs));
}
const Icons = {
  eye: Eye,
  eyeOff: EyeOff,
  // logo: Command,
  close: X,
  spinner: Loader2,
  chevronLeft: ChevronLeft,
  chevronRight: ChevronRight,
  check: Check,
  chevronsUpDown: ChevronsUpDown,
  trash: Trash,
  post: FileText,
  page: File,
  media: Image,
  settings: Settings,
  billing: CreditCard,
  ellipsis: MoreVertical,
  add: Plus,
  warning: AlertTriangle,
  user: User,
  arrowRight: ArrowRight,
  help: HelpCircle,
  pizza: Pizza,
  sun: SunMedium,
  moon: Moon,
  laptop: Laptop,
  car: Car,
  tag: Tag,
  bolt: Bolt,
  wrench: Wrench,
  circleSlash: CircleSlash,
  calendar: Calendar,
  cross: Cross,
  scroll: Scroll,
  logout: LogOut,
  lightBulb: LightBulbIcon,
  search: Search,
  circle: Circle,
  gripVertical: GripVertical,
  chevronUp: ChevronUp,
  chevronDown: ChevronDown,
  lock: Lock,
  userPen: UserPen,
  x: X,
  cookieIcon: CookieIcon,
  calendarCheck2: CalendarCheck2,
  usersRound: UsersRound,
  menu: Menu,
  circleCheck: CircleCheck,
  panelsTopLeft: PanelsTopLeft,
  rocket: RocketIcon,
  triangleAlert: TriangleAlert,
  receipt: Receipt,
  circleGauge: CircleGauge,
  notebook: Notebook,
  printer: Printer,
  logo: (props) => /* @__PURE__ */ jsx(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "1",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      className: cn("mr-2 h-6 w-6 ", props.className),
      ...props,
      children: /* @__PURE__ */ jsx("path", { d: "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3" })
    }
  ),
  gitHub: ({ ...props }) => /* @__PURE__ */ jsx(
    "svg",
    {
      "aria-hidden": "true",
      focusable: "false",
      "data-prefix": "fab",
      "data-icon": "github",
      role: "img",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 496 512",
      ...props,
      children: /* @__PURE__ */ jsx(
        "path",
        {
          fill: "currentColor",
          d: "M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"
        }
      )
    }
  ),
  facebook: (props) => /* @__PURE__ */ jsx(
    "svg",
    {
      ...props,
      height: "23",
      viewBox: "0 0 24 24",
      width: "23",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsx("path", { d: "M22.675 0h-21.35C.592 0 0 .592 0 1.325v21.351C0 23.407.592 24 1.325 24H12.82v-9.293H9.691v-3.622h3.129V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.464.099 2.797.143v3.24l-1.92.001c-1.504 0-1.794.714-1.794 1.76v2.31h3.587l-.467 3.622h-3.12V24h6.116C23.407 24 24 23.408 24 22.676V1.325C24 .592 23.407 0 22.675 0z" })
    }
  ),
  twitter: (props) => /* @__PURE__ */ jsx(
    "svg",
    {
      ...props,
      height: "23",
      viewBox: "0 0 1200 1227",
      width: "23",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsx("path", { d: "M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z" })
    }
  ),
  radix: (props) => /* @__PURE__ */ jsxs("svg", { viewBox: "0 0 25 25", fill: "none", ...props, children: [
    /* @__PURE__ */ jsx(
      "path",
      {
        d: "M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z",
        fill: "currentcolor"
      }
    ),
    /* @__PURE__ */ jsx("path", { d: "M12 0H4V8H12V0Z", fill: "currentcolor" }),
    /* @__PURE__ */ jsx(
      "path",
      {
        d: "M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z",
        fill: "currentcolor"
      }
    )
  ] }),
  aria: (props) => /* @__PURE__ */ jsx("svg", { role: "img", viewBox: "0 0 24 24", fill: "currentColor", ...props, children: /* @__PURE__ */ jsx("path", { d: "M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z" }) }),
  npm: (props) => /* @__PURE__ */ jsx("svg", { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z",
      fill: "currentColor"
    }
  ) }),
  yarn: (props) => /* @__PURE__ */ jsx("svg", { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z",
      fill: "currentColor"
    }
  ) }),
  pnpm: (props) => /* @__PURE__ */ jsx("svg", { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z",
      fill: "currentColor"
    }
  ) }),
  react: (props) => /* @__PURE__ */ jsx("svg", { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z",
      fill: "currentColor"
    }
  ) }),
  tailwind: (props) => /* @__PURE__ */ jsx("svg", { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z",
      fill: "currentColor"
    }
  ) }),
  google: (props) => /* @__PURE__ */ jsx("svg", { role: "img", viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      fill: "currentColor",
      d: "M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z"
    }
  ) }),
  apple: (props) => /* @__PURE__ */ jsx("svg", { role: "img", viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701",
      fill: "currentColor"
    }
  ) }),
  paypal: (props) => /* @__PURE__ */ jsx("svg", { role: "img", viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsx(
    "path",
    {
      d: "M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z",
      fill: "currentColor"
    }
  ) })
};
const ToastProvider = ToastPrimitives.Provider;
const ToastViewport = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  ToastPrimitives.Viewport,
  {
    ref,
    className: cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    ),
    ...props
  }
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;
const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background",
        destructive: "destructive group border-destructive bg-destructive text-destructive-foreground"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
);
const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {
  return /* @__PURE__ */ jsx(
    ToastPrimitives.Root,
    {
      ref,
      className: cn(toastVariants({ variant }), className),
      ...props
    }
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;
const ToastAction = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  ToastPrimitives.Action,
  {
    ref,
    className: cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    ),
    ...props
  }
));
ToastAction.displayName = ToastPrimitives.Action.displayName;
const ToastClose = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  ToastPrimitives.Close,
  {
    ref,
    className: cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    ),
    "toast-close": "",
    ...props,
    children: /* @__PURE__ */ jsx(Icons.x, { className: "h-4 w-4" })
  }
));
ToastClose.displayName = ToastPrimitives.Close.displayName;
const ToastTitle = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  ToastPrimitives.Title,
  {
    ref,
    className: cn("text-sm font-semibold", className),
    ...props
  }
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;
const ToastDescription = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  ToastPrimitives.Description,
  {
    ref,
    className: cn("text-sm opacity-90", className),
    ...props
  }
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;
const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1e6;
let count = 0;
function genId() {
  count = (count + 1) % Number.MAX_VALUE;
  return count.toString();
}
const toastTimeouts = /* @__PURE__ */ new Map();
const addToRemoveQueue = (toastId) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }
  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId
    });
  }, TOAST_REMOVE_DELAY);
  toastTimeouts.set(toastId, timeout);
};
const reducer = (state, action) => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT)
      };
    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map(
          (t) => t.id === action.toast.id ? { ...t, ...action.toast } : t
        )
      };
    case "DISMISS_TOAST": {
      const { toastId } = action;
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast2) => {
          addToRemoveQueue(toast2.id);
        });
      }
      return {
        ...state,
        toasts: state.toasts.map(
          (t) => t.id === toastId || toastId === void 0 ? {
            ...t,
            open: false
          } : t
        )
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === void 0) {
        return {
          ...state,
          toasts: []
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId)
      };
  }
};
const listeners = [];
let memoryState = { toasts: [] };
function dispatch(action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}
function toast({ ...props }) {
  const id = genId();
  const update = (props2) => dispatch({
    type: "UPDATE_TOAST",
    toast: { ...props2, id }
  });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });
  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      }
    }
  });
  return {
    id,
    dismiss,
    update
  };
}
function useToast() {
  const [state, setState] = React.useState(memoryState);
  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);
  return {
    ...state,
    toast,
    dismiss: (toastId) => dispatch({ type: "DISMISS_TOAST", toastId })
  };
}
function Toaster() {
  const { toasts } = useToast();
  return /* @__PURE__ */ jsxs(ToastProvider, { children: [
    toasts.map(function({ id, title, description, action, ...props }) {
      return /* @__PURE__ */ jsxs(Toast, { ...props, children: [
        /* @__PURE__ */ jsxs("div", { className: "grid gap-1", children: [
          title && /* @__PURE__ */ jsx(ToastTitle, { children: title }),
          description && /* @__PURE__ */ jsx(ToastDescription, { children: description })
        ] }),
        action,
        /* @__PURE__ */ jsx(ToastClose, {})
      ] }, id);
    }),
    /* @__PURE__ */ jsx(ToastViewport, {})
  ] });
}
const links = () => [{
  rel: "preconnect",
  href: "https://fonts.googleapis.com"
}, {
  rel: "preconnect",
  href: "https://fonts.gstatic.com",
  crossOrigin: "anonymous"
}, {
  rel: "stylesheet",
  href: "https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
}, {
  rel: "stylesheet",
  href: stylesheet
}];
function Layout({
  children
}) {
  return /* @__PURE__ */ jsxs("html", {
    lang: "el",
    children: [/* @__PURE__ */ jsxs("head", {
      children: [/* @__PURE__ */ jsx("meta", {
        charSet: "utf-8"
      }), /* @__PURE__ */ jsx("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1"
      }), /* @__PURE__ */ jsx(Meta, {}), /* @__PURE__ */ jsx(Links, {})]
    }), /* @__PURE__ */ jsxs("body", {
      children: [children, /* @__PURE__ */ jsx(ScrollRestoration, {}), /* @__PURE__ */ jsx(Scripts, {}), /* @__PURE__ */ jsx(Toaster, {})]
    })]
  });
}
const root = withComponentProps(function App() {
  return /* @__PURE__ */ jsx(AuthProvider, {
    children: /* @__PURE__ */ jsx(Outlet, {})
  });
});
const ErrorBoundary = withErrorBoundaryProps(function ErrorBoundary2({
  error
}) {
  let message = "Oops!";
  let details = "An unexpected error occurred.";
  let stack;
  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? "404" : "Error";
    details = error.status === 404 ? "Η σελίδα δεν βρέθηκε." : error.statusText || details;
  }
  return /* @__PURE__ */ jsxs("main", {
    className: "pt-16 p-4 container mx-auto ",
    children: [/* @__PURE__ */ jsx("h1", {
      children: message
    }), /* @__PURE__ */ jsx("p", {
      children: details
    }), stack]
  });
});
const route0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ErrorBoundary,
  Layout,
  default: root,
  links
}, Symbol.toStringTag, { value: "Module" }));
function Logo({ className }) {
  return /* @__PURE__ */ jsxs("div", { className: cn("flex items-center text-primary", className), children: [
    /* @__PURE__ */ jsx("span", { className: "relative whitespace-nowrap", children: /* @__PURE__ */ jsxs("span", { className: "flex items-center", children: [
      /* @__PURE__ */ jsx(
        "svg",
        {
          "aria-hidden": "true",
          viewBox: "0 0 418 42",
          className: "absolute left-0 top-2/3 h-[0.58em] w-full fill-blue-300/70",
          preserveAspectRatio: "none",
          children: /* @__PURE__ */ jsx("path", { d: "M203.371.916c-26.013-2.078-76.686 1.963-124.73 9.946L67.3 12.749C35.421 18.062 18.2 21.766 6.004 25.934 1.244 27.561.828 27.778.874 28.61c.07 1.214.828 1.121 9.595-1.176 9.072-2.377 17.15-3.92 39.246-7.496C123.565 7.986 157.869 4.492 195.942 5.046c7.461.108 19.25 1.696 19.17 2.582-.107 1.183-7.874 4.31-25.75 10.366-21.992 7.45-35.43 12.534-36.701 13.884-2.173 2.308-.202 4.407 4.442 4.734 2.654.187 3.263.157 15.593-.78 35.401-2.686 57.944-3.488 88.365-3.143 46.327.526 75.721 2.23 130.788 7.584 19.787 1.924 20.814 1.98 24.557 1.332l.066-.011c1.201-.203 1.53-1.825.399-2.335-2.911-1.31-4.893-1.604-22.048-3.261-57.509-5.556-87.871-7.36-132.059-7.842-23.239-.254-33.617-.116-50.627.674-11.629.54-42.371 2.494-46.696 2.967-2.359.259 8.133-3.625 26.504-9.81 23.239-7.825 27.934-10.149 28.304-14.005.417-4.348-3.529-6-16.878-7.066Z" })
        }
      ),
      /* @__PURE__ */ jsx("img", { src: "/ballot.jpg", alt: "Logo", className: "h-10 w-auto" }),
      /* @__PURE__ */ jsx("span", { className: "text-indigo-900 font-semibold ml-1", children: "Web 3.0 Εκλογές" })
    ] }) }),
    " "
  ] });
}
const buttonVariants$1 = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
const Button = React.forwardRef(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return /* @__PURE__ */ jsx(
      Comp,
      {
        className: cn(buttonVariants$1({ variant, size, className })),
        ref,
        ...props
      }
    );
  }
);
Button.displayName = "Button";
function PublicLayout({ children }) {
  const navigate = useNavigate();
  const { pathname } = useLocation();
  const auth = useAuth();
  const { isAuthenticated, isAdmin, logout, user } = auth;
  if (!isAuthenticated && pathname.includes("vote")) {
    navigate("/signin");
  }
  if (pathname.includes("admin") && !isAdmin) {
    navigate("/signin");
  }
  return /* @__PURE__ */ jsxs("div", { className: "h-screen flex-col", children: [
    /* @__PURE__ */ jsxs("div", { className: "relative flex flex-row justify-between top-0 left-0 w-full py-4 px-6 max-w-[1980px] mx-auto", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex ", children: [
        /* @__PURE__ */ jsx(Logo, {}),
        isAdmin && /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(Link, { to: "/admin/contract", className: "ml-8 pt-3 text-sm font-medium text-muted-foreground transition-colors hover:text-primary", children: "Contract" }),
          /* @__PURE__ */ jsx(Link, { to: "/admin/candidates", className: "ml-8 pt-3 text-sm font-medium text-muted-foreground transition-colors hover:text-primary", children: "Υποψήφιοι" }),
          /* @__PURE__ */ jsx(Link, { to: "/admin/import-voters", className: "ml-8 pt-3 text-sm font-medium text-muted-foreground transition-colors hover:text-primary", children: "Εισαγωγή Ψηφοφόρων" })
        ] }),
        !isAdmin && isAuthenticated && /* @__PURE__ */ jsx(Link, { to: "/vote", className: "ml-8 pt-3 text-sm font-medium text-muted-foreground transition-colors hover:text-primary", children: "Ψηφίστε" }),
        /* @__PURE__ */ jsx(Link, { to: "/results", className: "ml-8 pt-3 text-sm font-medium text-muted-foreground transition-colors hover:text-primary", children: "Αποτελέσματα" })
      ] }),
      isAuthenticated && /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-4", children: [
        /* @__PURE__ */ jsxs("div", { children: [
          "Έχετε συνδεθεί ως ",
          user == null ? void 0 : user.username
        ] }),
        /* @__PURE__ */ jsx(
          Button,
          {
            onClick: () => {
              try {
                logout();
              } catch (e) {
                console.error(e);
              }
            },
            children: "Αποσύνδεση"
          }
        )
      ] }),
      !isAuthenticated && /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-4", children: [
        /* @__PURE__ */ jsx(Link, { to: "/signin", className: "text-sm font-medium text-muted-foreground transition-colors hover:text-primary", children: "Σύνδεση" }),
        /* @__PURE__ */ jsx(Link, { to: "/signup", className: "text-sm font-medium text-muted-foreground transition-colors hover:text-primary", children: "Εγγραφή" })
      ] })
    ] }),
    /* @__PURE__ */ jsx("div", { className: "flex justify-center py-16 h-[calc(100%-200px)]", children })
  ] });
}
const layout = withComponentProps(function LayoutRoute({
  children
}) {
  return /* @__PURE__ */ jsx(PublicLayout, {
    children: /* @__PURE__ */ jsx(Outlet, {})
  });
});
const route1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: layout
}, Symbol.toStringTag, { value: "Module" }));
const App$1 = () => {
  const navigate = useNavigate();
  useEffect(() => {
    navigate("/results");
  }, []);
  return /* @__PURE__ */ jsx(Fragment, {});
};
function meta$8({}) {
  return [{
    title: "New React Router App"
  }, {
    name: "description",
    content: "Welcome to React Router!"
  }];
}
const home = withComponentProps(function HomeRoute() {
  return /* @__PURE__ */ jsx(App$1, {});
});
const route2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: home,
  meta: meta$8
}, Symbol.toStringTag, { value: "Module" }));
function Skeleton({
  className,
  ...props
}) {
  return /* @__PURE__ */ jsx(
    "div",
    {
      className: cn("animate-pulse rounded-md bg-muted", className),
      ...props
    }
  );
}
const Input = React.forwardRef(
  ({ className, type, loading, ...props }, ref) => {
    return loading ? /* @__PURE__ */ jsx(Skeleton, { className: "w-full h-10" }) : /* @__PURE__ */ jsx(
      "input",
      {
        type,
        className: cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        ),
        ref,
        ...props
      }
    );
  }
);
Input.displayName = "Input";
const PasswordInput = React.forwardRef(
  ({ className, ...props }, ref) => {
    const [showPassword, setShowPassword] = React.useState(false);
    const handleShowPassword = () => {
      setShowPassword(!showPassword);
    };
    return /* @__PURE__ */ jsxs("div", { className: "relative", children: [
      /* @__PURE__ */ jsx(
        "input",
        {
          className: cn(
            "flex h-10 w-full rounded-md border border-input px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
            className
          ),
          ref,
          ...props,
          type: showPassword ? "text" : "password"
        }
      ),
      /* @__PURE__ */ jsx(
        "div",
        {
          className: "absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer",
          onClick: handleShowPassword,
          children: /* @__PURE__ */ jsx("div", { children: showPassword ? /* @__PURE__ */ jsx(Icons.eye, { className: "stroke-1" }) : /* @__PURE__ */ jsx(Icons.eyeOff, { className: "stroke-1" }) })
        }
      )
    ] });
  }
);
PasswordInput.displayName = "PasswordInput";
const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);
const Label = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  LabelPrimitive.Root,
  {
    ref,
    className: cn(labelVariants(), className),
    ...props
  }
));
Label.displayName = LabelPrimitive.Root.displayName;
const Form = FormProvider;
const FormFieldContext = React.createContext(
  {}
);
const FormField = ({
  ...props
}) => {
  return /* @__PURE__ */ jsx(FormFieldContext.Provider, { value: { name: props.name }, children: /* @__PURE__ */ jsx(Controller, { ...props }) });
};
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();
  const fieldState = getFieldState(fieldContext.name, formState);
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }
  const { id } = itemContext;
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState
  };
};
const FormItemContext = React.createContext(
  {}
);
const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId();
  return /* @__PURE__ */ jsx(FormItemContext.Provider, { value: { id }, children: /* @__PURE__ */ jsx("div", { ref, className: cn("space-y-2", className), ...props }) });
});
FormItem.displayName = "FormItem";
const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();
  return /* @__PURE__ */ jsx(
    Label,
    {
      ref,
      className: cn(error && "text-destructive", className),
      htmlFor: formItemId,
      ...props
    }
  );
});
FormLabel.displayName = "FormLabel";
const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
  return /* @__PURE__ */ jsx(
    Slot,
    {
      ref,
      id: formItemId,
      "aria-describedby": !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`,
      "aria-invalid": !!error,
      ...props
    }
  );
});
FormControl.displayName = "FormControl";
const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();
  return /* @__PURE__ */ jsx(
    "p",
    {
      ref,
      id: formDescriptionId,
      className: cn("text-sm text-muted-foreground", className),
      ...props
    }
  );
});
FormDescription.displayName = "FormDescription";
const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error == null ? void 0 : error.message) : children;
  if (!body) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    "p",
    {
      ref,
      id: formMessageId,
      className: cn("text-sm font-medium text-destructive", className),
      ...props,
      children: body
    }
  );
});
FormMessage.displayName = "FormMessage";
const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default"
    }
  }
);
const LoadingButton = React.forwardRef(
  ({ className, variant, size, asChild = false, loading, children, ...props }, ref) => {
    if (asChild) {
      return /* @__PURE__ */ jsx(Slot, { ref, ...props, children: /* @__PURE__ */ jsx(Fragment, { children: React.Children.map(children, (child) => {
        var _a;
        return React.cloneElement(child, {
          // @ts-ignore
          className: cn(buttonVariants({ variant, size }), className),
          children: /* @__PURE__ */ jsxs(Fragment, { children: [
            loading && /* @__PURE__ */ jsx(Loader2, { className: cn("h-4 w-4 animate-spin", children && "mr-2") }),
            (_a = child == null ? void 0 : child.props) == null ? void 0 : _a.children
          ] })
        });
      }) }) });
    }
    return /* @__PURE__ */ jsx(
      "button",
      {
        className: cn(buttonVariants({ variant, size, className })),
        disabled: loading,
        ref,
        ...props,
        children: /* @__PURE__ */ jsxs(Fragment, { children: [
          loading && /* @__PURE__ */ jsx(Loader2, { className: cn("h-4 w-4 animate-spin", children && "mr-2") }),
          children
        ] })
      }
    );
  }
);
LoadingButton.displayName = "LoadingButton";
const Checkbox = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  CheckboxPrimitive.Root,
  {
    ref,
    className: cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-zinc-200 border-zinc-900 shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-zinc-950 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-zinc-900 data-[state=checked]:text-zinc-50 dark:border-zinc-800 dark:border-zinc-50 dark:focus-visible:ring-zinc-300 dark:data-[state=checked]:bg-zinc-50 dark:data-[state=checked]:text-zinc-900",
      className
    ),
    ...props,
    children: /* @__PURE__ */ jsx(
      CheckboxPrimitive.Indicator,
      {
        className: cn("flex items-center justify-center text-current"),
        children: /* @__PURE__ */ jsx(Check, { className: "h-4 w-4" })
      }
    )
  }
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;
const signinSchema = z.object({
  username: z.string().min(2).optional(),
  password: z.string().min(2).max(100).optional()
});
function SignInForm() {
  const navigate = useNavigate();
  const form = useForm({
    resolver: zodResolver(signinSchema)
    // defaultValues: {
    // 	email: "bob@test.com",
    // 	password: "Qwerty12#$",
    // },
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isMetamask, setIsMetamask] = useState(false);
  const { toast: toast2 } = useToast();
  const { login } = useAuth();
  const onSubmit = async (values) => {
    setIsSubmitting(true);
    try {
      const { username, password } = values;
      if (username && password) {
        if (await login(username, password)) {
          navigate("/admin/contract");
        } else {
          toast2({
            title: "Σφάλμα",
            description: "Λάθος στοιχεία σύνδεσης",
            variant: "destructive"
          });
        }
      } else {
        await login(void 0, void 0);
        navigate("/vote");
        toast2({
          title: "Επιτυχία",
          description: `Επιτυχής Σύνδεση.`,
          variant: "default"
        });
      }
    } catch (error) {
      console.error(error);
      toast2({
        title: "Σφάλμα",
        description: "Κάτι πήγε στραβά",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  return /* @__PURE__ */ jsx("div", { className: "grid gap-6", children: /* @__PURE__ */ jsx(Form, { ...form, children: /* @__PURE__ */ jsx("form", { className: "space-y-4", onSubmit: form.handleSubmit(onSubmit), children: /* @__PURE__ */ jsx("div", { className: "grid gap-4", children: /* @__PURE__ */ jsxs("div", { className: "grid gap-2", children: [
    !isMetamask && /* @__PURE__ */ jsx(
      FormField,
      {
        control: form.control,
        name: "username",
        render: ({ field }) => /* @__PURE__ */ jsxs(FormItem, { children: [
          /* @__PURE__ */ jsx(FormLabel, { children: "Όνομα Χρήστη" }),
          /* @__PURE__ */ jsx(FormControl, { children: /* @__PURE__ */ jsx(
            Input,
            {
              ...field,
              placeholder: "Όνομα Χρήστη",
              disabled: isSubmitting
            }
          ) }),
          /* @__PURE__ */ jsx(FormMessage, {})
        ] })
      }
    ),
    !isMetamask && /* @__PURE__ */ jsx(
      FormField,
      {
        control: form.control,
        name: "password",
        render: ({ field }) => /* @__PURE__ */ jsxs(FormItem, { children: [
          /* @__PURE__ */ jsx(FormLabel, { children: "Κωδικός Πρόσβασης" }),
          /* @__PURE__ */ jsx(FormControl, { children: /* @__PURE__ */ jsx(
            PasswordInput,
            {
              ...field,
              placeholder: "Κωδικός Πρόσβασης",
              disabled: isSubmitting
            }
          ) }),
          /* @__PURE__ */ jsx(FormMessage, {})
        ] })
      }
    ),
    /* @__PURE__ */ jsx(LoadingButton, { loading: isSubmitting, disabled: isSubmitting, type: "submit", className: "w-full mt-2", children: "Σύνδεση" }),
    /* @__PURE__ */ jsxs("div", { className: "flex items-center space-x-2", children: [
      /* @__PURE__ */ jsx(
        Checkbox,
        {
          id: "terms",
          checked: isMetamask,
          onClick: () => setIsMetamask((isMetamask2) => !isMetamask2)
        }
      ),
      /* @__PURE__ */ jsx(
        "label",
        {
          htmlFor: "terms",
          className: "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
          children: "Σύνδεση με Metamask"
        }
      )
    ] })
  ] }) }) }) }) });
}
const Card = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "div",
  {
    ref,
    className: cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    ),
    ...props
  }
));
Card.displayName = "Card";
const CardHeader = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "div",
  {
    ref,
    className: cn("flex flex-col space-y-1.5 p-6", className),
    ...props
  }
));
CardHeader.displayName = "CardHeader";
const CardTitle = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "h3",
  {
    ref,
    className: cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    ),
    ...props
  }
));
CardTitle.displayName = "CardTitle";
const CardDescription = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "p",
  {
    ref,
    className: cn("text-sm text-muted-foreground", className),
    ...props
  }
));
CardDescription.displayName = "CardDescription";
const CardContent = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx("div", { ref, className: cn("p-6 pt-0", className), ...props }));
CardContent.displayName = "CardContent";
const CardFooter = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  "div",
  {
    ref,
    className: cn("flex items-center p-6 pt-0", className),
    ...props
  }
));
CardFooter.displayName = "CardFooter";
function SignIn() {
  return /* @__PURE__ */ jsx("div", { className: "flex justify-center items-center", children: /* @__PURE__ */ jsx(Card, { className: "p-8", children: /* @__PURE__ */ jsxs("div", { className: "mx-auto flex  flex-col justify-center space-y-6 w-[350px] ", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex flex-col space-y-2 text-center", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold tracking-tight", children: "Σύνδεση" }),
      /* @__PURE__ */ jsx("p", { className: "text-sm text-muted-foreground", children: "Εισάγετε τα στοιχεία σύνδεσής σας" })
    ] }),
    /* @__PURE__ */ jsx(Suspense, { fallback: /* @__PURE__ */ jsx("div", { children: "Loading..." }), children: /* @__PURE__ */ jsx(SignInForm, {}) })
  ] }) }) });
}
function meta$7({}) {
  return [{
    title: "Σύνδεση"
  }, {
    name: "description",
    content: "Συνδεθείτε στην ψηφοφορία"
  }];
}
const signin = withComponentProps(function SigninRoute() {
  return /* @__PURE__ */ jsx(SignIn, {});
});
const route3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: signin,
  meta: meta$7
}, Symbol.toStringTag, { value: "Module" }));
let web3 = null;
if (typeof window !== "undefined") {
  if (typeof window.ethereum !== "undefined") {
    web3 = new Web3(window.ethereum);
    try {
      window.ethereum.request({ method: "eth_requestAccounts" });
    } catch (error) {
      console.error("User denied account access", error);
    }
  } else {
    console.warn("MetaMask is not installed. Please install MetaMask to use this app.");
  }
} else {
  console.error("This code is running outside the browser. 'window' is not available.");
}
const web3$1 = web3;
const signupSchema = z.object({
  fullName: z.string().min(2)
});
function SignUpForm() {
  useNavigate();
  const form = useForm({
    resolver: zodResolver(signupSchema),
    defaultValues: {
      fullName: ""
    }
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast: toast2 } = useToast();
  useAuth();
  const onSubmit = async (values) => {
    setIsSubmitting(true);
    if (!web3$1) {
      toast2({
        title: "Σφάλμα",
        description: "Δεν υπάρχει σύνδεση με το δίκτυο",
        variant: "destructive"
      });
      return;
    }
    try {
      const { fullName } = values;
      if (!fullName) {
        toast2({
          title: "Σφάλμα",
          description: "Το όνομα είναι υποχρεωτικό",
          variant: "destructive"
        });
        return;
      }
      const contract2 = await getContractInstance();
      const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
      const account = accounts[0];
      const voter = await contract2.methods.getVoter(account).call();
      if (voter[1]) {
        toast2({
          title: "Σφάλμα",
          description: "Είστε ήδη εγγεγραμμένος.",
          variant: "destructive"
        });
        return;
      }
      const tx = await contract2.methods.registerVoter(account, fullName).send({ from: account });
      toast2({
        title: "Επιτυχία",
        description: `Ο ψηφοφόρος ${fullName} εγγράφηκε με επιτυχία.`,
        variant: "default"
      });
      console.log(`Voter registered: ${fullName} - Tx: ${tx.transactionHash}`);
    } catch (error) {
      console.error(error);
      toast2({
        title: "Σφάλμα",
        description: "Κάτι πήγε στραβά",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  return /* @__PURE__ */ jsx("div", { className: "grid gap-6", children: /* @__PURE__ */ jsx(Form, { ...form, children: /* @__PURE__ */ jsx("form", { className: "space-y-4", onSubmit: form.handleSubmit(onSubmit), children: /* @__PURE__ */ jsx("div", { className: "grid gap-4", children: /* @__PURE__ */ jsxs("div", { className: "grid gap-2", children: [
    /* @__PURE__ */ jsx(
      FormField,
      {
        control: form.control,
        name: "fullName",
        render: ({ field }) => /* @__PURE__ */ jsxs(FormItem, { children: [
          /* @__PURE__ */ jsx(FormLabel, { children: "Οναματεπώνυμο" }),
          /* @__PURE__ */ jsx(FormControl, { children: /* @__PURE__ */ jsx(
            Input,
            {
              ...field,
              placeholder: "Όνοματεπώνυμο",
              disabled: isSubmitting
            }
          ) }),
          /* @__PURE__ */ jsx(FormMessage, {})
        ] })
      }
    ),
    /* @__PURE__ */ jsx(LoadingButton, { loading: isSubmitting, disabled: isSubmitting, type: "submit", className: "w-full mt-2", children: "Εγγραφή" })
  ] }) }) }) }) });
}
function Signup() {
  return /* @__PURE__ */ jsx("div", { className: "flex justify-center items-center", children: /* @__PURE__ */ jsx(Card, { className: "p-8", children: /* @__PURE__ */ jsxs("div", { className: "mx-auto flex  flex-col justify-center space-y-6 w-[350px] ", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex flex-col space-y-2 text-center", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold tracking-tight", children: "Eγγραφή" }),
      /* @__PURE__ */ jsx("p", { className: "text-sm text-muted-foreground", children: "Εισάγετε το οναματεπώνυμο σας" })
    ] }),
    /* @__PURE__ */ jsx(Suspense, { fallback: /* @__PURE__ */ jsx("div", { children: "Loading..." }), children: /* @__PURE__ */ jsx(SignUpForm, {}) })
  ] }) }) });
}
function meta$6({}) {
  return [{
    title: "Εγγραφή"
  }, {
    name: "description",
    content: "Εγγραφή"
  }];
}
const signup = withComponentProps(function VoteRoute() {
  return /* @__PURE__ */ jsx(Signup, {});
});
const route4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: signup,
  meta: meta$6
}, Symbol.toStringTag, { value: "Module" }));
const THEMES = { light: "", dark: ".dark" };
const ChartContext = React.createContext(null);
function useChart() {
  const context = React.useContext(ChartContext);
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }
  return context;
}
const ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;
  return /* @__PURE__ */ jsx(ChartContext.Provider, { value: { config }, children: /* @__PURE__ */ jsxs(
    "div",
    {
      "data-chart": chartId,
      ref,
      className: cn(
        "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
        className
      ),
      ...props,
      children: [
        /* @__PURE__ */ jsx(ChartStyle, { id: chartId, config }),
        /* @__PURE__ */ jsx(RechartsPrimitive.ResponsiveContainer, { children })
      ]
    }
  ) });
});
ChartContainer.displayName = "Chart";
const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config2]) => config2.theme || config2.color
  );
  if (!colorConfig.length) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    "style",
    {
      dangerouslySetInnerHTML: {
        __html: Object.entries(THEMES).map(
          ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig.map(([key, itemConfig]) => {
            var _a;
            const color = ((_a = itemConfig.theme) == null ? void 0 : _a[theme]) || itemConfig.color;
            return color ? `  --color-${key}: ${color};` : null;
          }).join("\n")}
}
`
        ).join("\n")
      }
    }
  );
};
const ChartTooltip = RechartsPrimitive.Tooltip;
const ChartTooltipContent = React.forwardRef(
  ({
    active,
    payload,
    className,
    indicator = "dot",
    hideLabel = false,
    hideIndicator = false,
    label,
    labelFormatter,
    labelClassName,
    formatter,
    color,
    nameKey,
    labelKey
  }, ref) => {
    const { config } = useChart();
    const tooltipLabel = React.useMemo(() => {
      var _a;
      if (hideLabel || !(payload == null ? void 0 : payload.length)) {
        return null;
      }
      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value = !labelKey && typeof label === "string" ? ((_a = config[label]) == null ? void 0 : _a.label) || label : itemConfig == null ? void 0 : itemConfig.label;
      if (labelFormatter) {
        return /* @__PURE__ */ jsx("div", { className: cn("font-medium", labelClassName), children: labelFormatter(value, payload) });
      }
      if (!value) {
        return null;
      }
      return /* @__PURE__ */ jsx("div", { className: cn("font-medium", labelClassName), children: value });
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey
    ]);
    if (!active || !(payload == null ? void 0 : payload.length)) {
      return null;
    }
    const nestLabel = payload.length === 1 && indicator !== "dot";
    return /* @__PURE__ */ jsxs(
      "div",
      {
        ref,
        className: cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-zinc-200 border-zinc-200/50 bg-white px-2.5 py-1.5 text-xs shadow-xl dark:border-zinc-800 dark:border-zinc-800/50 dark:bg-zinc-950",
          className
        ),
        children: [
          !nestLabel ? tooltipLabel : null,
          /* @__PURE__ */ jsx("div", { className: "grid gap-1.5", children: payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;
            return /* @__PURE__ */ jsx(
              "div",
              {
                className: cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-zinc-500 dark:[&>svg]:text-zinc-400",
                  indicator === "dot" && "items-center"
                ),
                children: formatter && (item == null ? void 0 : item.value) !== void 0 && item.name ? formatter(item.value, item.name, item, index, item.payload) : /* @__PURE__ */ jsxs(Fragment, { children: [
                  (itemConfig == null ? void 0 : itemConfig.icon) ? /* @__PURE__ */ jsx(itemConfig.icon, {}) : !hideIndicator && /* @__PURE__ */ jsx(
                    "div",
                    {
                      className: cn(
                        "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                        {
                          "h-2.5 w-2.5": indicator === "dot",
                          "w-1": indicator === "line",
                          "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                          "my-0.5": nestLabel && indicator === "dashed"
                        }
                      ),
                      style: {
                        "--color-bg": indicatorColor,
                        "--color-border": indicatorColor
                      }
                    }
                  ),
                  /* @__PURE__ */ jsxs(
                    "div",
                    {
                      className: cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      ),
                      children: [
                        /* @__PURE__ */ jsxs("div", { className: "grid gap-1.5", children: [
                          nestLabel ? tooltipLabel : null,
                          /* @__PURE__ */ jsx("span", { className: "text-zinc-500 dark:text-zinc-400", children: (itemConfig == null ? void 0 : itemConfig.label) || item.name })
                        ] }),
                        item.value && /* @__PURE__ */ jsx("span", { className: "font-mono font-medium tabular-nums text-zinc-950 dark:text-zinc-50", children: item.value.toLocaleString() })
                      ]
                    }
                  )
                ] })
              },
              item.dataKey
            );
          }) })
        ]
      }
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltip";
const ChartLegendContent = React.forwardRef(
  ({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
    const { config } = useChart();
    if (!(payload == null ? void 0 : payload.length)) {
      return null;
    }
    return /* @__PURE__ */ jsx(
      "div",
      {
        ref,
        className: cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        ),
        children: payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);
          return /* @__PURE__ */ jsxs(
            "div",
            {
              className: cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-zinc-500 dark:[&>svg]:text-zinc-400"
              ),
              children: [
                (itemConfig == null ? void 0 : itemConfig.icon) && !hideIcon ? /* @__PURE__ */ jsx(itemConfig.icon, {}) : /* @__PURE__ */ jsx(
                  "div",
                  {
                    className: "h-2 w-2 shrink-0 rounded-[2px]",
                    style: {
                      backgroundColor: item.color
                    }
                  }
                ),
                itemConfig == null ? void 0 : itemConfig.label
              ]
            },
            item.value
          );
        })
      }
    );
  }
);
ChartLegendContent.displayName = "ChartLegend";
function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return void 0;
  }
  const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload : void 0;
  let configLabelKey = key;
  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key];
  } else if (payloadPayload && key in payloadPayload && typeof payloadPayload[key] === "string") {
    configLabelKey = payloadPayload[key];
  }
  return configLabelKey in config ? config[configLabelKey] : config[key];
}
const chartConfig = {
  voted: {
    label: "Ψήφισαν",
    color: "hsl(var(--chart-1))"
  },
  notVoted: {
    label: "Δεν ψήφισαν",
    color: "hsl(var(--chart-2))"
  }
};
function TotalVoters() {
  const [voters2, setVoters] = useState([]);
  const [refresh, setRefresh] = useState(false);
  const [voted, setVoted] = useState(0);
  useEffect(() => {
    const fetchVoters = async () => {
      try {
        const contract2 = await getContractInstance();
        const voters22 = await contract2.methods.getAllVoters().call();
        const parsedVoters = voters22.map((voter) => ({
          fullName: voter.fullName,
          isRegistered: voter.isRegistered,
          hasVoted: voter.hasVoted
        }));
        const voted2 = parsedVoters.filter((voter) => voter.hasVoted).length;
        setVoted(voted2);
        setVoters(parsedVoters);
      } catch (err) {
        toast({ title: "Σφάλμα", description: err.message, variant: "destructive" });
      }
    };
    fetchVoters();
  }, [refresh]);
  const chartData = [{ voted, notVoted: voters2.length - voted }];
  return /* @__PURE__ */ jsxs(Card, { className: "flex flex-col mb-8", children: [
    /* @__PURE__ */ jsxs(CardHeader, { className: "items-center pb-0", children: [
      /* @__PURE__ */ jsxs(CardTitle, { children: [
        "Ψήφισαν: ",
        voted || 0
      ] }),
      /* @__PURE__ */ jsxs(CardDescription, { children: [
        "Εγγεγραμμένοι ψηφοφόροι: ",
        voters2.length
      ] })
    ] }),
    /* @__PURE__ */ jsx(CardContent, { className: "flex flex-1 items-center pb-0", children: /* @__PURE__ */ jsx(
      ChartContainer,
      {
        config: chartConfig,
        className: "mx-auto aspect-square w-full max-w-[250px]",
        children: /* @__PURE__ */ jsxs(
          RadialBarChart,
          {
            data: chartData,
            endAngle: 180,
            innerRadius: 80,
            outerRadius: 130,
            children: [
              /* @__PURE__ */ jsx(
                ChartTooltip,
                {
                  cursor: false,
                  content: /* @__PURE__ */ jsx(ChartTooltipContent, { hideLabel: true })
                }
              ),
              /* @__PURE__ */ jsx(PolarRadiusAxis, { tick: false, tickLine: false, axisLine: false, children: /* @__PURE__ */ jsx(
                Label$1,
                {
                  content: ({ viewBox }) => {
                    if (viewBox && "cx" in viewBox && "cy" in viewBox) {
                      return /* @__PURE__ */ jsxs("text", { x: viewBox.cx, y: viewBox.cy, textAnchor: "middle", children: [
                        /* @__PURE__ */ jsx(
                          "tspan",
                          {
                            x: viewBox.cx,
                            y: (viewBox.cy || 0) - 16,
                            className: "fill-foreground text-2xl font-bold",
                            children: voted.toLocaleString()
                          }
                        ),
                        /* @__PURE__ */ jsx(
                          "tspan",
                          {
                            x: viewBox.cx,
                            y: (viewBox.cy || 0) + 4,
                            className: "fill-muted-foreground",
                            children: "Ψήφισαν"
                          }
                        )
                      ] });
                    }
                  }
                }
              ) }),
              /* @__PURE__ */ jsx(
                RadialBar,
                {
                  dataKey: "voted",
                  stackId: "a",
                  cornerRadius: 5,
                  fill: "hsl(var(--chart-1))",
                  className: "stroke-transparent stroke-2"
                }
              ),
              /* @__PURE__ */ jsx(
                RadialBar,
                {
                  dataKey: "notVoted",
                  fill: "hsl(var(--chart-2))",
                  stackId: "a",
                  cornerRadius: 5,
                  className: "stroke-transparent stroke-2"
                }
              )
            ]
          }
        )
      }
    ) })
  ] });
}
const Results = () => {
  const [candidates2, setCandidates] = useState([]);
  const [refresh, setRefresh] = useState(false);
  const [groupedCandidates, setGroupedCandidates] = useState({});
  const groupByParty = (candidates22) => {
    const grouped = candidates22.reduce((acc, candidate) => {
      if (!acc[candidate.party]) {
        acc[candidate.party] = [];
      }
      acc[candidate.party].push(candidate);
      return acc;
    }, {});
    setGroupedCandidates(grouped);
  };
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const contract2 = await getContractInstance();
        const candidates22 = await contract2.methods.getAllCandidates().call();
        const parsedCandidates = candidates22.map((candidate) => ({
          id: candidate[0],
          name: candidate[1],
          party: candidate[2],
          voteCount: candidate[3]
        }));
        setCandidates(parsedCandidates);
      } catch (err) {
        toast({ title: "Σφάλμα", description: err.message, variant: "destructive" });
      }
    };
    fetchCandidates();
  }, [refresh]);
  useEffect(() => {
    if (candidates2.length > 0) {
      groupByParty(candidates2);
    }
  }, [candidates2]);
  const chartDataParties = Object.entries(groupedCandidates).map(([party, candidates22], i) => ({
    party,
    votes: candidates22.reduce((acc, candidate) => acc + Number(candidate.voteCount), 0),
    fill: `hsl(var(--chart-${i + 1}))`
  }));
  const chartConfigParties = Object.fromEntries(
    Object.entries(groupedCandidates).map(([party, candidates22], index) => [
      party,
      {
        label: party,
        color: `hsl(var(--chart-${index + 1}))`
      }
    ])
  );
  const chartDataCandidates = candidates2.map((candidate, i) => ({
    candidate: candidate.name,
    party: candidate.party,
    votes: Number(candidate.voteCount),
    fill: `hsl(var(--chart-${i + 1}))`
  }));
  return /* @__PURE__ */ jsxs("div", { className: "container mx-auto p-4 max-w-4xl mb-8", children: [
    /* @__PURE__ */ jsx(TotalVoters, {}),
    /* @__PURE__ */ jsxs(Card, { children: [
      /* @__PURE__ */ jsxs(CardHeader, { children: [
        /* @__PURE__ */ jsx(CardTitle, { children: "Αποτελέσματα Εκλογών" }),
        /* @__PURE__ */ jsx(CardDescription, { children: "Αποτελέσματα Κομμάτων" })
      ] }),
      /* @__PURE__ */ jsx(CardContent, { children: /* @__PURE__ */ jsx(ChartContainer, { config: chartConfigParties, children: /* @__PURE__ */ jsxs(
        BarChart,
        {
          accessibilityLayer: true,
          data: chartDataParties,
          layout: "vertical",
          margin: {
            left: 0
          },
          children: [
            /* @__PURE__ */ jsx(
              YAxis,
              {
                dataKey: "party",
                type: "category",
                tickLine: false,
                tickMargin: 10,
                axisLine: false
              }
            ),
            /* @__PURE__ */ jsx(XAxis, { dataKey: "votes", type: "number" }),
            /* @__PURE__ */ jsx(
              ChartTooltip,
              {
                cursor: false,
                content: /* @__PURE__ */ jsx(ChartTooltipContent, { hideLabel: true })
              }
            ),
            /* @__PURE__ */ jsx(Bar, { dataKey: "votes", layout: "vertical", radius: 5 })
          ]
        }
      ) }) })
    ] }),
    Object.keys(groupedCandidates).map((party) => /* @__PURE__ */ jsxs(Card, { className: "mt-4", children: [
      /* @__PURE__ */ jsxs(CardHeader, { children: [
        /* @__PURE__ */ jsx(CardTitle, { children: "Αποτελέσματα Εκλογών" }),
        /* @__PURE__ */ jsxs(CardDescription, { children: [
          "Αποτελέσματα ",
          party.toUpperCase()
        ] })
      ] }),
      /* @__PURE__ */ jsx(CardContent, { children: /* @__PURE__ */ jsx(ChartContainer, { config: chartConfigParties, children: /* @__PURE__ */ jsxs(
        BarChart,
        {
          accessibilityLayer: true,
          data: chartDataCandidates.filter((candidate) => candidate.party === party),
          layout: "vertical",
          margin: {
            left: 0
          },
          children: [
            /* @__PURE__ */ jsx(
              YAxis,
              {
                dataKey: "candidate",
                type: "category",
                tickLine: false,
                tickMargin: 10,
                axisLine: false
              }
            ),
            /* @__PURE__ */ jsx(XAxis, { dataKey: "votes", type: "number" }),
            /* @__PURE__ */ jsx(
              ChartTooltip,
              {
                cursor: false,
                content: /* @__PURE__ */ jsx(ChartTooltipContent, { hideLabel: true })
              }
            ),
            /* @__PURE__ */ jsx(Bar, { dataKey: "votes", layout: "vertical", radius: 5 })
          ]
        }
      ) }) })
    ] })),
    /* @__PURE__ */ jsx("div", { className: "h-10" })
  ] });
};
function meta$5({}) {
  return [{
    title: "Αποτελέσματα"
  }, {
    name: "description",
    content: "Αποτελέσματα"
  }];
}
const results = withComponentProps(function ResultsRoute() {
  return /* @__PURE__ */ jsx(Results, {});
});
const route5 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: results,
  meta: meta$5
}, Symbol.toStringTag, { value: "Module" }));
const Crossbox = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  CheckboxPrimitive.Root,
  {
    ref,
    className: cn(
      "peer h-8 w-8 shrink-0 rounded-sm border border-zinc-200 border-zinc-900 shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-zinc-950 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-zinc-900 data-[state=checked]:text-zinc-50 dark:border-zinc-800 dark:border-zinc-50 dark:focus-visible:ring-zinc-300 dark:data-[state=checked]:bg-zinc-50 dark:data-[state=checked]:text-zinc-900",
      className
    ),
    ...props,
    children: /* @__PURE__ */ jsx(
      CheckboxPrimitive.Indicator,
      {
        className: cn("flex items-center justify-center text-current"),
        children: /* @__PURE__ */ jsx(Plus, { className: "h-8 w-8fill-white" })
      }
    )
  }
));
Crossbox.displayName = CheckboxPrimitive.Root.displayName;
function CandidatesList({ disabled, refresh, setRefresh, selectedCandidates, setSelectedCandidates }) {
  const [candidates2, setCandidates] = useState([]);
  const [candidatesMap, setCandidatesMap] = useState(/* @__PURE__ */ new Map());
  const [groupedCandidates, setGroupedCandidates] = useState({});
  const groupByParty = (candidates22) => {
    const grouped = candidates22.reduce((acc, candidate) => {
      if (!acc[candidate.party]) {
        acc[candidate.party] = [];
      }
      acc[candidate.party].push(candidate);
      return acc;
    }, {});
    setGroupedCandidates(grouped);
  };
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const contract2 = await getContractInstance();
        const candidates22 = await contract2.methods.getAllCandidates().call();
        const parsedCandidates = candidates22.map((candidate) => ({
          id: Number(candidate.id),
          name: candidate.name,
          party: candidate.party
        }));
        setCandidates(parsedCandidates);
        const cdMap = /* @__PURE__ */ new Map();
        candidates22.forEach(
          (candidate) => {
            cdMap.set(Number(candidate.id), {
              id: Number(candidate.id),
              name: candidate.name,
              party: candidate.party,
              voteCount: candidate.voteCount
            });
          }
        );
        setCandidatesMap(cdMap);
      } catch (err) {
        toast({ title: "Σφάλμα", description: err.message, variant: "destructive" });
      }
    };
    fetchCandidates();
  }, [refresh]);
  useEffect(() => {
    if (candidates2.length > 0) {
      groupByParty(candidates2);
    }
  }, [candidates2]);
  return /* @__PURE__ */ jsxs("div", { className: "w-full flex flex-col items-center", children: [
    /* @__PURE__ */ jsxs("div", { className: "flex w-min", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold", children: "Υποψήφιοι" }),
      /* @__PURE__ */ jsx(Button, { variant: "link", onClick: () => setRefresh(!refresh), children: "Ανανέωση" })
    ] }),
    /* @__PURE__ */ jsx("ul", { className: "pt-4 w-full flex flex-row gap-2 justify-around flex-wrap", children: Object.keys(groupedCandidates).map((party) => /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsxs(Card, { className: "rounded-lg border p-6 w-96 max-w-md  min-h-56 sm:max-w-lg md:max-w-2xl", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-bold", children: party }),
      /* @__PURE__ */ jsx("h2", { className: "text-sm text-muted-foreground pt-2", children: "Επιλέξτε μέχρι 2 υποψηφίους " }),
      /* @__PURE__ */ jsx("ul", { className: "pt-2", children: groupedCandidates[party].map((candidate) => /* @__PURE__ */ jsx("div", { className: "flex items-center pt-2", children: /* @__PURE__ */ jsx(Label, { htmlFor: "candidate2", className: "flex-1 cursor-pointer", children: /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ jsx("span", { className: "font-medium text-lg", children: candidate.name }),
        /* @__PURE__ */ jsx(
          Crossbox,
          {
            className: "text-muted-foreground",
            disabled,
            checked: disabled || (selectedCandidates == null ? void 0 : selectedCandidates.includes(candidate.id)),
            onClick: () => {
              if (selectedCandidates && (selectedCandidates == null ? void 0 : selectedCandidates.some((candidateId) => {
                var _a;
                return ((_a = candidatesMap.get(candidateId)) == null ? void 0 : _a.party) !== party;
              }))) {
                toast({ title: "Σφάλμα", description: "Δεν μπορείτε να ψηφίσετε υποψηφίους από διαφορετικά κόμματα", variant: "destructive" });
                return;
              }
              if (selectedCandidates == null ? void 0 : selectedCandidates.includes(candidate.id)) {
                setSelectedCandidates && setSelectedCandidates(selectedCandidates.filter((id) => id !== candidate.id));
              } else {
                if ((selectedCandidates == null ? void 0 : selectedCandidates.length) === 2) {
                  toast({ title: "Σφάλμα", description: "Μπορείτε να επιλέξετε μόνο 2 υποψηφίους", variant: "destructive" });
                } else {
                  setSelectedCandidates && setSelectedCandidates([...selectedCandidates, candidate.id]);
                }
              }
            }
          }
        )
      ] }) }) }, candidate.id)) })
    ] }) }, party)) })
  ] });
}
const App2 = () => {
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [message, setMessage] = useState("");
  const [refresh, setRefresh] = useState(false);
  useEffect(() => {
    const fetchCandidates = async () => {
      const contract2 = await getContractInstance();
      const candidatesCount = await contract2.methods.candidatesCount().call();
      const candidatesList = [];
      for (let i = 1; i <= candidatesCount; i++) {
        const candidate = await contract2.methods.getCandidate(i).call();
        candidatesList.push({
          id: candidate[0],
          name: candidate[1],
          voteCount: candidate[2]
        });
      }
    };
    fetchCandidates();
  }, []);
  const handleVote = async () => {
    const contract2 = await getContractInstance();
    const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
    const account = accounts[0];
    const voter = await contract2.methods.getVoter(account).call();
    if (voter[2]) {
      setMessage("Έχετε ψηφίσει ήδη.");
      toast({ title: "Σφάλμα", description: "Έχετε ψηφίσει ήδη.", variant: "destructive" });
      return;
    }
    setMessage("Καταχωρούμε την ψήφο σας...");
    try {
      alert(selectedCandidates);
      const tx = await contract2.methods.vote(selectedCandidates).send({ from: account });
      toast({ title: "Επιτυχία", description: "Η ψήφος σας καταχωρήθηκε.", variant: "default" });
      setMessage("Η ψήφος σας καταχωρήθηκε.");
    } catch (error) {
      if (error instanceof Error)
        setMessage(error.message);
    }
  };
  return /* @__PURE__ */ jsxs("div", { className: "container mx-auto p-4", children: [
    /* @__PURE__ */ jsxs("div", { className: "w-full flex  flex-col items-center pb-4", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-bold", children: "Ψηφίστε" }),
      /* @__PURE__ */ jsx(Button, { className: "mt-4", onClick: handleVote, children: "Καταχωρίστε την ψήφο σας" }),
      message && /* @__PURE__ */ jsx("p", { className: "mt-4 text-red-500", children: message })
    ] }),
    /* @__PURE__ */ jsx(CandidatesList, { refresh, setRefresh, selectedCandidates, setSelectedCandidates })
  ] });
};
function meta$4({}) {
  return [{
    title: "Ψηφοφορία"
  }, {
    name: "description",
    content: "Ψηφοφορία"
  }];
}
const vote = withComponentProps(function VoteRoute2() {
  return /* @__PURE__ */ jsx(App2, {});
});
const route6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: vote,
  meta: meta$4
}, Symbol.toStringTag, { value: "Module" }));
const Accordion = AccordionPrimitive.Root;
const AccordionItem = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  AccordionPrimitive.Item,
  {
    ref,
    className: cn("border-b", className),
    ...props
  }
));
AccordionItem.displayName = "AccordionItem";
const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ jsx(AccordionPrimitive.Header, { className: "flex", children: /* @__PURE__ */ jsxs(
  AccordionPrimitive.Trigger,
  {
    ref,
    className: cn(
      "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180",
      className
    ),
    ...props,
    children: [
      children,
      /* @__PURE__ */ jsx(ChevronDown, { className: "h-4 w-4 shrink-0 text-zinc-500 transition-transform duration-200 dark:text-zinc-400" })
    ]
  }
) }));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;
const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ jsx(
  AccordionPrimitive.Content,
  {
    ref,
    className: "overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
    ...props,
    children: /* @__PURE__ */ jsx("div", { className: cn("pb-4 pt-0", className), children })
  }
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;
const Contract = () => {
  const [contractAddress2, setContractAddress] = useState(null);
  const [contractInfo, setContractInfo] = useState(null);
  useToast();
  useEffect(() => {
    const contractInstance = VotingContract;
    setContractInfo(contractInstance);
    const getContractAddress = async () => {
      const contract2 = await getContractInstance();
      const contractAddress22 = contract2.options.address;
      setContractAddress(contractAddress22);
    };
    getContractAddress();
  }, []);
  return /* @__PURE__ */ jsxs("div", { children: [
    contractInfo && /* @__PURE__ */ jsxs("div", { className: "prose pb-4 max-w-[800px]", children: [
      /* @__PURE__ */ jsx("h2", { className: "font-bold text-xl pb-2 ", children: "Πληροφορίες Contract" }),
      /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-2 w-fit", children: [
        /* @__PURE__ */ jsx("span", { className: "font-bold", children: "Διεύθυνση: " }),
        " ",
        /* @__PURE__ */ jsx("span", { className: "break-all  whitespace-pre-wrap ", children: contractAddress2 }),
        /* @__PURE__ */ jsx("span", { className: "font-bold pt-4", children: "ABI:" }),
        " ",
        /* @__PURE__ */ jsx(Accordion, { type: "single", collapsible: true, children: /* @__PURE__ */ jsxs(AccordionItem, { value: "item-1", children: [
          /* @__PURE__ */ jsx(AccordionTrigger, { children: "Προβολή ABI" }),
          /* @__PURE__ */ jsx(AccordionContent, { children: /* @__PURE__ */ jsx("pre", { className: "break-all  whitespace-pre-wrap ", children: JSON.stringify(contractInfo.abi, null, 2) }) })
        ] }) })
      ] })
    ] }),
    /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(Accordion, { type: "single", collapsible: true, className: " w-[800px] mt-4", children: /* @__PURE__ */ jsxs(AccordionItem, { value: "item-1", children: [
      /* @__PURE__ */ jsx(AccordionTrigger, { children: "Προβολή Contract" }),
      /* @__PURE__ */ jsx(AccordionContent, { children: /* @__PURE__ */ jsx("pre", { className: "break-all  whitespace-pre-wrap ", children: JSON.stringify(VotingContract, null, 2) }) })
    ] }) }) })
  ] });
};
function meta$3({}) {
  return [{
    title: "Contract"
  }, {
    name: "description",
    content: "Ανεβάστε το contract"
  }];
}
const contract = withComponentProps(function DeployContractRoute() {
  return /* @__PURE__ */ jsx(Contract, {});
});
const route7 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: contract,
  meta: meta$3
}, Symbol.toStringTag, { value: "Module" }));
const DialogPortal = DialogPrimitive.Portal;
const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Overlay,
  {
    ref,
    className: cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    ),
    ...props
  }
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;
const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ jsxs(DialogPortal, { children: [
  /* @__PURE__ */ jsx(DialogOverlay, {}),
  /* @__PURE__ */ jsxs(
    DialogPrimitive.Content,
    {
      ref,
      className: cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-zinc-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg dark:border-zinc-800 dark:bg-zinc-950",
        className
      ),
      ...props,
      children: [
        children,
        /* @__PURE__ */ jsxs(DialogPrimitive.Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-white transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-zinc-950 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-zinc-100 data-[state=open]:text-zinc-500 dark:ring-offset-zinc-950 dark:focus:ring-zinc-300 dark:data-[state=open]:bg-zinc-800 dark:data-[state=open]:text-zinc-400", children: [
          /* @__PURE__ */ jsx(X, { className: "h-4 w-4" }),
          /* @__PURE__ */ jsx("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
DialogContent.displayName = DialogPrimitive.Content.displayName;
const DialogTitle = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Title,
  {
    ref,
    className: cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    ),
    ...props
  }
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;
const DialogDescription = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  DialogPrimitive.Description,
  {
    ref,
    className: cn("text-sm text-zinc-500 dark:text-zinc-400", className),
    ...props
  }
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;
const Command = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  Command$1,
  {
    ref,
    className: cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-white text-zinc-950 dark:bg-zinc-950 dark:text-zinc-50",
      className
    ),
    ...props
  }
));
Command.displayName = Command$1.displayName;
const CommandInput = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsxs("div", { className: "flex items-center border-b px-3", "cmdk-input-wrapper": "", children: [
  /* @__PURE__ */ jsx(Search, { className: "mr-2 h-4 w-4 shrink-0 opacity-50" }),
  /* @__PURE__ */ jsx(
    Command$1.Input,
    {
      ref,
      className: cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-zinc-500 disabled:cursor-not-allowed disabled:opacity-50 dark:placeholder:text-zinc-400",
        className
      ),
      ...props
    }
  )
] }));
CommandInput.displayName = Command$1.Input.displayName;
const CommandList = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  Command$1.List,
  {
    ref,
    className: cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className),
    ...props
  }
));
CommandList.displayName = Command$1.List.displayName;
const CommandEmpty = React.forwardRef((props, ref) => /* @__PURE__ */ jsx(
  Command$1.Empty,
  {
    ref,
    className: "py-6 text-center text-sm",
    ...props
  }
));
CommandEmpty.displayName = Command$1.Empty.displayName;
const CommandGroup = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  Command$1.Group,
  {
    ref,
    className: cn(
      "overflow-hidden p-1 text-zinc-950 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-zinc-500 dark:text-zinc-50 dark:[&_[cmdk-group-heading]]:text-zinc-400",
      className
    ),
    ...props
  }
));
CommandGroup.displayName = Command$1.Group.displayName;
const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  Command$1.Separator,
  {
    ref,
    className: cn("-mx-1 h-px bg-zinc-200 dark:bg-zinc-800", className),
    ...props
  }
));
CommandSeparator.displayName = Command$1.Separator.displayName;
const CommandItem = React.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ jsx(
  Command$1.Item,
  {
    ref,
    className: cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-zinc-100 data-[selected=true]:text-zinc-900 data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:data-[selected=true]:bg-zinc-800 dark:data-[selected=true]:text-zinc-50",
      className
    ),
    ...props
  }
));
CommandItem.displayName = Command$1.Item.displayName;
const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => /* @__PURE__ */ jsx(PopoverPrimitive.Portal, { children: /* @__PURE__ */ jsx(
  PopoverPrimitive.Content,
  {
    ref,
    align,
    sideOffset,
    className: cn(
      "z-50 w-72 rounded-md border border-zinc-200 bg-white p-4 text-zinc-950 shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-zinc-800 dark:bg-zinc-950 dark:text-zinc-50",
      className
    ),
    ...props
  }
) }));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;
function Datalist({
  options,
  placeholder,
  onValueChange,
  emptyMessage = "Δεν βρέθηκε αποτέλεσμα.",
  className,
  ...props
}) {
  React.useState(false);
  React.useState("");
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs("div", { className: "relative", children: [
    /* @__PURE__ */ jsx(
      Input,
      {
        list: "parties",
        ...props,
        placeholder,
        className: cn(
          "w-full",
          className
        )
      }
    ),
    /* @__PURE__ */ jsx("datalist", { id: "parties", children: options.map((option) => /* @__PURE__ */ jsx("option", { value: option.value }, option.value)) })
  ] }) });
}
const addCandidateSchema$1 = z.object({
  name: z.string().min(2),
  party: z.string().min(2)
});
function Candidates$1() {
  const [refresh, setRefresh] = useState(false);
  const [candidates2, setCandidates] = useState([]);
  const parties = /* @__PURE__ */ new Set();
  candidates2.map((candidate) => parties.add(candidate.party));
  const uniqueParties = Array.from(parties);
  const partyValues = uniqueParties.map((party) => ({ value: party, label: party }));
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const contract2 = await getContractInstance();
        const candidates22 = await contract2.methods.getAllCandidates().call();
        const parsedCandidates = candidates22.map((candidate) => ({
          id: Number(candidate.id),
          name: candidate.name,
          party: candidate.party
        }));
        setCandidates(parsedCandidates);
      } catch (err) {
        toast2({ title: "Σφάλμα", description: err.message, variant: "destructive" });
      }
    };
    fetchCandidates();
  }, [refresh]);
  const form = useForm({
    resolver: zodResolver(addCandidateSchema$1)
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast: toast2 } = useToast();
  const onSubmit = async (data) => {
    setIsSubmitting(true);
    try {
      const contract2 = await getContractInstance();
      const { name: candidateName, party } = data;
      const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
      const adminAccount = accounts[0];
      await contract2.methods.addCandidate(candidateName, party).send({ from: adminAccount });
      setRefresh((refresh2) => !refresh2);
      toast2({ title: "Επιτυχία", description: `Ο υποψήφιος "${candidateName}" προστέθηκε με επιτυχία!`, variant: "default" });
    } catch (err) {
      toast2({ title: "Σφάλμα", description: err.message, variant: "destructive" });
    } finally {
      setIsSubmitting(false);
    }
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col gap-6 w-full items-center", children: [
    /* @__PURE__ */ jsx(Card, { className: "p-4 h-min w-96", children: /* @__PURE__ */ jsx(Form, { ...form, children: /* @__PURE__ */ jsxs("form", { className: "space-y-4", onSubmit: form.handleSubmit(onSubmit), children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold", children: "Προσθήκη Υποψηφίου" }),
      /* @__PURE__ */ jsx("div", { className: "grid gap-4", children: /* @__PURE__ */ jsxs("div", { className: "grid gap-2", children: [
        /* @__PURE__ */ jsx(
          FormField,
          {
            control: form.control,
            name: "name",
            render: ({ field }) => /* @__PURE__ */ jsxs(FormItem, { children: [
              /* @__PURE__ */ jsx(FormLabel, { children: "Όνομα Υποψηφίου" }),
              /* @__PURE__ */ jsx(FormControl, { children: /* @__PURE__ */ jsx(
                Input,
                {
                  ...field,
                  placeholder: "Όνομα Υποψηφίου",
                  disabled: isSubmitting
                }
              ) }),
              /* @__PURE__ */ jsx(FormMessage, {})
            ] })
          }
        ),
        /* @__PURE__ */ jsx(
          FormField,
          {
            control: form.control,
            name: "party",
            render: ({ field }) => /* @__PURE__ */ jsxs(FormItem, { children: [
              /* @__PURE__ */ jsx(FormLabel, { children: "Κόμμα" }),
              /* @__PURE__ */ jsx(FormControl, { children: /* @__PURE__ */ jsx(
                Datalist,
                {
                  ...field,
                  options: partyValues,
                  placeholder: "Κόμμα",
                  onValueChange: (value) => console.log(value)
                }
              ) }),
              /* @__PURE__ */ jsx(FormMessage, {})
            ] })
          }
        ),
        /* @__PURE__ */ jsx(LoadingButton, { loading: isSubmitting, disabled: isSubmitting, type: "submit", className: "w-full mt-2", children: "Προσθήκη Υποψηφίου" })
      ] }) })
    ] }) }) }),
    /* @__PURE__ */ jsx(CandidatesList, { refresh, setRefresh, disabled: true })
  ] });
}
function meta$2({}) {
  return [{
    title: "Υποψήφιοι"
  }, {
    name: "description",
    content: "Υποψήφιοι"
  }];
}
const candidates = withComponentProps(function DeployContractRoute2() {
  return /* @__PURE__ */ jsx(Candidates$1, {});
});
const route8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: candidates,
  meta: meta$2
}, Symbol.toStringTag, { value: "Module" }));
const addCandidateSchema = z.object({
  name: z.string().min(2)
});
function Candidates() {
  const [candidates2, setCandidates] = useState([]);
  const [refresh, setRefresh] = useState(false);
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        const contract2 = await getContractInstance();
        const candidates22 = await contract2.methods.getAllCandidates().call();
        const parsedCandidates = candidates22.map((candidate) => ({
          id: Number(candidate.id),
          name: candidate.name,
          voteCount: Number(candidate.voteCount)
        }));
        setCandidates(parsedCandidates);
      } catch (err) {
        toast2({ title: "Σφάλμα", description: err.message, variant: "destructive" });
      }
    };
    fetchCandidates();
  }, [refresh]);
  const form = useForm({
    resolver: zodResolver(addCandidateSchema)
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast: toast2 } = useToast();
  const onSubmit = async (data) => {
    setIsSubmitting(true);
    try {
      const contract2 = await getContractInstance();
      const { name: candidateName } = data;
      const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
      const adminAccount = accounts[0];
      const candidates22 = await contract2.methods.getAllCandidates().call();
      setCandidates(candidates22);
      await contract2.methods.addCandidate(candidateName).send({ from: adminAccount });
      toast2({ title: "Επιτυχία", description: `Ο υποψήφιος "${candidateName}" προστέθηκε με επιτυχία!`, variant: "default" });
    } catch (err) {
      toast2({ title: "Σφάλμα", description: err.message, variant: "destructive" });
    } finally {
      setIsSubmitting(false);
    }
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col w-96", children: [
    /* @__PURE__ */ jsx(Card, { className: "p-4 h-min", children: /* @__PURE__ */ jsx(Form, { ...form, children: /* @__PURE__ */ jsxs("form", { className: "space-y-4", onSubmit: form.handleSubmit(onSubmit), children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold", children: "Προσθήκη Υποψηφίου" }),
      /* @__PURE__ */ jsx("div", { className: "grid gap-4", children: /* @__PURE__ */ jsxs("div", { className: "grid gap-2", children: [
        /* @__PURE__ */ jsx(
          FormField,
          {
            control: form.control,
            name: "name",
            render: ({ field }) => /* @__PURE__ */ jsxs(FormItem, { children: [
              /* @__PURE__ */ jsx(FormLabel, { children: "Όνομα Υποψηφίου" }),
              /* @__PURE__ */ jsx(FormControl, { children: /* @__PURE__ */ jsx(
                Input,
                {
                  ...field,
                  placeholder: "Όνομα Υποψηφίου",
                  disabled: isSubmitting
                }
              ) }),
              /* @__PURE__ */ jsx(FormMessage, {})
            ] })
          }
        ),
        /* @__PURE__ */ jsx(LoadingButton, { loading: isSubmitting, disabled: isSubmitting, type: "submit", className: "w-full mt-2", children: "Προσθήκη Υποψηφίου" })
      ] }) })
    ] }) }) }),
    /* @__PURE__ */ jsxs("div", { className: "", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold", children: "Υποψήφιοι" }),
      /* @__PURE__ */ jsx("ul", { className: "pt-2", children: candidates2.map((candidate, i) => /* @__PURE__ */ jsx("li", { className: "list-disc", children: candidate.name }, i)) })
    ] })
  ] });
}
function meta$1({}) {
  return [{
    title: "Ψηφοφόροι"
  }, {
    name: "description",
    content: "Ψηφοφόροι"
  }];
}
const voters = withComponentProps(function DeployContractRoute3() {
  return /* @__PURE__ */ jsx(Candidates, {});
});
const route9 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: voters,
  meta: meta$1
}, Symbol.toStringTag, { value: "Module" }));
const ImportVoters = () => {
  const [file, setFile] = useState(null);
  const [voters2, setVoters] = useState([]);
  const [refresh, setRefresh] = useState(false);
  const handleFileChange = (event) => {
    if (event.target.files) {
      setFile(event.target.files[0]);
    }
  };
  useEffect(() => {
    const fetchVoters = async () => {
      try {
        const contract2 = await getContractInstance();
        const voters22 = await contract2.methods.getAllVoters().call();
        const parsedVoters = voters22.map((voter) => ({
          fullName: voter.fullName,
          isRegistered: voter.isRegistered,
          hasVoted: voter.hasVoted
        }));
        setVoters(parsedVoters);
      } catch (err) {
        toast({ title: "Σφάλμα", description: err.message, variant: "destructive" });
      }
    };
    fetchVoters();
  }, [refresh]);
  const handleFileUpload = async () => {
    if (!file) {
      toast({
        title: "Σφάλμα",
        description: "Παρακαλώ επιλέξτε ένα αρχείο CSV.",
        variant: "destructive"
      });
      return;
    }
    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: async (results2) => {
        const csvData = results2.data;
        const contract2 = await getContractInstance();
        const registeredVoters = [];
        for (const row of csvData) {
          const { fullName } = row;
          if (!fullName) {
            console.error("Invalid row in CSV:", row);
            continue;
          }
          if (!web3$1) {
            console.error("Web3 not initialized");
            return;
          }
          try {
            const newAccount = web3$1.eth.accounts.create();
            if (newAccount) {
              const tx = await contract2.methods.registerVoter(newAccount.address, fullName).send({ from: (await web3$1.eth.getAccounts())[0] });
              registeredVoters.push({
                fullName,
                isRegistered: true,
                hasVoted: false
              });
              console.log(`Voter registered: ${fullName} - Tx: ${tx.transactionHash}`);
            }
          } catch (error) {
            console.error(`Failed to register voter ${fullName}:`, error.message);
          }
        }
        setVoters(registeredVoters);
        toast({
          title: "Επιτυχία",
          description: "Οι ψηφοφόροι εγγράφηκαν με επιτυχία.",
          variant: "default"
        });
        setFile(null);
      },
      error: (err) => {
        console.error("CSV Parsing Error:", err.message);
        toast({
          title: "Σφάλμα",
          description: "Αποτυχία ανάγνωσης του αρχείου CSV.",
          variant: "destructive"
        });
      }
    });
  };
  return /* @__PURE__ */ jsxs("div", { className: "flex flex-col gap-6 w-96", children: [
    /* @__PURE__ */ jsx(Card, { className: "p-4 h-min", children: /* @__PURE__ */ jsxs("div", { className: "space-y-4", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold", children: "Εισαγωγή Ψηφοφόρων" }),
      /* @__PURE__ */ jsxs("div", { className: "space-y-2 text-sm", children: [
        /* @__PURE__ */ jsx(Label$2, { htmlFor: "file", className: "text-sm font-medium", children: "Αρχείο" }),
        /* @__PURE__ */ jsx(Input, { id: "file", type: "file", placeholder: "Αρχείο", accept: ".csv", onChange: handleFileChange })
      ] }),
      /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(Button, { size: "lg", onClick: handleFileUpload, children: "Ανέβασμα" }) })
    ] }) }),
    /* @__PURE__ */ jsxs("div", { className: "", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex", children: [
        /* @__PURE__ */ jsx("h1", { className: "text-2xl font-semibold", children: "Ψηφοφόροι" }),
        /* @__PURE__ */ jsx(Button, { variant: "link", onClick: () => setRefresh(!refresh), children: "Ανανέωση" })
      ] }),
      /* @__PURE__ */ jsx("ul", { className: "pt-2", children: voters2.map((voter, i) => /* @__PURE__ */ jsxs("li", { className: "list-disc", children: [
        voter.fullName,
        " - ",
        voter.isRegistered ? "Εγγεγραμμένος" : "Μη Εγγεγραμμένος"
      ] }, i)) })
    ] })
  ] });
};
function meta({}) {
  return [{
    title: "Εισαγωγή Ψηφοφόρων"
  }, {
    name: "description",
    content: "Εισαγωγή Ψηφοφόρων"
  }];
}
const importVoters = withComponentProps(function ImportVotersRoute() {
  return /* @__PURE__ */ jsx(ImportVoters, {});
});
const route10 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: importVoters,
  meta
}, Symbol.toStringTag, { value: "Module" }));
const serverManifest = { "entry": { "module": "/assets/entry.client-DUW6v3Pe.js", "imports": ["/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/index-CoB-VLMc.js"], "css": [] }, "routes": { "root": { "id": "root", "parentId": void 0, "path": "", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": true, "module": "/assets/root-px6WG0Sd.js", "imports": ["/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/index-CoB-VLMc.js", "/assets/with-props-b1i4h9El.js", "/assets/AuthContext-BA6Rtxkc.js", "/assets/index-Due4X9lb.js", "/assets/index-B3XE2UaP.js", "/assets/index-8hc-bqEh.js", "/assets/index-DLfo2w2A.js", "/assets/index-DkbXq95X.js", "/assets/index-BzlDct7J.js", "/assets/icons-kazulAEJ.js", "/assets/utils-CBmQbvEb.js", "/assets/use-toast-rhCGJxoN.js", "/assets/createLucideIcon-BizpdrYR.js", "/assets/x-DdXwIeoP.js", "/assets/loader-circle-C0w-6Ez6.js", "/assets/plus-R4PAUIF5.js", "/assets/chevron-down-CwBKgljo.js"], "css": [] }, "routes/layout": { "id": "routes/layout", "parentId": "root", "path": void 0, "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/layout-CeGFMeY4.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/utils-CBmQbvEb.js", "/assets/AuthContext-BA6Rtxkc.js", "/assets/button-33l5vJYl.js", "/assets/index-B3XE2UaP.js", "/assets/index-BzlDct7J.js"], "css": [] }, "routes/home": { "id": "routes/home", "parentId": "routes/layout", "path": void 0, "index": true, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/home-Bs8uW7ji.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js"], "css": [] }, "routes/common/signin": { "id": "routes/common/signin", "parentId": "routes/layout", "path": "signin", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/signin-DW6Xqyze.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/input-CuhXqZKM.js", "/assets/use-toast-rhCGJxoN.js", "/assets/password-input-5ZAPlaK2.js", "/assets/loading-button-BQfSeoJ5.js", "/assets/AuthContext-BA6Rtxkc.js", "/assets/utils-CBmQbvEb.js", "/assets/index-B7XgfpAg.js", "/assets/icons-kazulAEJ.js", "/assets/card-CTjxlscv.js", "/assets/index-B3XE2UaP.js", "/assets/label-BV3ipPG8.js", "/assets/index-DE-pzLVP.js", "/assets/index-DLfo2w2A.js", "/assets/index-CoB-VLMc.js", "/assets/index-BzlDct7J.js", "/assets/loader-circle-C0w-6Ez6.js", "/assets/createLucideIcon-BizpdrYR.js", "/assets/index-Due4X9lb.js", "/assets/x-DdXwIeoP.js", "/assets/plus-R4PAUIF5.js", "/assets/chevron-down-CwBKgljo.js"], "css": [] }, "routes/voters/signup": { "id": "routes/voters/signup", "parentId": "routes/layout", "path": "signup", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/signup-ChTqfaMg.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/input-CuhXqZKM.js", "/assets/use-toast-rhCGJxoN.js", "/assets/password-input-5ZAPlaK2.js", "/assets/loading-button-BQfSeoJ5.js", "/assets/AuthContext-BA6Rtxkc.js", "/assets/utils-CBmQbvEb.js", "/assets/web3-BWiGdbZi.js", "/assets/card-CTjxlscv.js", "/assets/icons-kazulAEJ.js", "/assets/createLucideIcon-BizpdrYR.js", "/assets/x-DdXwIeoP.js", "/assets/loader-circle-C0w-6Ez6.js", "/assets/plus-R4PAUIF5.js", "/assets/chevron-down-CwBKgljo.js", "/assets/index-B3XE2UaP.js", "/assets/label-BV3ipPG8.js", "/assets/index-DE-pzLVP.js", "/assets/index-DLfo2w2A.js", "/assets/index-CoB-VLMc.js", "/assets/index-BzlDct7J.js"], "css": [] }, "routes/common/results": { "id": "routes/common/results", "parentId": "routes/layout", "path": "results", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/results-Bje7Ixmj.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/web3-BWiGdbZi.js", "/assets/utils-CBmQbvEb.js", "/assets/card-CTjxlscv.js", "/assets/use-toast-rhCGJxoN.js"], "css": [] }, "routes/voters/vote": { "id": "routes/voters/vote", "parentId": "routes/layout", "path": "vote", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/vote-DmLWvax3.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/web3-BWiGdbZi.js", "/assets/utils-CBmQbvEb.js", "/assets/button-33l5vJYl.js", "/assets/AuthContext-BA6Rtxkc.js", "/assets/candidates-list-DnJVGP1T.js", "/assets/use-toast-rhCGJxoN.js", "/assets/index-B3XE2UaP.js", "/assets/index-BzlDct7J.js", "/assets/card-CTjxlscv.js", "/assets/index-B7XgfpAg.js", "/assets/index-Due4X9lb.js", "/assets/index-DLfo2w2A.js", "/assets/index-CoB-VLMc.js", "/assets/plus-R4PAUIF5.js", "/assets/createLucideIcon-BizpdrYR.js", "/assets/label-BV3ipPG8.js", "/assets/index-DE-pzLVP.js"], "css": [] }, "routes/admin/contract": { "id": "routes/admin/contract", "parentId": "routes/layout", "path": "admin/contract", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/contract-CKl2GJTy.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/utils-CBmQbvEb.js", "/assets/index-Due4X9lb.js", "/assets/index-8hc-bqEh.js", "/assets/index-B3XE2UaP.js", "/assets/index-DLfo2w2A.js", "/assets/chevron-down-CwBKgljo.js", "/assets/use-toast-rhCGJxoN.js", "/assets/index-CoB-VLMc.js", "/assets/createLucideIcon-BizpdrYR.js"], "css": [] }, "routes/admin/candidates": { "id": "routes/admin/candidates", "parentId": "routes/layout", "path": "admin/candidates", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/candidates-BhdipG1M.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/button-33l5vJYl.js", "/assets/card-CTjxlscv.js", "/assets/candidates-list-DnJVGP1T.js", "/assets/index-CoB-VLMc.js", "/assets/utils-CBmQbvEb.js", "/assets/index-Due4X9lb.js", "/assets/index-B3XE2UaP.js", "/assets/index-DLfo2w2A.js", "/assets/index-DkbXq95X.js", "/assets/x-DdXwIeoP.js", "/assets/input-CuhXqZKM.js", "/assets/index-B7XgfpAg.js", "/assets/loading-button-BQfSeoJ5.js", "/assets/label-BV3ipPG8.js", "/assets/use-toast-rhCGJxoN.js", "/assets/index-BzlDct7J.js", "/assets/plus-R4PAUIF5.js", "/assets/createLucideIcon-BizpdrYR.js", "/assets/loader-circle-C0w-6Ez6.js", "/assets/index-DE-pzLVP.js"], "css": [] }, "routes/admin/voters": { "id": "routes/admin/voters", "parentId": "routes/layout", "path": "admin/voters", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/voters-DbHKI4G-.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/card-CTjxlscv.js", "/assets/loading-button-BQfSeoJ5.js", "/assets/input-CuhXqZKM.js", "/assets/use-toast-rhCGJxoN.js", "/assets/utils-CBmQbvEb.js", "/assets/index-B3XE2UaP.js", "/assets/label-BV3ipPG8.js", "/assets/index-DE-pzLVP.js", "/assets/index-DLfo2w2A.js", "/assets/index-CoB-VLMc.js", "/assets/index-BzlDct7J.js", "/assets/loader-circle-C0w-6Ez6.js", "/assets/createLucideIcon-BizpdrYR.js"], "css": [] }, "routes/admin/import-voters": { "id": "routes/admin/import-voters", "parentId": "routes/layout", "path": "admin/import-voters", "index": void 0, "caseSensitive": void 0, "hasAction": false, "hasLoader": false, "hasClientAction": false, "hasClientLoader": false, "hasErrorBoundary": false, "module": "/assets/import-voters-BW_8u0FZ.js", "imports": ["/assets/with-props-b1i4h9El.js", "/assets/chunk-D52XG6IA-DVTnw_rV.js", "/assets/button-33l5vJYl.js", "/assets/card-CTjxlscv.js", "/assets/input-CuhXqZKM.js", "/assets/use-toast-rhCGJxoN.js", "/assets/utils-CBmQbvEb.js", "/assets/index-DE-pzLVP.js", "/assets/web3-BWiGdbZi.js", "/assets/index-B3XE2UaP.js", "/assets/index-BzlDct7J.js", "/assets/index-DLfo2w2A.js", "/assets/index-CoB-VLMc.js"], "css": [] } }, "url": "/assets/manifest-c825ee50.js", "version": "c825ee50" };
const assetsBuildDirectory = "build\\client";
const basename = "/";
const future = { "unstable_optimizeDeps": false };
const isSpaMode = false;
const publicPath = "/";
const entry = { module: entryServer };
const routes = {
  "root": {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: route0
  },
  "routes/layout": {
    id: "routes/layout",
    parentId: "root",
    path: void 0,
    index: void 0,
    caseSensitive: void 0,
    module: route1
  },
  "routes/home": {
    id: "routes/home",
    parentId: "routes/layout",
    path: void 0,
    index: true,
    caseSensitive: void 0,
    module: route2
  },
  "routes/common/signin": {
    id: "routes/common/signin",
    parentId: "routes/layout",
    path: "signin",
    index: void 0,
    caseSensitive: void 0,
    module: route3
  },
  "routes/voters/signup": {
    id: "routes/voters/signup",
    parentId: "routes/layout",
    path: "signup",
    index: void 0,
    caseSensitive: void 0,
    module: route4
  },
  "routes/common/results": {
    id: "routes/common/results",
    parentId: "routes/layout",
    path: "results",
    index: void 0,
    caseSensitive: void 0,
    module: route5
  },
  "routes/voters/vote": {
    id: "routes/voters/vote",
    parentId: "routes/layout",
    path: "vote",
    index: void 0,
    caseSensitive: void 0,
    module: route6
  },
  "routes/admin/contract": {
    id: "routes/admin/contract",
    parentId: "routes/layout",
    path: "admin/contract",
    index: void 0,
    caseSensitive: void 0,
    module: route7
  },
  "routes/admin/candidates": {
    id: "routes/admin/candidates",
    parentId: "routes/layout",
    path: "admin/candidates",
    index: void 0,
    caseSensitive: void 0,
    module: route8
  },
  "routes/admin/voters": {
    id: "routes/admin/voters",
    parentId: "routes/layout",
    path: "admin/voters",
    index: void 0,
    caseSensitive: void 0,
    module: route9
  },
  "routes/admin/import-voters": {
    id: "routes/admin/import-voters",
    parentId: "routes/layout",
    path: "admin/import-voters",
    index: void 0,
    caseSensitive: void 0,
    module: route10
  }
};
export {
  serverManifest as assets,
  assetsBuildDirectory,
  basename,
  entry,
  future,
  isSpaMode,
  publicPath,
  routes
};
